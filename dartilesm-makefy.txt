Directory structure:
└── dartilesm-makefy/
    ├── README.md
    ├── bun.lockb
    ├── package.json
    ├── prettier.config.js
    ├── tsconfig.json
    ├── turbo.json
    ├── .eslintrc.js
    ├── .npmrc
    ├── apps/
    │   ├── chat-with-pdf/
    │   │   ├── README.md
    │   │   ├── middleware.ts
    │   │   ├── next.config.js
    │   │   ├── package.json
    │   │   ├── postcss.config.js
    │   │   ├── tailwind.config.ts
    │   │   ├── tsconfig.json
    │   │   ├── turbo.json
    │   │   ├── vercel.json
    │   │   ├── .gitignore
    │   │   ├── app/
    │   │   │   ├── globals.css
    │   │   │   ├── layout.tsx
    │   │   │   ├── page.tsx
    │   │   │   ├── (authentication)/
    │   │   │   │   ├── layout.tsx
    │   │   │   │   ├── auth-failed/
    │   │   │   │   │   └── page.tsx
    │   │   │   │   ├── login/
    │   │   │   │   │   └── page.tsx
    │   │   │   │   └── signup/
    │   │   │   │       └── page.tsx
    │   │   │   ├── (default)/
    │   │   │   │   ├── layout.tsx
    │   │   │   │   └── chat/
    │   │   │   │       ├── layout.tsx
    │   │   │   │       ├── loading.tsx
    │   │   │   │       ├── page.tsx
    │   │   │   │       └── [documentId]/
    │   │   │   │           ├── layout.tsx
    │   │   │   │           ├── loading.tsx
    │   │   │   │           └── page.tsx
    │   │   │   ├── actions/
    │   │   │   │   ├── auth.ts
    │   │   │   │   ├── delete-chat.ts
    │   │   │   │   ├── edit-chat.ts
    │   │   │   │   ├── generate-document-title.ts
    │   │   │   │   ├── generate-suggested-questions.ts
    │   │   │   │   ├── get-document-by-chat-id.ts
    │   │   │   │   ├── login.ts
    │   │   │   │   ├── sign-in-with-oauth.ts
    │   │   │   │   ├── signup.ts
    │   │   │   │   ├── submit-feedback.ts
    │   │   │   │   ├── update-chat-messages.ts
    │   │   │   │   └── upload-new-document.ts
    │   │   │   ├── api/
    │   │   │   │   ├── auth/
    │   │   │   │   │   ├── callback/
    │   │   │   │   │   │   └── route.ts
    │   │   │   │   │   ├── confirm/
    │   │   │   │   │   │   └── route.ts
    │   │   │   │   │   └── signup/
    │   │   │   │   │       └── route.tsx
    │   │   │   │   ├── chat/
    │   │   │   │   │   ├── route.ts
    │   │   │   │   │   └── new-chat/
    │   │   │   │   │       └── route.ts
    │   │   │   │   └── pdf-helper/
    │   │   │   │       └── route.ts
    │   │   │   ├── auth/
    │   │   │   │   └── callback/
    │   │   │   │       └── route.ts
    │   │   │   ├── components/
    │   │   │   │   ├── theme-provider.tsx
    │   │   │   │   ├── chat/
    │   │   │   │   │   ├── assistant-message.tsx
    │   │   │   │   │   ├── chat-footer.tsx
    │   │   │   │   │   ├── chat-list.tsx
    │   │   │   │   │   ├── chat-messages.tsx
    │   │   │   │   │   ├── chat-screen.tsx
    │   │   │   │   │   ├── chat-user-typing-animation.tsx
    │   │   │   │   │   ├── chat.tsx
    │   │   │   │   │   ├── message-bubble.tsx
    │   │   │   │   │   ├── message-quick-actions.tsx
    │   │   │   │   │   ├── user-message.tsx
    │   │   │   │   │   ├── chat-footer/
    │   │   │   │   │   │   └── suggested-questions.tsx
    │   │   │   │   │   ├── chat-header/
    │   │   │   │   │   │   ├── chat-header.tsx
    │   │   │   │   │   │   └── chat-pdf.tsx
    │   │   │   │   │   ├── constants/
    │   │   │   │   │   │   ├── message-quick-actions.ts
    │   │   │   │   │   │   └── message-type.ts
    │   │   │   │   │   ├── loading/
    │   │   │   │   │   │   ├── chat.loading.tsx
    │   │   │   │   │   │   └── pdf.loading.tsx
    │   │   │   │   │   └── types/
    │   │   │   │   │       └── message-actions.ts
    │   │   │   │   ├── email-templates/
    │   │   │   │   │   └── verify-email-template.tsx
    │   │   │   │   ├── header/
    │   │   │   │   │   ├── feedback-dialog.tsx
    │   │   │   │   │   ├── header.tsx
    │   │   │   │   │   ├── theme-switcher.tsx
    │   │   │   │   │   ├── document-title/
    │   │   │   │   │   │   ├── document-title.tsx
    │   │   │   │   │   │   ├── constants/
    │   │   │   │   │   │   │   ├── input-names.ts
    │   │   │   │   │   │   │   └── loading-messages.ts
    │   │   │   │   │   │   ├── edit-document-dialog/
    │   │   │   │   │   │   │   └── edit-document-dialog.tsx
    │   │   │   │   │   │   └── new-document-dialog/
    │   │   │   │   │   │       ├── new-document-dialog-content.tsx
    │   │   │   │   │   │       ├── new-document-dialog.tsx
    │   │   │   │   │   │       └── new-document-loading-state.tsx
    │   │   │   │   │   └── user-nav/
    │   │   │   │   │       ├── user-nav-menu-items.tsx
    │   │   │   │   │       └── user-nav.tsx
    │   │   │   │   ├── pages-containers/
    │   │   │   │   │   ├── chat-id-container.tsx
    │   │   │   │   │   ├── chats-container.tsx
    │   │   │   │   │   ├── login/
    │   │   │   │   │   │   ├── login-container.tsx
    │   │   │   │   │   │   └── login-form.tsx
    │   │   │   │   │   └── signup/
    │   │   │   │   │       ├── sign-up-container.tsx
    │   │   │   │   │       ├── signup-form.tsx
    │   │   │   │   │       └── social.tsx
    │   │   │   │   ├── pdf/
    │   │   │   │   │   ├── pdf-toolbar.tsx
    │   │   │   │   │   └── pdf-viewer.tsx
    │   │   │   │   ├── sidebar/
    │   │   │   │   │   ├── app-sidebar.tsx
    │   │   │   │   │   ├── recent-conversation-sidebar-group.tsx
    │   │   │   │   │   └── secondary-sidebar-menu.tsx
    │   │   │   │   └── ui/
    │   │   │   │       ├── container.tsx
    │   │   │   │       ├── heading.tsx
    │   │   │   │       ├── logo.tsx
    │   │   │   │       └── user-avatar.tsx
    │   │   │   ├── context/
    │   │   │   │   └── chat-context.tsx
    │   │   │   └── private/
    │   │   │       └── page.tsx
    │   │   ├── hooks/
    │   │   │   └── use-global-chat.ts
    │   │   ├── icons/
    │   │   │   ├── sad-face.tsx
    │   │   │   └── sparkle.tsx
    │   │   ├── lib/
    │   │   │   ├── constants/
    │   │   │   │   └── index.ts
    │   │   │   └── supabase/
    │   │   │       ├── middleware.ts
    │   │   │       └── queries/
    │   │   │           ├── get-chat.ts
    │   │   │           ├── get-chats.ts
    │   │   │           └── get-documents.ts
    │   │   ├── prisma/
    │   │   │   ├── schema.prisma
    │   │   │   └── migrations/
    │   │   │       ├── migration_lock.toml
    │   │   │       ├── 20240712011903_init/
    │   │   │       │   └── migration.sql
    │   │   │       ├── 20240712012540_optional_fields/
    │   │   │       │   └── migration.sql
    │   │   │       ├── 20240804224749_feedback/
    │   │   │       │   └── migration.sql
    │   │   │       ├── 20240818222106_add_document/
    │   │   │       │   └── migration.sql
    │   │   │       ├── 20240818230228_add_optional_fields/
    │   │   │       │   └── migration.sql
    │   │   │       ├── 20240818233331_add_doument_metadata/
    │   │   │       │   └── migration.sql
    │   │   │       ├── 20240819225259_add_document_sections/
    │   │   │       │   └── migration.sql
    │   │   │       ├── 20240821023002_add_the_text_chunk_column/
    │   │   │       │   └── migration.sql
    │   │   │       ├── 20240823013715_generate_random_uuid_on_document_sections_table/
    │   │   │       │   └── migration.sql
    │   │   │       └── 20240824221542_match_documents_function/
    │   │   │           └── migration.sql
    │   │   ├── public/
    │   │   └── utils/
    │   │       ├── context.ts
    │   │       ├── embed-document.ts
    │   │       ├── get-loading-messages.ts
    │   │       ├── get-pdf-metadata.ts
    │   │       ├── oauth-redirect-url.ts
    │   │       ├── pinecone.client.ts
    │   │       ├── rate-limit-requests.ts
    │   │       ├── truncate-string.ts
    │   │       └── vector-store.ts
    │   ├── text-tools/
    │   │   ├── next.config.js
    │   │   ├── package.json
    │   │   ├── postcss.config.js
    │   │   ├── tailwind.config.ts
    │   │   ├── tsconfig.json
    │   │   ├── .gitignore
    │   │   ├── app/
    │   │   │   ├── globals.css
    │   │   │   ├── layout.tsx
    │   │   │   ├── page.tsx
    │   │   │   ├── (tools)/
    │   │   │   │   ├── podcast-script-generator/
    │   │   │   │   │   └── page.tsx
    │   │   │   │   ├── qa-generator/
    │   │   │   │   │   └── page.tsx
    │   │   │   │   ├── tiktok-hooks-generator/
    │   │   │   │   │   └── page.tsx
    │   │   │   │   └── youtube-summarizer/
    │   │   │   │       └── page.tsx
    │   │   │   ├── api/
    │   │   │   │   ├── generate/
    │   │   │   │   │   └── route.ts
    │   │   │   │   ├── podcast-script-generator/
    │   │   │   │   │   └── generate/
    │   │   │   │   │       └── route.ts
    │   │   │   │   ├── qa-generator/
    │   │   │   │   │   └── generate/
    │   │   │   │   │       └── route.ts
    │   │   │   │   ├── tiktok-hooks-generator/
    │   │   │   │   │   └── generate/
    │   │   │   │   │       └── route.ts
    │   │   │   │   └── youtube-summarizer/
    │   │   │   │       └── generate/
    │   │   │   │           └── route.ts
    │   │   │   └── components/
    │   │   │       ├── markdown-viewer.tsx
    │   │   │       ├── theme-provider.tsx
    │   │   │       ├── tool-hero.tsx
    │   │   │       └── tool-list.tsx
    │   │   ├── lib/
    │   │   │   └── youtube.ts
    │   │   └── public/
    │   └── web/
    │       ├── README.md
    │       ├── LICENSE.md
    │       ├── components.json
    │       ├── next.config.js
    │       ├── package.json
    │       ├── postcss.config.js
    │       ├── robots.txt
    │       ├── tailwind.config.ts
    │       ├── tsconfig.json
    │       ├── turbo.json
    │       ├── vercel.json
    │       ├── .gitignore
    │       ├── actions/
    │       │   └── resend-create-contact.ts
    │       ├── app/
    │       │   ├── globals.css
    │       │   ├── layout.tsx
    │       │   ├── page.tsx
    │       │   ├── components/
    │       │   │   ├── hero.tsx
    │       │   │   ├── wait-list-form.tsx
    │       │   │   ├── layout/
    │       │   │   │   ├── nav.tsx
    │       │   │   │   └── navbar.tsx
    │       │   │   └── shared/
    │       │   │       ├── background-beams-with-collision.tsx.tsx
    │       │   │       ├── text-morph.tsx
    │       │   │       ├── text-rotate.tsx
    │       │   │       └── text-scramble.tsx
    │       │   └── fonts/
    │       │       ├── SF-Pro-Display-Medium.otf
    │       │       └── index.ts
    │       ├── lib/
    │       │   ├── constants.ts
    │       │   └── hooks/
    │       │       ├── use-intersection-observer.ts
    │       │       ├── use-local-storage.ts
    │       │       ├── use-media-query.ts
    │       │       └── use-scroll.ts
    │       └── public/
    │           └── authjs.webp
    ├── packages/
    │   ├── eslint-config/
    │   │   ├── README.md
    │   │   ├── library.js
    │   │   ├── next.js
    │   │   ├── package.json
    │   │   └── react-internal.js
    │   ├── supabase/
    │   │   ├── package.json
    │   │   ├── tsconfig.json
    │   │   ├── turbo.json
    │   │   └── src/
    │   │       ├── index.ts
    │   │       ├── middleware.ts
    │   │       ├── client/
    │   │       │   ├── admin.ts
    │   │       │   ├── client.ts
    │   │       │   └── server.ts
    │   │       ├── supabase/
    │   │       │   ├── config.toml
    │   │       │   ├── seed.sql
    │   │       │   ├── .gitignore
    │   │       │   └── migrations/
    │   │       │       ├── 20240818213221_remote_schema.sql
    │   │       │       ├── 20240818213851_remote_schema.sql
    │   │       │       ├── 20240902160033_remote_schema.sql
    │   │       │       ├── 20241102160258_authentication-and-roles.sql
    │   │       │       ├── 20241102160420_set-userid-default-uuid.sql
    │   │       │       ├── 20241109155454_auto-remove-document-file.sql
    │   │       │       └── 20241121030700_remote_schema.sql
    │   │       └── types/
    │   │           ├── database.ts
    │   │           ├── index.ts
    │   │           └── supabase.ts
    │   ├── typescript-config/
    │   │   ├── base.json
    │   │   ├── nextjs.json
    │   │   ├── package.json
    │   │   └── react-library.json
    │   └── ui/
    │       ├── components.json
    │       ├── globals.css
    │       ├── index.ts
    │       ├── package.json
    │       ├── tailwind.config.ts
    │       ├── tsconfig.json
    │       ├── tsconfig.lint.json
    │       ├── components/
    │       │   ├── alert.tsx
    │       │   ├── avatar.tsx
    │       │   ├── breadcrumb.tsx
    │       │   ├── button.tsx
    │       │   ├── card.tsx
    │       │   ├── carousel.tsx
    │       │   ├── collapsible.tsx
    │       │   ├── command.tsx
    │       │   ├── dialog.tsx
    │       │   ├── drawer.tsx
    │       │   ├── dropdown-menu.tsx
    │       │   ├── form.tsx
    │       │   ├── index.ts
    │       │   ├── input-otp.tsx
    │       │   ├── input.tsx
    │       │   ├── label.tsx
    │       │   ├── navigation-menu.tsx
    │       │   ├── pagination.tsx
    │       │   ├── popover.tsx
    │       │   ├── resizable.tsx
    │       │   ├── scroll-area.tsx
    │       │   ├── select.tsx
    │       │   ├── separator.tsx
    │       │   ├── sheet.tsx
    │       │   ├── sidebar.tsx
    │       │   ├── skeleton.tsx
    │       │   ├── switch.tsx
    │       │   ├── tabs.tsx
    │       │   ├── textarea.tsx
    │       │   ├── toast.tsx
    │       │   ├── toaster.tsx
    │       │   ├── toggle-group.tsx
    │       │   ├── toggle.tsx
    │       │   ├── tooltip.tsx
    │       │   └── use-toast.ts
    │       ├── hooks/
    │       │   └── use-mobile.tsx
    │       ├── lib/
    │       │   └── utils.ts
    │       └── turbo/
    │           └── generators/
    │               ├── config.ts
    │               └── templates/
    │                   └── component.hbs
    └── .github/
        └── workflows/
            ├── supabase-tests-pull-request.yml
            └── supabase-update-db.yml

================================================
File: README.md
================================================
# Makefy ✨ - Make Things Simplify

Makefy is a hub of AI tools designed to simplify various tasks and processes. Utilizing cutting-edge artificial intelligence, Makefy aims to provide users with powerful, easy-to-use solutions for their everyday needs.

## Repository Structure

This repository is managed using [Turborepo](https://turbo.build/) for efficient monorepo management.

### Apps and Packages

- `chat-with-pdf`: the Chat with PDF AI tool
- `landing`: the landing page of Makefy
- `@makefy/ui`: a stub React component library all apps share made with [shadcn](https://ui.shadcn.com/).
- `@makefy/eslint-config`: `eslint` configurations (includes `eslint-config-next` and `eslint-config-prettier`)
- `@makefy/typescript-config`: `tsconfig.json`s used throughout the monorepo

## Getting Started

To get started with Makefy, follow these steps:

1. **Clone the Repository**:
   ```bash
   git clone https://github.com/dartilesm/makefy.git
   cd makefy
   ```
2. **Install Dependencies**:
   ```bash
   bun install
   ```
3. **Run the Development Server**:
   ```bash
   bun run dev
   ```
4. **Build the Project**:
   ```bash
   bun run dev
   ```
5. **Lint the Code**:
   ```bash
   bun run lint
   ```
6. **Format the Code**:
   ```bash
   bun run lint
   ```

---

Thank you for using Makefy! We hope our tools help you simplify your tasks and improve productivity.


================================================
File: package.json
================================================
{
  "name": "makefy",
  "private": true,
  "scripts": {
    "build": "turbo build",
    "dev": "turbo dev --env-mode=loose",
    "dev:web": "turbo dev --filter=@makefy/web --env-mode=loose",
    "dev:chat-with-pdf": "turbo dev --filter=@makefy/chat-with-pdf --env-mode=loose",
    "dev:text-tools": "turbo dev --filter=@makefy/text-tools --env-mode=loose",
    "build:web": "turbo build --filter=@makefy/web --env-mode=loose",
    "build:chat-with-pdf": "turbo build --filter=@makefy/chat-with-pdf --env-mode=loose",
    "build:text-tools": "turbo build --filter=@makefy/text-tools --env-mode=loose",
    "lint": "turbo lint",
    "format": "prettier --write \"**/*.{ts,tsx,md}\"",
    "commit": "sui-mono commit"
  },
  "devDependencies": {
    "@makefy/eslint-config": "workspace:*",
    "@makefy/typescript-config": "workspace:*",
    "@s-ui/mono": "2.45.0",
    "dotenv-cli": "7.4.2",
    "eslint-config-next": "14.2.5",
    "prettier": "3.2.5",
    "prettier-plugin-tailwindcss": "0.5.14",
    "tsx": "4.16.0",
    "turbo": "2.0.12"
  },
  "engines": {
    "node": ">=20"
  },
  "packageManager": "bun@1.0.35",
  "workspaces": [
    "apps/*",
    "packages/*"
  ],
  "dependencies": {}
}

================================================
File: prettier.config.js
================================================
// prettier.config.js
module.exports = {
  bracketSpacing: true,
  semi: true,
  trailingComma: "all",
  printWidth: 80,
  tabWidth: 2,
  plugins: ['prettier-plugin-tailwindcss'],
};


================================================
File: tsconfig.json
================================================
{
  "extends": "@makefy/typescript-config/base.json",
}

================================================
File: turbo.json
================================================
{
  "$schema": "https://turbo.build/schema.json",
  "globalDependencies": [
    "**/.env.*local"
  ],
  "envMode": "loose",
  "tasks": {
    "build": {
      "dependsOn": [
        "^build"
      ],
      "outputs": [
        ".next/**",
        "!.next/cache/**"
      ],
      "env": [
        "SUPABASE_URL",
        "SUPABASE_API_KEY",
        "DATABASE_URL",
        "DIRECT_URL"
      ]
    },
    "lint": {
      "dependsOn": [
        "^lint"
      ]
    },
    "dev": {
      "dependsOn": [
        "@makefy/supabase#build"
      ],
      "cache": false,
      "persistent": true
    }
  }
}

================================================
File: .eslintrc.js
================================================
// This configuration only applies to the package manager root.
/** @type {import("eslint").Linter.Config} */
module.exports = {
  ignorePatterns: ["apps/**", "packages/**"],
  extends: ["@makefy/eslint-config/library.js"],
  parser: "@typescript-eslint/parser",
  parserOptions: {
    project: true,
  },
};


================================================
File: apps/chat-with-pdf/README.md
================================================
![image](https://github.com/user-attachments/assets/eefcf1ae-6b1a-4b38-9185-0fcb8bf3758c)

# Chat with PDF

Chat with PDF is a Next.js application that allows users to interact with PDF documents using natural language processing. By leveraging advanced AI technologies, users can upload PDF files and query them in a conversational manner, extracting information quickly and efficiently.

## Features

- **Upload or Import PDF Documents**: Easily upload PDF files from your device or import them from external sources to start interacting with your documents.
- **Download Chat History**: Save your conversations with the PDF to your device for future reference or sharing with others.
- **Bookmark Favorite Messages**: Mark important messages in your chat history to quickly revisit key information without scrolling through the entire conversation.
- **Contextual Queries**: Highlight specific text within your PDF and ask the assistant targeted questions about the highlighted content for more precise and relevant responses.
- **Page Number References**: Each AI-generated response includes the page number where the relevant information is found, making it easy to locate the original source within the document.

## Technologies Used

- **[Next.js](https://nextjs.org/docs/getting-started/installation)**: A React framework for server-rendered applications and static websites.
- **[Pinecone](https://www.pinecone.io/)**: A vector database for efficient similarity search and retrieval.
- **[Supabase](https://supabase.com/)**: An open-source Firebase alternative for database and authentication services.
- **[Vercel AI SDK](https://sdk.vercel.ai/)**: Tools and utilities for integrating AI functionalities.
- **[Vercel KV](https://vercel.com/docs/storage/vercel-kv)**: A key-value store for managing application state and caching.
- **[Shadcn](https://ui.shadcn.com/)**: A modern UI library for building user interfaces with ease.


================================================
File: apps/chat-with-pdf/middleware.ts
================================================
import { updateSession } from "lib/supabase/middleware";
import { type NextRequest } from "next/server";

export async function middleware(request: NextRequest) {
  return await updateSession(request);
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * - api/auth (API authentication routes)
     * - Image file extensions like svg, png, jpg, etc.
     */
    "/((?!_next/static|_next/image|favicon.ico|auth|.*\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)",
  ],
};


================================================
File: apps/chat-with-pdf/next.config.js
================================================
/** @type {import('next').NextConfig} */
const nextConfig = {
    webpack: function (config) {
        /**
         * Critical: prevents " ⨯ ./node_modules/canvas/build/Release/canvas.node
         * Module parse failed: Unexpected character '�' (1:0)" error
         */
        config.resolve.alias.canvas = false;

        // You may not need this, it's just to support moduleResolution: 'node16'
        config.resolve.extensionAlias = {
            '.js': ['.js', '.ts', '.tsx'],
        };

        config.module.rules.push({
            test: /\.svg$/,
            use: ['@svgr/webpack'],
        });

        return config;
    },
    transpilePackages: ['@makefy/ui', '@makefy/supabase'],
    reactStrictMode: false,
    swcMinify: true
};

module.exports = nextConfig


================================================
File: apps/chat-with-pdf/package.json
================================================
{
  "name": "@makefy/chat-with-pdf",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "NODE_ENV=development next dev --experimental-https",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@ai-sdk/anthropic": "1.0.0",
    "@ai-sdk/google": "1.0.0",
    "@ai-sdk/openai": "1.0.0",
    "ai": "4.0.0",
    "@makefy/ui": "workspace:*",
    "@makefy/supabase": "workspace:*",
    "@react-email/components": "0.0.25",
    "@react-pdf/renderer": "3.4.4",
    "@upstash/ratelimit": "2.0.1",
    "@vercel/kv": "2.0.0",
    "framer-motion": "11.3.2",
    "lucide-react": "0.408.0",
    "next": "14.2.5",
    "next-plausible": "3.12.2",
    "next-themes": "0.3.0",
    "pdf-lib": "1.17.1",
    "react": "18.3.1",
    "react-dom": "18.3.1",
    "react-dropzone": "14.2.3",
    "react-email": "3.0.1",
    "react-hook-form": "7.52.1",
    "react-icons": "5.3.0",
    "react-pdf": "9.1.0",
    "react-to-pdf": "1.0.1",
    "rehype-raw": "7.0.0",
    "remark-directive": "3.0.0",
    "remark-directive-rehype": "0.4.2",
    "remark-gfm": "4.0.0",
    "resend": "4.0.0",
    "usehooks-ts": "3.1.0"
  },
  "devDependencies": {
    "@google/generative-ai": "0.14.1",
    "@langchain/community": "0.2.16",
    "@langchain/core": "0.2.15",
    "@langchain/google-genai": "0.0.21",
    "@langchain/openai": "0.2.1",
    "@langchain/pinecone": "0.0.7",
    "@makefy/eslint-config": "workspace:*",
    "@makefy/typescript-config": "workspace:*",
    "@pinecone-database/pinecone": "2.2.2",
    "@svgr/webpack": "^8.1.0",
    "@types/node": "20",
    "@types/react": "18.2.61",
    "@types/react-dom": "18.2.19",
    "autoprefixer": "10.4.20",
    "dotenv-cli": "7.4.2",
    "js-md5": "0.8.3",
    "langchain": "0.2.8",
    "pdf-parse": "1.1.1",
    "postcss": "8.4.47",
    "react-markdown": "9.0.1",
    "tailwindcss": "3.4.14",
    "typescript": "5.3.3",
    "zod": "3.23.8"
  }
}

================================================
File: apps/chat-with-pdf/postcss.config.js
================================================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};


================================================
File: apps/chat-with-pdf/tailwind.config.ts
================================================
import path from "path";
import type { Config as TailwindConfig } from "tailwindcss";
import { default as uiTailwindConfig } from "@makefy/ui/tailwind.config";

const config: TailwindConfig = {
  darkMode: ["class"],
  content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
    // Makefy ui components
    path.join(
      path.dirname(require.resolve("@makefy/ui")),
      "components/**/*.{ts,tsx}",
    ),
  ],
  presets: [uiTailwindConfig],
  theme: {
    extend: {
      keyframes: {
        shake: {
          "0%, 100%": {
            transform: "translateX(0)",
          },
          "10%, 30%, 50%, 70%, 90%": {
            transform: "translateX(-10px)",
          },
          "20%, 40%, 60%, 80%": {
            transform: "translateX(10px)",
          },
        },
      },
      animation: {
        shake: "shake 0.6s ease-in-out 0.25s 1",
      },
    },
  },
  plugins: [],
};

export default config;


================================================
File: apps/chat-with-pdf/tsconfig.json
================================================
{
  "extends": "@makefy/typescript-config/nextjs.json",
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "baseUrl": ".",
    "paths": {
      "@/public/*": [
        "public/*"
      ],
      "@/components/*": [
        "app/components/*"
      ],
      "@/pages/*": [
        "pages/*"
      ],
      "@/app/*": [
        "app/*"
      ],
      "@/lib/*": [
        "utils/*"
      ],
      "@/styles/*": [
        "styles/*"
      ],
    },
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ]
  },
  "include": [
    "next-env.d.ts",
    "next.config.js",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts",
    "tailwind.config.ts"
  ],
  "exclude": [
    "node_modules"
  ]
}

================================================
File: apps/chat-with-pdf/turbo.json
================================================
{
    "extends": [
        "//"
    ],
    "tasks": {
        "build": {
            "outputs": [
                ".next/**",
                "!.next/cache/**"
            ]
        }
    }
}

================================================
File: apps/chat-with-pdf/vercel.json
================================================
{
    "rewrites": [
        {
            "source": "/js/script.js",
            "destination": "https://plausible.io/js/script.js"
        },
        {
            "source": "/api/event",
            "destination": "https://plausible.io/api/event"
        }
    ]
}

================================================
File: apps/chat-with-pdf/.gitignore
================================================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

certificates

================================================
File: apps/chat-with-pdf/app/globals.css
================================================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  input[type="number"]::-webkit-inner-spin-button,
  input[type="number"]::-webkit-outer-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }

  ::-webkit-scrollbar {
    @apply h-2.5 w-2.5;
  }

  ::-webkit-scrollbar-track {
    @apply bg-transparent;
  }

  ::-webkit-scrollbar-thumb {
    @apply bg-border rounded-full border-[1px] border-solid border-transparent bg-clip-padding;
  }
}


================================================
File: apps/chat-with-pdf/app/layout.tsx
================================================
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import "@makefy/ui/globals.css";
import { SidebarProvider, Toaster } from "@makefy/ui";
import { ThemeProvider } from "./components/theme-provider";
import { cn } from "@makefy/ui/lib/utils";
import PlausibleProvider from "next-plausible";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Chat with PDF",
  description: "Get insights from your PDFs in seconds",
  icons: {
    icon: [
      {
        rel: "icon",
        url: "/icon1.svg",
        media: "(prefers-color-scheme: dark)",
        type: "image/svg+xml",
      },
      {
        rel: "icon",
        url: "/icon2.svg",
        media: "(prefers-color-scheme: light)",
        type: "image/svg+xml",
      },
      {
        rel: "apple-touch-icon",
        url: "/icon1.svg",
      },
    ],
  },
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <head>
        <PlausibleProvider domain="makefy-chat-with-pdf.vercel.app" enabled />
      </head>
      <body className={cn(inter.className, "h-screen")}>
        <ThemeProvider
          attribute="class"
          defaultTheme="system"
          enableSystem
          disableTransitionOnChange
        >
          {children}
        </ThemeProvider>
        <Toaster />
      </body>
    </html>
  );
}


================================================
File: apps/chat-with-pdf/app/page.tsx
================================================
import { redirect } from "next/navigation";

export default function Home() {
  redirect("/chat");
}


================================================
File: apps/chat-with-pdf/app/(authentication)/layout.tsx
================================================
export default function AuthenticationLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <div className="flex h-screen w-full items-center justify-center lg:min-h-[600px] xl:min-h-[800px]">
      <div className="flex items-center justify-center py-12">{children}</div>
    </div>
  );
}


================================================
File: apps/chat-with-pdf/app/(authentication)/auth-failed/page.tsx
================================================
import { ArrowRightIcon } from "lucide-react";
import Link from "next/link";

export default function AuthFailed() {
  return (
    <div className="bg-background flex min-h-screen flex-col items-center justify-center">
      <div className="mx-auto flex max-w-[400px] flex-col items-center space-y-6 text-center">
        <div className="bg-destructive/10 flex h-20 w-20 items-center justify-center rounded-full">
          <svg
            className="text-destructive h-10 w-10"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"
            />
          </svg>
        </div>
        <h1 className="text-2xl font-semibold tracking-tight">
          Authentication Failed
        </h1>
        <p className="text-muted-foreground">
          There was a problem authenticating your account. Please try signing in
          again.
        </p>
        <Link
          href="/login"
          className="bg-primary text-primary-foreground hover:bg-primary/90 flex inline-flex h-10 items-center justify-center gap-2 rounded-md px-8 text-sm font-medium transition-colors"
        >
          Return to Login <ArrowRightIcon className="h-4 w-4" />
        </Link>
      </div>
    </div>
  );
}


================================================
File: apps/chat-with-pdf/app/(authentication)/login/page.tsx
================================================
import { LoginContainer } from "@/components/pages-containers/login/login-container";
import { Suspense } from "react";

export default function LoginPage() {
  return (
    <Suspense fallback={null}>
      <LoginContainer />
    </Suspense>
  );
}


================================================
File: apps/chat-with-pdf/app/(authentication)/signup/page.tsx
================================================
import { SignUpContainer } from "@/components/pages-containers/signup/sign-up-container";
import { Suspense } from "react";

export default function LoginPage() {
  return (
    <Suspense fallback={null}>
      <SignUpContainer />
    </Suspense>
  );
}


================================================
File: apps/chat-with-pdf/app/(default)/layout.tsx
================================================
import { Header } from "@/components/header/header";
import { AppSidebar } from "@/components/sidebar/app-sidebar";
import { SidebarProvider } from "@makefy/ui";
import { cn } from "@makefy/ui/lib/utils";
import type { User } from "@makefy/supabase/types";
import { Metadata } from "next";
import { createSupabaseServer } from "@makefy/supabase/server";

export const metadata: Metadata = {
  title: "Chats",
};

export default async function DefaultLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const supabase = createSupabaseServer();
  const {
    data: { user },
  } = await supabase.auth.getUser();

  return (
    <SidebarProvider
      defaultOpen={false}
      className="flex h-screen w-screen max-w-[100vw] flex-row"
    >
      <AppSidebar userInfo={user as User} />
      <div
        className={cn([
          "flex h-screen flex-1 shrink-0 flex-col",
          // Calculate the remaining width for the main content
          // as the css is not able to calculate it
          "max-w-[calc(100%-(var(--sidebar-width-icon)))]",
        ])}
      >
        <Header />
        <main className="flex flex-1 flex-row overflow-hidden">{children}</main>
      </div>
    </SidebarProvider>
  );
}


================================================
File: apps/chat-with-pdf/app/(default)/chat/layout.tsx
================================================
import { Metadata } from "next";

export const metadata: Metadata = {
  title: "Chats",
};

export default async function ChatLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return <>{children}</>;
}


================================================
File: apps/chat-with-pdf/app/(default)/chat/loading.tsx
================================================
import { ChatsContainer } from "@/components/pages-containers/chats-container";

export default function ChatLoding() {
  return <ChatsContainer loading />;
}


================================================
File: apps/chat-with-pdf/app/(default)/chat/page.tsx
================================================
import { ChatsContainer } from "@/components/pages-containers/chats-container";
import { getChats } from "lib/supabase/queries/get-chats";
import { getDocuments } from "lib/supabase/queries/get-documents";

export const dynamic = "force-dynamic";

export default async function Page() {
  const chats = await getChats();
  const documents = await getDocuments();

  return <ChatsContainer chats={chats} documents={documents} />;
}


================================================
File: apps/chat-with-pdf/app/(default)/chat/[documentId]/layout.tsx
================================================
export default async function ChatLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return <>{children}</>;
}


================================================
File: apps/chat-with-pdf/app/(default)/chat/[documentId]/loading.tsx
================================================
import { ChatIdContainer } from "@/components/pages-containers/chat-id-container";

export default function Loading() {
  return <ChatIdContainer loading />;
}


================================================
File: apps/chat-with-pdf/app/(default)/chat/[documentId]/page.tsx
================================================
import { ChatIdContainer } from "@/components/pages-containers/chat-id-container";
import { Metadata } from "next";
import { redirect } from "next/navigation";
import { getChat } from "lib/supabase/queries/get-chat";
import { getDocumentByChatId } from "@/app/actions/get-document-by-chat-id";

type Props = {
  params: {
    documentId: string;
  };
};

export async function generateMetadata({ params }: Props): Promise<Metadata> {
  const document = await getDocumentByChatId(params.documentId);

  return {
    title: `Chat - ${document?.name || "Untitled"}`,
  };
}

export default async function Page({ params }: Props) {
  const chatData = await getChat(params.documentId);

  if (!chatData) redirect("/chat");

  return <ChatIdContainer chatData={chatData} />;
}


================================================
File: apps/chat-with-pdf/app/actions/auth.ts
================================================
"use server";

import { createSupabaseServer } from "@makefy/supabase/server";

export const verifyOtp = async (data: {
  email: string;
  otp: string;
  type: string;
}) => {
  const supabase = createSupabaseServer();

  const res = await supabase.auth.verifyOtp({
    email: data.email,
    token: data.otp,
    type: "email",
  });
  return JSON.stringify(res);
};


================================================
File: apps/chat-with-pdf/app/actions/delete-chat.ts
================================================
"use server";

import { createSupabaseServer } from "@makefy/supabase/server";
import { Tables } from "@makefy/supabase/types";

import { revalidatePath, revalidateTag } from "next/cache";
import { redirect } from "next/navigation";

export async function deleteChat(
  chatId: Tables<"Chat">["id"],
  shouldRedirect = true,
) {
  const supabase = createSupabaseServer();

  const { data, error } = await supabase
    .from("Chat")
    .delete()
    .eq("id", chatId)
    .select("id");

  if (error) return { error };

  revalidateTag("documents");
  revalidatePath("/chat");

  if (!shouldRedirect) return { error: null };

  const { data: firstDocument } = await supabase
    .from("Document")
    .select("chatId")
    .single();

  if (firstDocument?.chatId) redirect(`/chat/${firstDocument.chatId}`);

  redirect("/chat");
}


================================================
File: apps/chat-with-pdf/app/actions/edit-chat.ts
================================================
"use server";

import { createSupabaseServer } from "@makefy/supabase/server";
import { Tables } from "@makefy/supabase/types";
import { revalidatePath, revalidateTag } from "next/cache";

export async function editChat(document: Tables<"Document">, title: string) {
  const supabase = createSupabaseServer();

  const { error } = await supabase
    .from("Document")
    .update({ name: title })
    .eq("id", document.id);

  if (error) throw error;

  revalidatePath(`/chat/${document.chatId}`);
  revalidatePath("/chat");
  revalidateTag("documents");
}


================================================
File: apps/chat-with-pdf/app/actions/generate-document-title.ts
================================================
"use server";

import { getContext } from "@/lib/context";
import { createSupabaseServer } from "@makefy/supabase/server";
import { google } from "@ai-sdk/google";
import { generateObject } from "ai";
import { revalidatePath, revalidateTag } from "next/cache";
import { z } from "zod";

export async function generateDocumentTitle(documentId: string) {
  const documentSummary = await getContext(
    "Give me a summary of the document.",
    documentId,
  );

  const { object } = await generateObject({
    model: google("gemini-1.5-flash-latest"),
    schema: z.object({
      title: z.string(),
    }),
    prompt: `You are an AI assistant that generates a title for a given text in a max of 40 characters: ${documentSummary}`,
  });

  if (object.title) {
    const supabase = createSupabaseServer();
    const { data } = await supabase.auth.getSession();
    revalidatePath(`/chat/${documentId}`);
    revalidateTag(documentId);
  }

  return object;
}


================================================
File: apps/chat-with-pdf/app/actions/generate-suggested-questions.ts
================================================
"use server";

import { getContext } from "@/lib/context";
import { google } from "@ai-sdk/google";
import { generateObject } from "ai";
import { revalidatePath } from "next/cache";
import { z } from "zod";

export async function generateSuggestedQuestions(documentId: string) {
  const documentSummary = await getContext(
    "Give me a summary of the document.",
    documentId,
  );

  const { object } = await generateObject({
    model: google("gemini-1.5-flash-latest"),
    schema: z.object({
      questions: z.array(z.string()).min(3).max(5),
    }),
    prompt: `You are an AI assistant that generates a list of 3-5 suggested questions based on the following document summary. The questions should be diverse and cover different aspects of the document: ${documentSummary}`,
  });

  revalidatePath(`/chat/${documentId}`, "page");

  return object;
}


================================================
File: apps/chat-with-pdf/app/actions/get-document-by-chat-id.ts
================================================
"use server";

import { unstable_cache } from "next/cache";
import { createSupabaseServer } from "@makefy/supabase/server";
import type { SupabaseClient } from "@makefy/supabase/types";

async function retrieveDocumentByChatId(
  supabase: SupabaseClient,
  chatId: string,
) {
  const { data: document, error: errorOnFetchingDocument } = await supabase
    .from("Document")
    .select("*")
    .eq("chatId", chatId)
    .single();

  if (errorOnFetchingDocument) {
    throw errorOnFetchingDocument;
  }

  return document;
}

export async function getDocumentByChatId(chatId: string) {
  const supabase = createSupabaseServer();
  const { data, error: errorOnFetchingSession } = await supabase.auth.getUser();

  if (errorOnFetchingSession) {
    throw errorOnFetchingSession;
  }

  const document = unstable_cache(
    (supabase: SupabaseClient) => retrieveDocumentByChatId(supabase, chatId),
    [data.user.id || "", chatId],
    {
      revalidate: 60 * 60,
      tags: ["document", data?.user?.id || "", chatId],
    },
  )(supabase);

  return document;
}


================================================
File: apps/chat-with-pdf/app/actions/login.ts
================================================
"use server";

import { createSupabaseServer } from "@makefy/supabase/server";
import { revalidatePath } from "next/cache";
import { redirect } from "next/navigation";

type LoginProps = {
  email: string;
  password: string;
};

export async function login(loginData: LoginProps) {
  const supabase = createSupabaseServer();

  const { error } = await supabase.auth.signInWithPassword(loginData);

  if (error) {
    throw error;
  }

  revalidatePath("/", "layout");
  redirect("/");
}


================================================
File: apps/chat-with-pdf/app/actions/sign-in-with-oauth.ts
================================================
"use server";

import { getOAuthRedirectUrl } from "@/lib/oauth-redirect-url";
import { createSupabaseServer } from "@makefy/supabase/server";
import { ReadonlyURLSearchParams, redirect } from "next/navigation";
import type { SignInWithOAuthCredentials } from "@makefy/supabase/types";
export async function signInWithOAuth(
  provider: SignInWithOAuthCredentials["provider"],
  searchParams: ReadonlyURLSearchParams,
) {
  const supabase = createSupabaseServer();
  const redirectTo = getOAuthRedirectUrl(searchParams);

  const { data, error } = await supabase.auth.signInWithOAuth({
    provider,
    options: {
      redirectTo,
    },
  });

  if (error) {
    throw error;
  }

  if (data.url) {
    redirect(data.url);
  }
}


================================================
File: apps/chat-with-pdf/app/actions/signup.ts
================================================
"use server";

import { createSupabaseServer } from "@makefy/supabase/server";
import { revalidatePath } from "next/cache";
import { redirect } from "next/navigation";

type SignUpProps = {
  email: string;
  password: string;
};

export async function signup(signUpData: SignUpProps) {
  const supabase = createSupabaseServer();

  const baseUrl = process.env.VERCEL_URL || "https://localhost:3000";
  const emailRedirectTo = `${baseUrl}/api/auth/callback`;

  const { error } = await supabase.auth.signUp({
    ...signUpData,
    options: {
      emailRedirectTo,
    },
  });

  if (error) {
    throw error;
  }

  revalidatePath("/", "layout");
  redirect("/");
}


================================================
File: apps/chat-with-pdf/app/actions/submit-feedback.ts
================================================
"use server";

import { createSupabaseServer } from "@makefy/supabase/server";
export async function submitFeedback({
  type,
  message,
}: {
  type: string;
  message: string;
}) {
  if (!type || !message) {
    throw new Error("Type and message are required");
  }

  const supabase = createSupabaseServer();

  const { data, error } = await supabase.from("Feedback").insert({
    type,
    message,
  });

  console.log(data, error);
}


================================================
File: apps/chat-with-pdf/app/actions/update-chat-messages.ts
================================================
"use server";

import { createSupabaseServer } from "@makefy/supabase/server";
import { Tables } from "@makefy/supabase/types";
import { revalidatePath } from "next/cache";

type UpdateChatMessagesParams = {
  documentId: string;
  messages?: Tables<"Chat">["messages"];
  documentMetadata?: Tables<"Chat">["documentMetadata"];
};

export async function updateChatMessages({
  documentId,
  messages,
  documentMetadata,
}: UpdateChatMessagesParams) {
  const supabase = createSupabaseServer();

  await supabase
    .from("Chat")
    .update({
      messages,
      documentMetadata,
    })
    .eq("id", documentId);

  revalidatePath(`/chat/${documentId}`, "page");
}


================================================
File: apps/chat-with-pdf/app/actions/upload-new-document.ts
================================================
"use server";

export async function uploadNewDocument(formData: FormData) {
  const formDataEntries = Array.from(formData.entries());

  for (const [key, value] of formDataEntries) {
    console.log({ key, value });
  }
}


================================================
File: apps/chat-with-pdf/app/api/auth/callback/route.ts
================================================
import { NextResponse } from "next/server";
// The client you created from the Server-Side Auth instructions
import { createSupabaseServer } from "@makefy/supabase/server";

export async function GET(request: Request) {
  const { searchParams, origin } = new URL(request.url);
  const code = searchParams.get("code");
  // if "next" is in param, use it as the redirect URL
  const next = searchParams.get("next") ?? "/";

  if (code) {
    const supabase = createSupabaseServer();
    const { error } = await supabase.auth.exchangeCodeForSession(code);

    if (!error) {
      const forwardedHost = request.headers.get("x-forwarded-host"); // original origin before load balancer
      const isLocalEnv = process.env.NODE_ENV === "development";
      if (isLocalEnv) {
        // we can be sure that there is no load balancer in between, so no need to watch for X-Forwarded-Host
        return NextResponse.redirect(`${origin}${next}`);
      } else if (forwardedHost) {
        return NextResponse.redirect(`https://${forwardedHost}${next}`);
      } else {
        return NextResponse.redirect(`${origin}${next}`);
      }
    }
  }

  // return the user to an error page with instructions
  return NextResponse.redirect(`${origin}/auth/auth-code-error`);
}


================================================
File: apps/chat-with-pdf/app/api/auth/confirm/route.ts
================================================
import type { EmailOtpType } from "@makefy/supabase/types";
import { type NextRequest } from "next/server";

import { redirect } from "next/navigation";
import { createSupabaseServer } from "@makefy/supabase/server";

export async function GET(request: NextRequest) {
  const { searchParams } = new URL(request.url);
  const token_hash = searchParams.get("token_hash");
  const type = searchParams.get("type") as EmailOtpType | null;
  const next = searchParams.get("next") ?? "/";

  if (token_hash && type) {
    const supabase = createSupabaseServer();

    const { error } = await supabase.auth.verifyOtp({
      type,
      token_hash,
    });
    if (!error) {
      // redirect user to specified redirect URL or root of app
      redirect(next);
    }
  }

  // redirect the user to an error page with some instructions
  redirect("/error");
}


================================================
File: apps/chat-with-pdf/app/api/auth/signup/route.tsx
================================================
import { VerifyEmailTemplate } from "@/components/email-templates/verify-email-template";
import { createSupabaseAdmin } from "@makefy/supabase/admin";
import { Resend } from "resend";

const resend = new Resend(process.env.RESEND_API_KEY);

export async function POST(request: Request) {
  // rate limit

  const data = await request.json();
  const supabase = createSupabaseAdmin();

  const res = await supabase.auth.admin.generateLink({
    type: "signup",
    email: data.email,
    password: data.password,
  });

  if (res.data.properties?.email_otp) {
    // resend email
    const resendRes = await resend.emails.send({
      from: `Makefy <onboarding@${process.env.RESEND_DOMAIN}>`,
      to: [data.email],
      subject: "Verify Email",
      react: (
        <VerifyEmailTemplate
          verificationCode={res.data.properties?.email_otp}
        />
      ),
    });
    return Response.json(resendRes);
  } else {
    return Response.json({ data: null, error: res.error });
  }
}


================================================
File: apps/chat-with-pdf/app/api/chat/route.ts
================================================
import { rateLimitRequests } from "@/lib/rate-limit-requests";
import { google } from "@ai-sdk/google";
import { Message, StreamData, convertToCoreMessages, streamText } from "ai";
import { Tables } from "@makefy/supabase/types";
import { getContext } from "utils/context";

export const revalidate = 0;
export const dynamic = "force-dynamic";
export const maxDuration = 30;

type RequestBody = {
  messages: Message[];
  documentId: Tables<"Chat">["id"];
  data: {
    [key: string]: any;
  };
};

export async function POST(req: Request) {
  // Protect the route with rate limiting
  const { success, headers } = await rateLimitRequests(req);

  if (!success) {
    return new Response("Rate limit exceeded", {
      status: 429,
      headers,
    });
  }

  const {
    messages = [],
    documentId,
    data: messageData = {},
  } = (await req.json()) as RequestBody;
  const lastMessage = messages.at(-1) as Message;

  const userMessage = parsedUserMessage(
    lastMessage,
    (lastMessage.data as Record<string, unknown>)?.quotedText as string,
  );

  const documentContext = lastMessage
    ? await getContext(userMessage, documentId)
    : { page1: "" };

  messages[messages.length - 1]!.content = userMessage;

  const systemInstructions = `AI assistant is a brand new, powerful, human-like artificial intelligence.
    The traits of AI include expert knowledge, helpfulness, cleverness, and articulateness.
    AI is a well-behaved and well-mannered individual.
    AI is always friendly, kind, and inspiring, and he is eager to provide vivid and thoughtful responses to the user.
    AI has the sum of all knowledge in their brain, and is able to accurately answer nearly any question about any topic in conversation.
    START DOCUMENT BLOCK
    ${documentContext}
    END OF DOCUMENT BLOCK
    AI assistant will take into account any DOCUMENT BLOCK that is provided in a conversation.
    When referencing information from the document, AI will use the following format:
    1. Apply underline styling to the AI's interpretation or paraphrase of the information using HTML <u> tags.
    2. Include two attributes in the <u> tag:
       - data-page: containing the page number where the information is found
       - data-based-text: containing the exact text from the DOCUMENT BLOCK that the AI used as a basis for its response
    3. The content inside the <u> tags can be the AI's own words, related to but not necessarily identical to the data-based-text.
    4. Immediately after the closing </u> tag, add the page reference as a superscript with the format <sup data-page="{page number}">{page number}</sup>.
    5. If information spans multiple pages or comes from different pages, use separate underline tags and superscript references for each.
    6. Always try to wrap entire paragraphs, sentences or meaningful phrases within the <u> tags.

    Example: "The document discusses language learning difficulty. <u data-page="3" data-based-text="English is widely considered one of the easiest languages to learn">It suggests that English is relatively simple for many learners to acquire</u><sup data-page="3">3</sup>. In contrast, <u data-page="5" data-based-text="Mandarin Chinese poses significant challenges for English speakers due to its tonal nature and complex writing system">Mandarin Chinese is described as particularly challenging for English speakers, largely due to its tonal aspects and intricate writing system</u><sup data-page="5">5</sup>."

    AI assistant must ensure that the data-based-text attribute contains the exact text extracted from the DOCUMENT BLOCK, while the content inside the <u> tags can be the AI's interpretation or paraphrase of that information.
    AI assistant can format the response using either Markdown or HTML, but should not mix the two formats within the same response. For example:
    Correct (HTML): "<p>This is a paragraph.</p><ul><li>List item</li></ul>"
    Correct (Markdown): "This is a paragraph.\n\n- List item"
    Incorrect (Mixed): "<p>This is a **bold** paragraph.</p>"
    If the document does not provide the answer to a question, AI will try to answer based on the document's context without inventing information.
    AI assistant will not invent anything that is not drawn directly from the document.`;

  const data = new StreamData();
  data.append(messageData);

  const result = streamText({
    model: google("gemini-1.5-flash-latest"),
    messages: convertToCoreMessages(messages),
    system: systemInstructions,
    maxTokens: 3000,
    onFinish({ text, toolCalls, toolResults, usage, finishReason, ...rest }) {
      console.log({
        onFinish: {
          text,
          toolCalls,
          toolResults,
          usage,
          finishReason,
          ...rest,
        },
      });
      data.close();
    },
    maxSteps: 5,
  });

  return result.toDataStreamResponse({ data, headers });
}

function parsedUserMessage(lastMessage: Message, quotedText: string) {
  if (!lastMessage) return "";

  if (quotedText) {
    return `Given this text extracted from the document: 
      "${quotedText}" 
    Answer this:
    ${lastMessage.content}`;
  }
  return lastMessage.content;
}


================================================
File: apps/chat-with-pdf/app/api/chat/new-chat/route.ts
================================================
import { deleteChat } from "@/app/actions/delete-chat";
import { INPUT_NAME } from "@/components/header/document-title/constants/input-names";
import { embedDocument, prepareDocument } from "@/lib/embed-document";
import { getLoadingMessages } from "@/lib/get-loading-messages";
import { getPdfData } from "@/lib/get-pdf-metadata";
import { rateLimitRequests } from "@/lib/rate-limit-requests";
import { createSupabaseServer } from "@makefy/supabase/server";
import { WebPDFLoader } from "@langchain/community/document_loaders/web/pdf";
import { PineconeRecord } from "@pinecone-database/pinecone";
import { revalidateTag } from "next/cache";
import { NextRequest, NextResponse } from "next/server";
import { Tables } from "@makefy/supabase/types";

export const revalidate = 0;
export const dynamic = "force-dynamic";
export const maxDuration = 30;

export async function POST(request: NextRequest) {
  // Protect the route with rate limiting
  const { success, headers } = await rateLimitRequests(request);

  if (!success) {
    return new Response("Rate limit exceeded", {
      status: 429,
      headers,
    });
  }

  let stream;

  try {
    const formData = await request.formData();

    const documentUrl = formData.get(INPUT_NAME.LINK) as string;
    const documentFile = formData.get(INPUT_NAME.FILE) as File;

    stream = new ReadableStream({
      async start(controller) {
        /* for await (const loadingMessages of createNewChatMocked({
          documentUrl,
          documentFile,
        })) {
          const messageArrayToString = JSON.stringify(loadingMessages);
          const encodedMessages = new TextEncoder().encode(messageArrayToString);
          controller.enqueue(encodedMessages);
        } */

        const loadingMessagesGenerator = createNewChat({
          documentUrl,
          documentFile,
        });
        async function retrieveLoadingMessages() {
          const { value: loadingMessages, done } =
            await loadingMessagesGenerator.next();

          const loadingMessagesToString = JSON.stringify(loadingMessages);
          const encodedLoadingMessages = new TextEncoder().encode(
            loadingMessagesToString,
          );
          controller.enqueue(encodedLoadingMessages);

          if (!done) return retrieveLoadingMessages();
        }
        await retrieveLoadingMessages();
        controller.close();
      },
    });
  } catch (error: any) {
    return new Response(JSON.stringify({ error: error?.message }), {
      status: 500,
    });
  }

  revalidateTag("chats");

  return new NextResponse(stream, {
    headers,
  });
}

async function* createNewChat({
  documentUrl,
  documentFile,
}: {
  documentUrl: string;
  documentFile?: File;
}) {
  const supabase = createSupabaseServer();
  // Fetching PDF data and creating a new chat in the database
  yield getLoadingMessages({
    isViaLink: !!documentUrl,
    chatId: null,
  });
  // TODO: How to remove this delay?
  // It doesn't work well without it, the data seems to arrive appended to the fronted
  await new Promise((resolve) => setTimeout(resolve, 1000));
  const pdfData = await getPdfData({ documentUrl, documentFile });
  // Insert the chat in the database
  const { data: chat, error: chatError } = await supabase
    .from("Chat")
    .insert({
      documentUrl,
      documentMetadata: pdfData?.metadata,
    })
    .select("id")
    .single();

  if (chatError) {
    console.error(chatError);
    return getLoadingMessages({
      isViaLink: !!documentUrl,
      chatId: null,
      errorMessage: chatError?.message || chatError,
    });
  }

  // Insert the document in the database
  const { data: document, error: documentError } = await supabase
    .from("Document")
    .insert({
      url: documentUrl,
      metadata: pdfData?.metadata,
      chatId: chat?.id,
    })
    .select("id")
    .single();

  if (documentError) {
    console.error(documentError);
    return getLoadingMessages({
      isViaLink: !!documentUrl,
      chatId: null,
      errorMessage: documentError?.message || documentError,
    });
  }

  if (!documentUrl) {
    const { data, error } = await supabase.storage
      .from("documents")
      .upload(`${chat.id}.pdf`, documentFile!);
    if (error) {
      console.error(error);
      await deleteChat(chat.id, false);
      return getLoadingMessages({
        isViaLink: !!documentUrl,
        chatId: chat.id,
        errorMessage: error?.message,
      });
    }

    documentUrl = getPdfUrlFromSupabaseStorage(data!);
    const { error: chatUpdateError } = await supabase
      .from("Chat")
      .update({
        documentUrl,
      })
      .eq("id", chat.id);

    if (chatUpdateError) {
      await deleteChat(chat.id, false);
      return getLoadingMessages({
        isViaLink: !!documentUrl,
        chatId: chat.id,
        errorMessage: chatUpdateError?.message || chatUpdateError,
      });
    }
  }

  // Load the PDF
  yield getLoadingMessages({
    isViaLink: !!documentUrl,
    chatId: chat.id,
  });
  // TODO: How to remove this delay?
  // It doesn't work well without it, the data seems to arrive appended to the fronted
  await new Promise((resolve) => setTimeout(resolve, 10));
  let pages;
  try {
    const loader = new WebPDFLoader(pdfData?.pdfBlob as Blob);
    pages = await loader.load();
    if (pages.length > 5) {
      await deleteChat(chat.id, false);
      return getLoadingMessages({
        isViaLink: !!documentUrl,
        chatId: chat.id,
        errorMessage: "The document is too large. Please upload a smaller one",
        friendlyError:
          "The document is too large. Please upload a smaller one. The maximum number of pages is 5",
      });
    }
  } catch (error: any) {
    console.error(error);
    await deleteChat(chat.id, false);
    return getLoadingMessages({
      isViaLink: !!documentUrl,
      chatId: chat.id,
      errorMessage: error?.message || error,
    });
  }

  // Split it into chunks
  // TODO: How to remove this delay?
  // It doesn't work well without it, the data seems to arrive appended to the fronted
  await new Promise((resolve) => setTimeout(resolve, 10));
  let documents;
  try {
    documents = await Promise.all(
      pages.map((page) => prepareDocument(page, chat.id)),
    );
  } catch (error: any) {
    console.error(error);
    await deleteChat(chat.id, false);
    return getLoadingMessages({
      isViaLink: !!documentUrl,
      chatId: chat.id,
      errorMessage: error?.message || error,
    });
  }

  // Vectorize the documents
  yield getLoadingMessages({
    isViaLink: !!documentUrl,
    chatId: chat.id,
  });
  // TODO: How to remove this delay?
  // It doesn't work well without it, the data seems to arrive appended to the fronted
  await new Promise((resolve) => setTimeout(resolve, 10));
  let vectors;
  try {
    vectors = (await Promise.all(
      documents.flat().map(embedDocument),
    )) as PineconeRecord[];
  } catch (error: any) {
    console.error(error);
    await deleteChat(chat.id, false);
    return getLoadingMessages({
      isViaLink: !!documentUrl,
      chatId: chat.id,
      errorMessage: error?.message || error,
    });
  }

  // Store the vectors in Pinecone
  yield getLoadingMessages({
    isViaLink: !!documentUrl,
    chatId: chat.id,
  });
  // TODO: How to remove this delay?
  // It doesn't work well without it, the data seems to arrive appended to the fronted
  await new Promise((resolve) => setTimeout(resolve, 10));

  const vectorsToInsert = vectors.map((vector) => ({
    chatId: chat.id,
    embedding: vector.values,
    text: vector.metadata?.text ? vector.metadata.text : null,
    textChunk: vector.metadata?.textChunk ? vector.metadata.textChunk : null,
    pageNumber: vector.metadata?.pageNumber ? vector.metadata.pageNumber : null,
    documentId: document.id,
  }));

  const { error: documentSectionsError } = await supabase
    .from("DocumentSections")
    .insert(vectorsToInsert as unknown as Tables<"DocumentSections">[]);
  if (documentSectionsError) {
    await deleteChat(chat.id, false);
    return getLoadingMessages({
      isViaLink: !!documentUrl,
      chatId: chat.id,
      errorMessage: documentSectionsError?.message || documentSectionsError,
    });
  }

  // Set as completed the last message
  yield getLoadingMessages({
    isViaLink: !!documentUrl,
    chatId: chat.id,
  });
  // TODO: How to remove this delay?
  // It doesn't work well without it, the data seems to arrive appended to the fronted
  await new Promise((resolve) => setTimeout(resolve, 0));
}

function getPdfUrlFromSupabaseStorage({ fullPath }: { fullPath: string }) {
  return `${process.env.SUPABASE_URL}/storage/v1/object/public/${fullPath}`;
}


================================================
File: apps/chat-with-pdf/app/api/pdf-helper/route.ts
================================================
import { NextRequest } from "next/server";

export async function GET(req: NextRequest) {
  const searchParams = req.nextUrl.searchParams;
  const url = searchParams.get("url");

  if (!url) {
    return new Response("Missing 'url' parameter", { status: 400 });
  }

  try {
    const response = await fetch(handleUrl(url));

    if (!response.ok) {
      return new Response("Failed to fetch PDF", { status: 500 });
    }

    if (response.headers.get("content-type")?.includes("application/pdf")) {
      const pdf = await response.arrayBuffer();
      return new Response(pdf, {
        headers: {
          "Content-Type": response.headers.get("content-type") as string,
        },
        status: 200,
      });
    }

    if (
      response.headers.get("content-type")?.includes("application/javascript")
    ) {
      const javascriptCode = await response.text();
      return new Response(javascriptCode, {
        headers: {
          "Content-Type": response.headers.get("content-type") as string,
        },
        status: 200,
      });
    }

    return new Response(JSON.stringify({ error: "Failed to parse response" }), {
      status: 500,
    });
  } catch (error: any) {
    return new Response(
      JSON.stringify({
        error: "Internal server error",
        message: error?.message,
      }),
      { status: 500 },
    );
  }
}

function handleUrl(url: string) {
  // add protocol if missing
  if (!url.startsWith("http")) {
    return `https://${url}`;
  }
  return url;
}


================================================
File: apps/chat-with-pdf/app/auth/callback/route.ts
================================================
import { createSupabaseServer } from "@makefy/supabase/server";
import { NextResponse } from "next/server";

export async function GET(request: Request) {
  const { searchParams, origin } = new URL(request.url);
  const code = searchParams.get("code");
  const next = searchParams.get("next") ?? "/";

  console.log({ code, next });

  if (code) {
    const supabase = createSupabaseServer();
    const { error } = await supabase.auth.exchangeCodeForSession(code);
    if (!error) {
      return NextResponse.redirect(`${origin}${next}`);
    }
  }

  // return the user to an error page with instructions
  return NextResponse.redirect(`${origin}/auth-failed`);
}


================================================
File: apps/chat-with-pdf/app/components/theme-provider.tsx
================================================
"use client";

import * as React from "react";
import { ThemeProvider as NextThemesProvider } from "next-themes";
import { type ThemeProviderProps } from "next-themes/dist/types";

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>;
}


================================================
File: apps/chat-with-pdf/app/components/chat/assistant-message.tsx
================================================
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@makefy/ui";
import { cn } from "@makefy/ui/lib/utils";
import { useGlobalChat } from "hooks/use-global-chat";
import Markdown, { ExtraProps } from "react-markdown";
import rehypeRaw from "rehype-raw";
import remarkGfm from "remark-gfm";
import { MESSAGE_TYPE } from "./constants/message-type";

export function AssistantMessage({
  children: message,
  type,
}: {
  children: string;
  type: string;
}) {
  const {
    useChatReturn: { append },
    globalContext: { setDocumentState },
  } = useGlobalChat();

  function submitQuestion(question: string) {
    append({ role: "user", content: question });
  }

  function handlePageNumberChange(event: React.MouseEvent<HTMLButtonElement>) {
    // find a element with a data-page attribute value
    const pageElement =
      event.currentTarget.closest("[data-page]") ||
      event.currentTarget.querySelector("[data-page]");
    const pageNumber = parseInt(pageElement?.getAttribute("data-page") ?? "1");

    if (pageNumber) setDocumentState({ currentPage: pageNumber });
  }

  return (
    <Markdown
      remarkPlugins={[remarkGfm]}
      rehypePlugins={[rehypeRaw]}
      className="px-4 py-3"
      components={{
        p: ({ children }) => <p className="text-sm">{children}</p>,
        a: ({ children, href }) => (
          <a href={href} className="text-blue-500 hover:underline">
            {children}
          </a>
        ),
        ul: ({ children }) => (
          <ul
            className={cn("list-outside py-1", {
              "list-disc pl-4": type !== MESSAGE_TYPE.SUGGESTION_MESSAGES,
              "flex flex-col gap-2 py-2":
                type === MESSAGE_TYPE.SUGGESTION_MESSAGES,
            })}
          >
            {children}
          </ul>
        ),
        ol: ({ children }) => (
          <ol
            className={cn("list-outside py-1", {
              "list-decimal pl-4": type !== MESSAGE_TYPE.SUGGESTION_MESSAGES,
              "flex flex-col gap-2 py-2":
                type === MESSAGE_TYPE.SUGGESTION_MESSAGES,
            })}
          >
            {children}
          </ol>
        ),
        li: ({ children }) => (
          <li
            className={cn({
              "pb-1 marker:font-semibold":
                type !== MESSAGE_TYPE.SUGGESTION_MESSAGES,
            })}
          >
            {type === MESSAGE_TYPE.SUGGESTION_MESSAGES ? (
              <button
                className={cn(
                  "z-10 box-border inline rounded-md border p-2 text-left transition-colors",
                  [
                    // Light mode
                    "bg-background hover:bg-gray-50",
                    // Dark mode
                    "dark:hover:border-boder dark:bg-gray-900 dark:hover:bg-gray-950",
                  ],
                )}
                onClick={() => submitQuestion(children?.toString() as string)}
              >
                {children}
              </button>
            ) : (
              children
            )}
          </li>
        ),
        sup: ({ children }: React.HTMLProps<HTMLElement>) => (
          <TooltipProvider delayDuration={0}>
            <Tooltip>
              <TooltipTrigger asChild>
                <sup className="bg-background dark:border-muted-foreground top-0 mx-[2px] rounded-sm border-2 px-[6px] py-[1px] dark:border">
                  {children}
                </sup>
              </TooltipTrigger>
              <TooltipContent>Based on the page {children}</TooltipContent>
            </Tooltip>
          </TooltipProvider>
        ),
        u: ({ children, ...props }: React.HTMLProps<HTMLElement>) => {
          const { node, ...attributes } = props as {
            node: ExtraProps["node"];
            [key: string]: any;
          };
          return (
            <button
              className="contents text-left"
              onClick={handlePageNumberChange}
            >
              <u {...attributes} className="decoration-dotted">
                {children}
              </u>
            </button>
          );
        },
      }}
    >
      {message}
    </Markdown>
  );
}


================================================
File: apps/chat-with-pdf/app/components/chat/chat-footer.tsx
================================================
"use client";

import {
  Alert,
  AlertDescription,
  AlertTitle,
  Button,
  Textarea,
} from "@makefy/ui";
import { cn } from "@makefy/ui/lib/utils";
import { Message } from "ai";
import { AnimatePresence, motion } from "framer-motion";
import { useGlobalChat } from "hooks/use-global-chat";
import { SendIcon, XIcon } from "lucide-react";
import { FormEvent, KeyboardEvent, useEffect, useRef, useState } from "react";
import { SuggestedQuestions } from "./chat-footer/suggested-questions";

const AnimatedSuggestedQuestions = motion(SuggestedQuestions);

export function ChatFooter() {
  const formRef = useRef<HTMLFormElement | null>(null);
  const textareaRef = useRef<HTMLTextAreaElement | null>(null);
  const [hasTextareaGrown, setHasTextareaGrown] = useState(false);

  const {
    globalContext: { extraData, chatData, setExtraData },
    useChatReturn: {
      input: inputValue,
      setInput,
      append,
      handleInputChange,
      isLoading,
    },
  } = useGlobalChat();

  useEffect(autoFocusTextarea, [extraData?.quotedText]);

  function extractTextareaLineHeight(textarea: HTMLTextAreaElement) {
    const computedStyle = window.getComputedStyle(textarea);
    const lineHeight = computedStyle.lineHeight;
    return parseFloat(lineHeight);
  }

  function resizeTextarea(event: React.ChangeEvent<HTMLTextAreaElement>) {
    const textarea = event.target;
    textarea.style.height = "auto";
    textarea.style.height = `${textarea.scrollHeight}px`;

    const textareaLineHeight = extractTextareaLineHeight(event.target);

    const hasGrown = textarea.scrollHeight > textareaLineHeight;

    if (!hasGrown && hasGrown !== hasTextareaGrown) {
      setHasTextareaGrown(hasGrown);
    }
  }

  function handleTextareaChange(event: React.ChangeEvent<HTMLTextAreaElement>) {
    resizeTextarea(event);
    handleInputChange(event);
  }

  function handleTextareaKeyDown(event: KeyboardEvent<HTMLTextAreaElement>) {
    if (event.key === "Enter" && !event.shiftKey) {
      event.preventDefault();
      handleOnSubmit(event);
    }
  }

  function removeQuotedText() {
    setExtraData({});
    setInput("");
  }

  function autoFocusTextarea() {
    if (textareaRef.current && Boolean(extraData?.quotedText)) {
      textareaRef.current.focus();
    }
  }

  function handleOnSubmit(
    event: FormEvent<HTMLFormElement> | KeyboardEvent<HTMLTextAreaElement>,
  ) {
    event.preventDefault();
    append({
      role: "user",
      content: inputValue,
      data: (extraData as Message["data"]) || {},
    });
    removeQuotedText();
  }

  return (
    <div className="border-border bg-background relative z-10 flex flex-col gap-2 border-t p-3">
      <AnimatePresence>
        {chatData.suggestedQuestions && (
          <AnimatedSuggestedQuestions questions={chatData.suggestedQuestions} />
        )}
      </AnimatePresence>
      <AnimatePresence>
        {(extraData?.quotedText as string) && (
          <motion.div
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: "auto" }}
            exit={{ opacity: 0, height: 0 }}
          >
            <Alert className="flex max-h-24 flex-row items-center justify-between gap-2">
              <div>
                <AlertTitle>
                  Quoted text from page {extraData?.page as string}
                </AlertTitle>
                <AlertDescription className="line-clamp-3">
                  {extraData?.quotedText as string}
                </AlertDescription>
              </div>
              <Button
                variant="ghost"
                size="icon"
                onClick={removeQuotedText}
                className="flex-shrink-0"
              >
                <XIcon className="h-4 w-4" />
                <span className="sr-only">Close</span>
              </Button>
            </Alert>
          </motion.div>
        )}
      </AnimatePresence>

      <form
        className="flex flex-col gap-2"
        onSubmit={handleOnSubmit}
        ref={formRef}
      >
        <div
          className={cn(
            "bg-secondary relative flex flex-row justify-between gap-1 rounded-md p-2 pl-4 pr-3",
            {
              "items-center": !hasTextareaGrown,
              "items-end": hasTextareaGrown,
            },
          )}
        >
          <Textarea
            className="max-h-24 min-h-2 flex-1 resize-none border-0 border-none p-[2px] shadow-none focus:[box-shadow:none] focus:[outline:none] focus-visible:[box-shadow:none] focus-visible:[outline:none]"
            placeholder={`Ask me anything about the document...`}
            rows={1}
            onChange={handleTextareaChange}
            onKeyDown={handleTextareaKeyDown}
            value={inputValue}
            ref={textareaRef}
          />
          <Button
            type="submit"
            variant="ghost"
            size="icon"
            disabled={!inputValue || isLoading}
          >
            <SendIcon className="h-4 w-4" />
            <span className="sr-only">Send</span>
          </Button>
        </div>
        <p className="text-muted-foreground text-center text-sm">
          AI Assistant can make mistakes. Please check important information.
        </p>
      </form>
    </div>
  );
}


================================================
File: apps/chat-with-pdf/app/components/chat/chat-list.tsx
================================================
import { Avatar, AvatarFallback, AvatarImage } from "@makefy/ui";
import { cn } from "@makefy/ui/lib/utils";
import { ChatBubbleIcon } from "@radix-ui/react-icons";
import Link from "next/link";
import { getChats } from "lib/supabase/queries/get-chats";

type ChatListProps = {
  documentId: string;
};

export async function ChatList({ documentId }: ChatListProps) {
  const chats = await getChats();

  return (
    <div className="hidden h-full border-r bg-gray-100/40 lg:block dark:bg-gray-800/40">
      <div className="flex flex-col gap-2">
        <div className="flex h-[60px] items-center px-6">
          <Link className="flex items-center gap-2 font-semibold" href="#">
            <ChatBubbleIcon className="h-6 w-6" />
            <span className="">Chats</span>
          </Link>
        </div>
        <div className="flex-1">
          <nav className="grid items-start px-4 text-sm font-medium">
            {chats.map(({ id: chatId }) => (
              <Link
                className={cn(
                  "flex items-center gap-3 rounded-lg  px-3 py-2 text-gray-900 transition-all hover:bg-gray-100 hover:text-gray-900 dark:bg-gray-800 dark:text-gray-50 dark:hover:text-gray-50",
                  {
                    "bg-gray-100": documentId === chatId,
                  },
                )}
                href={`/chat/${chatId}`}
                key={chatId}
              >
                <Avatar className="h-8 w-8">
                  <AvatarImage src="/placeholder-avatar.jpg" />
                  <AvatarFallback>JD</AvatarFallback>
                </Avatar>
                <div className="flex-1">
                  <h4 className="font-medium">John Doe</h4>
                  <p className="text-xs text-gray-500 dark:text-gray-400">
                    Online
                  </p>
                </div>
              </Link>
            ))}
          </nav>
        </div>
      </div>
    </div>
  );
}


================================================
File: apps/chat-with-pdf/app/components/chat/chat-messages.tsx
================================================
"use client";

import {
  Button,
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@makefy/ui";
import { cn } from "@makefy/ui/lib/utils";
import { AnimatePresence, inView, motion } from "framer-motion";
import { useGlobalChat } from "hooks/use-global-chat";
import { ArrowDown } from "lucide-react";
import { useEffect, useRef, useState } from "react";
import { MessageBubble } from "./message-bubble";

const AnimatedButton = motion(Button);

export function ChatMessages() {
  const chatContainerRef = useRef<HTMLDivElement | null>(null);
  const [showScrollBottom, setShowScrollBottom] = useState(false);
  const [messageTooltipOpenIndex, setMessageTooltipOpenIndex] = useState<
    number | null
  >(null);

  const {
    useChatReturn: { messages, isLoading },
  } = useGlobalChat();

  useEffect(onMessageChanges, [messages.length]);

  function toggleScrollBottomOnScroll() {
    setShowScrollBottom(false);
    return () => {
      setShowScrollBottom(true);
    };
  }

  // Controls the tooltip open state for each message, as it collides with the inner tooltip
  function updateMessageTooltipOpenIndex(index: number, isOpen?: boolean) {
    if (isOpen === undefined) return setMessageTooltipOpenIndex(index);
    setMessageTooltipOpenIndex(isOpen ? index : null);
  }

  function onMessageChanges() {
    scrollToBottom();
    inView("[data-message-bubble]:last-child", toggleScrollBottomOnScroll, {
      root: chatContainerRef.current as unknown as HTMLDivElement,
      amount: 0.5,
    });
  }

  function scrollToBottom() {
    chatContainerRef.current?.scrollTo({
      top: chatContainerRef.current.scrollHeight,
      behavior: "smooth",
    });
  }

  return (
    <div className="relative flex-1 overflow-hidden" id="chat-messages">
      <div
        className={cn("flex h-full overflow-auto p-4", {
          "overflow-hidden": messages?.length === 0,
        })}
        ref={chatContainerRef}
        data-chat-messages-container
      >
        <div className="flex h-fit w-full max-w-full flex-col gap-4">
          {messages.map((message, index) => {
            return (
              <MessageBubble
                key={message.id}
                message={message}
                index={index}
                onTooltipOpenChange={() => updateMessageTooltipOpenIndex(index)}
                tooltipOpen={index === messageTooltipOpenIndex}
              />
            );
          })}
          {isLoading && messages?.at(-1)?.role !== "assistant" && (
            <MessageBubble isTyping />
          )}
        </div>
      </div>
      <AnimatePresence>
        {showScrollBottom && (
          <TooltipProvider delayDuration={0}>
            <Tooltip>
              <TooltipTrigger asChild>
                <AnimatedButton
                  className="absolute bottom-4 right-8 -translate-x-2/4 opacity-0"
                  key={`arrow-button`}
                  initial={{
                    opacity: 0,
                    y: 100,
                  }}
                  animate={{
                    opacity: 1,
                    y: 0,
                  }}
                  exit={{
                    opacity: 0,
                    y: 100,
                  }}
                  size="icon"
                  variant="outline"
                  onClick={scrollToBottom}
                >
                  <ArrowDown className="h-4 w-4" />
                  <span className="sr-only">Scroll to bottom</span>
                </AnimatedButton>
              </TooltipTrigger>
              <TooltipContent>Scroll to bottom</TooltipContent>
            </Tooltip>
          </TooltipProvider>
        )}
      </AnimatePresence>
    </div>
  );
}


================================================
File: apps/chat-with-pdf/app/components/chat/chat-screen.tsx
================================================
import { Chat } from "@/components/chat/chat";
import { PdfViewer } from "@/components/pdf/pdf-viewer";
import {
  ResizableHandle,
  ResizablePanel,
  ResizablePanelGroup,
  Tabs,
  TabsList,
  TabsTrigger,
} from "@makefy/ui";
import { cn } from "@makefy/ui/lib/utils";
import { ChatLoading } from "./loading/chat.loading";
import { PDFLoading } from "./loading/pdf.loading";

type ChatScreenProps = {
  loading?: boolean;
};

export function ChatScreen({ loading }: ChatScreenProps) {
  return (
    <div
      className={cn("flex w-full flex-1 flex-col overflow-hidden", [
        /* Mobile styles: Hide document view on chat-view-toggle is active */
        "max-sm:[&:has(#chat-view-toggle[data-state=active])>div>#document-view]:hidden",
        /* Mobile styles: Hide chat view on document-view-toggle is active */
        "max-sm:[&:has(#chat-view-toggle[data-state=inactive])>div>#chat-view]:hidden",
      ])}
    >
      <div className="border-border flex items-center justify-center space-x-2 border-b-[1px] py-2 sm:hidden">
        <Tabs defaultChecked defaultValue="chat">
          <TabsList>
            <TabsTrigger value="chat" id="chat-view-toggle">
              Chat view
            </TabsTrigger>
            <TabsTrigger value="document" id="document-view-toggle">
              Document view
            </TabsTrigger>
          </TabsList>
        </Tabs>
      </div>
      <ResizablePanelGroup
        className="flex w-full flex-1 flex-row justify-between"
        direction="horizontal"
      >
        <ResizablePanel minSize={20} defaultSize={35} id="chat-view">
          {!loading && <Chat className="flex-1" />}
          {loading && <ChatLoading />}
        </ResizablePanel>
        <ResizableHandle />
        <ResizablePanel minSize={35} defaultSize={100} id="document-view">
          {!loading && <PdfViewer className="flex-1" />}
          {loading && <PDFLoading />}
        </ResizablePanel>
      </ResizablePanelGroup>
    </div>
  );
}


================================================
File: apps/chat-with-pdf/app/components/chat/chat-user-typing-animation.tsx
================================================
export function ChatUserTypingAnimation() {
  return (
    <div className="flex items-center justify-start space-x-1">
      <span className="sr-only">Loading...</span>
      <div className="h-2 w-2 animate-bounce rounded-full bg-gray-400 [animation-delay:-0.3s]"></div>
      <div className="h-2 w-2 animate-bounce rounded-full bg-gray-400 [animation-delay:-0.15s]"></div>
      <div className="h-2 w-2 animate-bounce rounded-full bg-gray-400"></div>
    </div>
  );
}


================================================
File: apps/chat-with-pdf/app/components/chat/chat.tsx
================================================
"use client";

import { cn } from "@makefy/ui/lib/utils";
import { ChatFooter } from "./chat-footer";
import { ChatHeader } from "./chat-header/chat-header";
import { ChatMessages } from "./chat-messages";

type ChatProps = {
  className?: string;
};

export function Chat({ className }: ChatProps) {
  return (
    <div className={cn("relative flex h-full flex-col", className)}>
      <ChatHeader />
      <ChatMessages />
      <ChatFooter />
    </div>
  );
}


================================================
File: apps/chat-with-pdf/app/components/chat/message-bubble.tsx
================================================
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@makefy/ui";
import { cn } from "@makefy/ui/lib/utils";
import { Message } from "ai";
import { useGlobalChat } from "hooks/use-global-chat";
import { AssistantMessage } from "./assistant-message";
import { MESSAGE_TYPE } from "./constants/message-type";
import { MessageQuickActions } from "./message-quick-actions";
import { UserMessage } from "./user-message";
import { useEffect } from "react";

type MessageBubbleProps =
  | {
      message: Message;
      index: number;
      onTooltipOpenChange: (index: number) => void;
      tooltipOpen: boolean;
      isTyping?: boolean;
    }
  | {
      isTyping: true;
      index?: never;
      onTooltipOpenChange?: never;
      tooltipOpen?: never;
      message?: never;
    };

export function MessageBubble({
  message,
  index,
  onTooltipOpenChange = () => null,
  tooltipOpen,
  isTyping,
}: MessageBubbleProps) {
  const {
    globalContext: { extraData, setExtraData },
    useChatReturn: { messages },
  } = useGlobalChat();

  useEffect(onScrollMessageId, [extraData?.messageScrollId]);

  function getMessageType(message: Message) {
    return (message?.data as Record<string, string>)
      ?.messageType as MESSAGE_TYPE;
  }

  function isAHiddenMessage() {
    if (!message) return null;

    const isUserMessage = message?.role === "user";

    const isAnIntroductionMessage =
      getMessageType(message) === MESSAGE_TYPE.INTRODUCTION;
    const isASuggestionMessage =
      getMessageType(message) === MESSAGE_TYPE.SUGGESTION_MESSAGES;

    return isUserMessage && (isAnIntroductionMessage || isASuggestionMessage);
  }

  function onScrollMessageId() {
    if (extraData?.messageScrollId) {
      setTimeout(() => {
        setExtraData({
          ...extraData,
          messageScrollId: undefined,
        });
      }, 4000);
    }
  }

  if (isAHiddenMessage()) return null;

  return (
    <div
      id={`message-${message?.id}`}
      className={cn("relative flex w-full overflow-hidden text-left", {
        "justify-end": message?.role === "user",
        "mt-auto": index === 0, // TODO: Fix this to start from the bottom
      })}
      data-message-bubble={isTyping ? undefined : true}
    >
      <div className="relative max-w-[70%] space-y-1.5">
        <TooltipProvider>
          <Tooltip
            delayDuration={0}
            onOpenChange={() => onTooltipOpenChange(!isTyping ? index : -1)}
            open={tooltipOpen}
          >
            <TooltipTrigger asChild>
              <div
                className={cn("w-fit rounded-md text-sm", {
                  "bg-secondary": message?.role === "assistant" || isTyping,
                  "bg-primary text-primary-foreground bg-opacity-20":
                    message?.role === "user",
                  "animate-shake":
                    extraData?.messageScrollId &&
                    extraData?.messageScrollId === message?.id,
                })}
              >
                {isTyping && (
                  <div className="flex h-11 items-center gap-2 px-4 py-3">
                    <div className="flex gap-1">
                      <span className="h-2 w-2 rounded-full bg-slate-700 motion-safe:animate-[bounce_1s_ease-in-out_infinite] dark:bg-slate-300"></span>
                      <span className="h-2 w-2 rounded-full bg-slate-700 motion-safe:animate-[bounce_0.5s_ease-in-out_infinite] dark:bg-slate-300"></span>
                      <span className="h-2 w-2 rounded-full bg-slate-700 motion-safe:animate-[bounce_1s_ease-in-out_infinite] dark:bg-slate-300"></span>
                    </div>
                  </div>
                )}
                {!isTyping && message?.role === "user" && (
                  <UserMessage message={message} />
                )}
                {!isTyping && message?.role === "assistant" && (
                  <>
                    <AssistantMessage
                      type={getMessageType(messages[index - 1]!)}
                    >
                      {message.content}
                    </AssistantMessage>
                    {index !== messages.length - 1 && (
                      <TooltipContent
                        align="start"
                        side="bottom"
                        className="bg-background z-[1] rounded-md border p-1 dark:border-2"
                        sideOffset={-10}
                        alignOffset={10}
                        avoidCollisions={false}
                      >
                        <MessageQuickActions
                          index={index}
                          onTooltipOpenChange={onTooltipOpenChange}
                          message={message}
                        />
                      </TooltipContent>
                    )}
                  </>
                )}
              </div>
            </TooltipTrigger>
          </Tooltip>
        </TooltipProvider>
        {index === messages.length - 1 && message?.role === "assistant" && (
          <MessageQuickActions
            className="ml-4"
            index={index}
            message={message}
            onTooltipOpenChange={onTooltipOpenChange}
          />
        )}
      </div>
    </div>
  );
}


================================================
File: apps/chat-with-pdf/app/components/chat/message-quick-actions.tsx
================================================
"use client";

import { updateChatMessages } from "@/app/actions/update-chat-messages";
import {
  ToggleGroup,
  ToggleGroupItem,
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
  useToast,
} from "@makefy/ui";
import { cn } from "@makefy/ui/lib/utils";
import { Message } from "ai";
import { AnimatePresence, CustomDomComponent, motion } from "framer-motion";
import { useGlobalChat } from "hooks/use-global-chat";
import {
  BookmarkIcon,
  CheckIcon,
  CopyIcon,
  FlagIcon,
  LucideProps,
  RefreshCcwIcon,
} from "lucide-react";
import { useParams } from "next/navigation";
import { forwardRef, RefAttributes, useState } from "react";
import { QUICK_ACTIONS } from "./constants/message-quick-actions";
import { MessageActions } from "./types/message-actions";
import { Tables } from "@makefy/supabase/types";

type MessageQuickActionsProps = {
  message: Message;
  index: number;
  className?: string;
  onTooltipOpenChange?: (index: number) => void;
};

const quickActions: MessageActions[] = [
  {
    Icon: CopyIcon,
    SucessIcon: CheckIcon,
    getLabel: () => "Copy message",
    value: QUICK_ACTIONS.COPY,
    onlyLastMessage: false,
  },
  {
    Icon: RefreshCcwIcon,
    getLabel: () => "Regenerate response",
    value: QUICK_ACTIONS.REGENERATE,
    onlyLastMessage: true,
  },
  {
    Icon: BookmarkIcon,
    active: {
      Icon: forwardRef((props, ref) => (
        <BookmarkIcon ref={ref} className="h-4 w-4 fill-current" />
      )),
      condition: (message: Message) => {
        const messageData = (message?.data as Record<string, any>) || {};
        return messageData?.bookmarked;
      },
    },
    getLabel: (message: Message) => {
      const messageData = (message?.data as Record<string, any>) || {};
      return messageData?.bookmarked
        ? "Unbookmark message"
        : "Bookmark message";
    },
    value: QUICK_ACTIONS.BOOKMARK,
    onlyLastMessage: false,
  },
  {
    Icon: FlagIcon,
    getLabel: () => "Report message (coming soon)",
    value: QUICK_ACTIONS.REPORT,
    onlyLastMessage: false,
  },
];

export function MessageQuickActions({
  message,
  index,
  className,
  onTooltipOpenChange = () => null,
}: MessageQuickActionsProps) {
  const params = useParams();
  const [showSuccessIcon, setShowSuccessIcon] = useState<
    Record<MessageActions["value"], boolean>
  >({});
  const {
    useChatReturn: { messages, reload },
  } = useGlobalChat();

  const { toast } = useToast();

  async function copyMessage(message: string) {
    let response: { success: boolean; error: unknown } = {
      success: false,
      error: null,
    };
    try {
      await navigator.clipboard.writeText(message);
      response.success = true;
    } catch (error) {
      response.error = error;
    }

    return response;
  }

  async function handleToggleGroupChange(
    action: QUICK_ACTIONS,
    message: Message,
  ) {
    if (action === QUICK_ACTIONS.COPY) {
      const { success } = await copyMessage(message.content);
      setShowSuccessIcon((prev) => ({ ...prev, [QUICK_ACTIONS.COPY]: true }));
      const toastNotifitcation = toast({
        title: success
          ? "Message copied successfully!"
          : "Failed to copy message",
        duration: Infinity,
      });
      setTimeout(() => {
        setShowSuccessIcon((prev) => ({
          ...prev,
          [QUICK_ACTIONS.COPY]: false,
        }));
        toastNotifitcation.dismiss();
      }, 3000);
    }
    if (action === QUICK_ACTIONS.REGENERATE) {
      reload();
      toast({
        title: "Regenerating response",
      });
    }
    if (action === QUICK_ACTIONS.BOOKMARK) {
      if (typeof messages[index] === "object") {
        const messageData =
          (messages[index]!.data as Record<string, any>) || {};
        messages[index]!.data = {
          ...messageData,
          bookmarked: !messageData?.bookmarked,
        };
        await updateChatMessages({
          documentId: params?.documentId as string,
          messages: messages as unknown as Tables<"Chat">["messages"],
        });
        toast({
          title: messageData?.bookmarked
            ? "Message unbookmarked"
            : "Message bookmarked",
          duration: 3000,
        });
      }
    }
  }

  function handleTooltipOpenChange() {
    onTooltipOpenChange(index);
  }

  return (
    <ToggleGroup
      type="single"
      size="xs"
      className={cn("z-10 justify-start", className)}
      onClick={(e) => e.stopPropagation()}
      onValueChange={(action: QUICK_ACTIONS) =>
        handleToggleGroupChange(action, message)
      }
    >
      <TooltipProvider delayDuration={0}>
        {quickActions.map(
          (
            { Icon, SucessIcon, active, getLabel, value, onlyLastMessage },
            quickActionIndex,
          ) => {
            const AnimatedIcon = motion(Icon);
            const AnimatedSucessIcon = (
              SucessIcon ? motion(SucessIcon) : SucessIcon
            ) as CustomDomComponent<LucideProps & RefAttributes<SVGSVGElement>>;
            const ActiveIcon = active?.Icon;
            if (onlyLastMessage && index !== messages.length - 1) {
              return null;
            }
            return (
              <Tooltip
                delayDuration={0}
                onOpenChange={handleTooltipOpenChange}
                key={`message-quick-action-${message.id}${quickActionIndex}`}
              >
                <TooltipTrigger asChild>
                  <ToggleGroupItem
                    value={value}
                    className="hover:text-secondary-foreground text-secondary-foreground group flex aspect-square h-[30px] w-[30px] items-center justify-center data-[state=on]:bg-transparent"
                  >
                    <AnimatePresence mode="wait">
                      {ActiveIcon && active.condition(message) && (
                        <ActiveIcon className="h-4 w-4" stroke="currentColor" />
                      )}
                      {!active?.condition?.(message) &&
                        !showSuccessIcon[value] && (
                          <AnimatedIcon
                            className="h-4 w-4 text-opacity-70"
                            stroke="currentColor"
                            key={`message-quick-action-icon-${message.id}${quickActionIndex}`}
                            animate={{ opacity: 1, scale: 1 }}
                            exit={{ opacity: 0, scale: 0 }}
                            transition={{ duration: 0.3 }}
                          />
                        )}
                      {!active?.condition?.(message) &&
                        showSuccessIcon[value] &&
                        SucessIcon && (
                          <AnimatedSucessIcon
                            className="h-4 w-4"
                            stroke="currentColor"
                            key={`message-quick-action-sucess-icon-${message.id}${quickActionIndex}`}
                            initial={{ opacity: 0, scale: 0 }}
                            animate={{ opacity: 1, scale: 1 }}
                            exit={{ opacity: 0, scale: 0 }}
                          />
                        )}
                    </AnimatePresence>
                    <span className="sr-only">{getLabel(message)}</span>
                  </ToggleGroupItem>
                </TooltipTrigger>
                <TooltipContent
                  align="center"
                  side="top"
                  className="rounded-md text-xs"
                  arrowPadding={2}
                  sideOffset={6}
                >
                  {getLabel(message)}
                </TooltipContent>
              </Tooltip>
            );
          },
        )}
      </TooltipProvider>
    </ToggleGroup>
  );
}


================================================
File: apps/chat-with-pdf/app/components/chat/user-message.tsx
================================================
import { Alert, AlertDescription, AlertTitle } from "@makefy/ui";
import { cn } from "@makefy/ui/lib/utils";
import { Message } from "ai";

type UserMessageProps = {
  className?: string;
  message: Message;
};

export function UserMessage({ className, message }: UserMessageProps) {
  const messageData = message.data as Record<string, unknown>;

  return (
    <div
      className={cn("flex flex-col", className, {
        "px-1 py-1": messageData?.quotedText,
      })}
    >
      {(messageData?.quotedText as string) && (
        <Alert className="flex max-h-24 flex-col justify-between gap-2 rounded-md border-none bg-[#1f50bb] text-[#cdcdcd]">
          <AlertTitle>
            Quoted text from page {messageData?.page as string}
          </AlertTitle>
          <AlertDescription
            className="line-clamp-2 text-ellipsis"
            title={messageData?.quotedText as string}
          >
            {messageData?.quotedText as string}
          </AlertDescription>
        </Alert>
      )}
      <p
        className={cn({
          "px-3 py-2": messageData?.quotedText,
          "px-4 py-3": !messageData?.quotedText,
        })}
      >
        {message.content}
      </p>
    </div>
  );
}


================================================
File: apps/chat-with-pdf/app/components/chat/chat-footer/suggested-questions.tsx
================================================
"use client";

import { Button } from "@makefy/ui";
import { cn } from "@makefy/ui/lib/utils";
import { motion } from "framer-motion";
import { useGlobalChat } from "hooks/use-global-chat";
import {
  ChevronDownIcon,
  ChevronUpIcon,
  MessageSquareIcon,
  SparkleIcon,
  SparklesIcon,
} from "lucide-react";
import { forwardRef, useRef, useState } from "react";

const AnimatedButton = motion(Button);

export const SuggestedQuestions = forwardRef<
  HTMLDivElement,
  { questions: string[] }
>(({ questions }, ref) => {
  const questionsContainerRef = useRef<HTMLDivElement | null>(null);
  const [isSuggestedQuestionsOpen, setIsSuggestedQuestionsOpen] =
    useState(false);
  const [questionsContainer, setQuestionsContainer] = useState({
    onOpen: 0,
    onClose: 0,
  });

  const {
    useChatReturn: { append },
  } = useGlobalChat();

  function toggleHelpfulQuestions() {
    setIsSuggestedQuestionsOpen(!isSuggestedQuestionsOpen);
  }

  function getQuestionsContainerHeight() {
    const height = questionsContainerRef.current?.scrollHeight;
    const state = isSuggestedQuestionsOpen ? "onOpen" : "onClose";
    setQuestionsContainer((prev) => ({
      ...prev,
      [state]: height || 0,
    }));
  }

  function submitQuestion(question: string) {
    append({
      role: "user",
      content: question,
    });
  }

  return (
    <motion.div
      className="flex max-w-full flex-col gap-2"
      initial={{ maxHeight: 52 }}
      animate={{
        maxHeight: isSuggestedQuestionsOpen ? 200 : questionsContainer.onClose,
        height: isSuggestedQuestionsOpen
          ? questionsContainer.onOpen || 200
          : questionsContainer.onClose,
        overflow: isSuggestedQuestionsOpen ? "hidden" : "auto",
      }}
      exit={{ height: questionsContainer.onClose || "auto" }}
      onAnimationComplete={getQuestionsContainerHeight}
      transition={{ duration: 0.3, delay: isSuggestedQuestionsOpen ? 0.3 : 0 }}
      ref={(el) => {
        if (typeof ref === "function") ref(el);
        else if (ref) ref.current = el;
        questionsContainerRef.current = el;
      }}
    >
      <button
        className="absolute left-1/2 top-2 z-10 mx-auto flex h-1.5 w-[100px] flex-shrink-0 -translate-x-1/2 justify-center rounded-full"
        onClick={toggleHelpfulQuestions}
      >
        {!isSuggestedQuestionsOpen && (
          <ChevronUpIcon className="text-muted-foreground -mt-1 h-4 w-4 flex-shrink-0" />
        )}
        {isSuggestedQuestionsOpen && (
          <ChevronDownIcon className="text-muted-foreground -mt-1 h-4 w-4 flex-shrink-0" />
        )}
      </button>
      <span className="text-muted-foreground inline-flex flex-row items-center gap-2 text-sm">
        Suggested questions <SparklesIcon className="h-3 w-3" />
      </span>
      <div
        className={cn("flex flex-row items-center gap-2", {
          "overflow-hidden": isSuggestedQuestionsOpen,
        })}
      >
        <motion.div
          className={cn("flex", {
            "space-x-2 overflow-x-auto pb-3": !isSuggestedQuestionsOpen,
            "max-h-full w-full overflow-auto": isSuggestedQuestionsOpen,
          })}
          initial={{ opacity: 0 }}
          animate={{
            opacity: 1,
            flexDirection: isSuggestedQuestionsOpen ? "column" : "row",
            gap: isSuggestedQuestionsOpen ? "8px" : "0px",
          }}
          exit={{ opacity: 0 }}
          transition={{
            duration: 0.3,
            delay: !isSuggestedQuestionsOpen ? 0.3 : 0,
          }}
        >
          {questions.map((question) => (
            <AnimatedButton
              variant="outline"
              size="sm"
              transition={{
                duration: 0.3,
                delay: !isSuggestedQuestionsOpen ? 0.3 : 0,
              }}
              className={cn(
                "relative flex items-start justify-start gap-2 p-2 text-left",
                { "h-auto": isSuggestedQuestionsOpen },
              )}
              onClick={() => submitQuestion(question)}
            >
              <span className="relative mt-1 shrink-0">
                <SparkleIcon className="absolute -top-1 left-1 h-3 w-3" />
                <MessageSquareIcon className="h-3 w-3" />
              </span>
              <motion.span
                className="max-w-full overflow-hidden text-ellipsis"
                animate={{
                  whiteSpace: isSuggestedQuestionsOpen ? "pre-wrap" : "nowrap",
                }}
                transition={{
                  duration: 0.3,
                  delay: !isSuggestedQuestionsOpen ? 0.3 : 0,
                }}
              >
                {question}
              </motion.span>
            </AnimatedButton>
          ))}
        </motion.div>
      </div>
    </motion.div>
  );
});


================================================
File: apps/chat-with-pdf/app/components/chat/chat-header/chat-header.tsx
================================================
"use client";

import {
  Button,
  Card,
  CardContent,
  Popover,
  PopoverContent,
  PopoverTrigger,
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@makefy/ui";
import { BookmarkIcon, DownloadIcon } from "lucide-react";
import Link from "next/link";
import { useParams } from "next/navigation";
import { ChatPDF } from "./chat-pdf";
import { useGlobalChat } from "hooks/use-global-chat";
import dynamic from "next/dynamic";
import { Message } from "ai";
import { useState } from "react";
import { SadFaceIcon } from "icons/sad-face";

// Dynamically import BlobProvider from react-pdf/renderer to avoid SSR issues
const BlobProvider = dynamic(
  () => import("@react-pdf/renderer").then((mod) => mod.BlobProvider),
  {
    ssr: false,
  },
);

export function ChatHeader() {
  const params = useParams();
  const [isPopoverOpen, setIsPopoverOpen] = useState(false);

  const {
    globalContext: { setExtraData },
    useChatReturn: { messages },
  } = useGlobalChat();

  const bookmarkedMessages = messages.filter(
    (message) => (message.data as Record<string, any>)?.bookmarked === true,
  );

  function handleOnBookmarkedMessageClick(message: Message) {
    // Scroll to the message
    const messageElement = document.getElementById(`message-${message.id}`);
    if (messageElement) {
      messageElement.scrollIntoView({ behavior: "smooth", block: "center" });
      setIsPopoverOpen(false);
      setExtraData({
        messageScrollId: message.id,
      });
    }
  }

  return (
    <header className="border-border bg-background z-[2] flex items-center p-2">
      <TooltipProvider delayDuration={0}>
        <div className="ml-auto flex h-9 items-center gap-2">
          <BlobProvider
            document={
              <ChatPDF
                documentId={params.documentId as string}
                messages={messages}
              />
            }
          >
            {({ url }) => {
              // Do whatever you need with blob here
              return url ? (
                <Tooltip>
                  <TooltipTrigger asChild>
                    <Button
                      className="flex gap-2"
                      variant="ghost"
                      size="default"
                      asChild
                    >
                      <Link
                        href={url as string}
                        download={`chat conversation - ${params.documentId}.pdf`}
                        target="_blank"
                      >
                        <DownloadIcon className="h-4 w-4" />
                        <span>Download chat</span>
                      </Link>
                    </Button>
                  </TooltipTrigger>
                  <TooltipContent side="bottom">
                    Download chat as PDF
                  </TooltipContent>
                </Tooltip>
              ) : null;
            }}
          </BlobProvider>

          <Tooltip>
            <Popover open={isPopoverOpen} onOpenChange={setIsPopoverOpen}>
              <PopoverTrigger asChild>
                <TooltipTrigger asChild>
                  <Button className="flex gap-2" variant="ghost" size="icon">
                    <BookmarkIcon className="h-4 w-4" />
                  </Button>
                </TooltipTrigger>
              </PopoverTrigger>
              <TooltipContent side="bottom">Bookmarked messages</TooltipContent>
              <PopoverContent asChild align="end" className="p-0">
                <div className="relative flex max-h-96 flex-col gap-2 overflow-auto rounded-md border px-4 pb-4">
                  {bookmarkedMessages.length > 0 && (
                    <div className="sticky top-0 z-10 bg-inherit pt-4">
                      <p className="text-sm">
                        Bookmarked messages ({bookmarkedMessages.length})
                      </p>
                      <span className="text-muted-foreground text-sm">
                        Click on a message to scroll to it
                      </span>
                    </div>
                  )}
                  {bookmarkedMessages.map((message) => {
                    return (
                      <Card
                        key={message.id}
                        className="max-h-20 max-w-full cursor-pointer p-2 text-xs"
                        onClick={() => handleOnBookmarkedMessageClick(message)}
                      >
                        <CardContent className="line-clamp-3 p-0">
                          {message.content}
                        </CardContent>
                      </Card>
                    );
                  })}
                  {bookmarkedMessages.length === 0 && (
                    <div className="flex w-full flex-col items-center justify-center gap-4 pt-4">
                      <SadFaceIcon className="fill-muted-foreground h-8 w-8" />
                      <span className="text-muted-foreground w-3/4 text-center text-xs">
                        No bookmarked messages yet. Click on the bookmark icon
                        to bookmark a message.
                      </span>
                    </div>
                  )}
                </div>
              </PopoverContent>
            </Popover>
          </Tooltip>
        </div>
      </TooltipProvider>
    </header>
  );
}


================================================
File: apps/chat-with-pdf/app/components/chat/chat-header/chat-pdf.tsx
================================================
import { Document, Page, Text, View } from "@react-pdf/renderer";
import { Message } from "ai";

type ChatPDFProps = {
  documentId: string;
  messages: Message[];
};

export function ChatPDF({ documentId, messages }: ChatPDFProps) {
  return (
    <Document>
      <Page
        style={{
          paddingTop: 35,
          paddingBottom: 65,
          paddingHorizontal: 35,
        }}
      >
        <Text
          style={{
            fontSize: 12,
            marginBottom: 20,
            textAlign: "center",
            color: "grey",
          }}
          fixed
        >
          ~ Makefy - Chat with PDF ~
        </Text>
        <Text
          style={{
            fontSize: 16,
            textAlign: "center",
          }}
        >
          Chat conversation
        </Text>
        <Text
          style={{
            fontSize: 12,
            textAlign: "center",
            marginBottom: 40,
          }}
        >
          Document id: {documentId}
        </Text>
        {messages
          .filter(
            (message) => !(message.data as Record<string, any>)?.messageType,
          )
          .map((message, index) => {
            return (
              <View key={index}>
                <Text
                  key={`message-${message.id}${message.role}`}
                  style={{
                    fontWeight: "bold",
                    textTransform: "capitalize",
                    fontSize: 12,
                    margin: 6,
                  }}
                >
                  {message.role}
                </Text>
                <Text
                  key={`message-${message.id}`}
                  style={{
                    fontSize: 12,
                    margin: 6,
                    color: "gray",
                  }}
                >
                  {message.content}
                </Text>
              </View>
            );
          })}
        <Text
          style={{
            position: "absolute",
            fontSize: 12,
            bottom: 30,
            left: 0,
            right: 0,
            textAlign: "center",
            color: "grey",
          }}
          render={({ pageNumber, totalPages }) =>
            `${pageNumber} / ${totalPages}`
          }
          fixed
        />
      </Page>
    </Document>
  );
}


================================================
File: apps/chat-with-pdf/app/components/chat/constants/message-quick-actions.ts
================================================
export const enum QUICK_ACTIONS {
  COPY = "copy",
  REGENERATE = "regenerate",
  BOOKMARK = "bookmark",
  REPORT = "report",
}


================================================
File: apps/chat-with-pdf/app/components/chat/constants/message-type.ts
================================================
export const enum MESSAGE_TYPE {
  INTRODUCTION = "INTRODUCTION",
  SUGGESTION_MESSAGES = "SUGGESTION_MESSAGES",
}


================================================
File: apps/chat-with-pdf/app/components/chat/loading/chat.loading.tsx
================================================
import { Skeleton } from "@makefy/ui";
import { cn } from "@makefy/ui/lib/utils";

export function ChatLoading() {
  const fakeMessagesLoading = Array.from({ length: 6 }, () => null);

  return (
    <div className="relative flex h-full flex-col">
      <div className="border-border flex h-[51px] items-center border-b-[1px] p-2" />
      <div className="relative flex-1 overflow-hidden" id="chat-messages">
        <div
          className="flex h-full overflow-hidden p-4"
          data-chat-messages-container
        >
          <div className="flex w-full flex-col gap-4">
            {fakeMessagesLoading.map((_, index) => (
              <div
                key={index}
                className={cn("flex w-full", {
                  "justify-end": index % 2 === 0,
                })}
              >
                {index % 2 !== 0 && (
                  <Skeleton
                    className={cn("w-[70%]", {
                      "h-20": index === 1,
                      "h-48": index === 3,
                      "h-72": index === 5,
                    })}
                  />
                )}
                {index % 2 === 0 && (
                  <Skeleton
                    className={cn("w-[70%]", {
                      "h-20": index === 0 || index === 2,
                      "h-10": index === 4,
                    })}
                  />
                )}
              </div>
            ))}
          </div>
        </div>
      </div>
      <div className="border-border z-10 flex h-20 flex-col gap-2 border-t-[1px] p-3" />
    </div>
  );
}


================================================
File: apps/chat-with-pdf/app/components/chat/loading/pdf.loading.tsx
================================================
import { Skeleton } from "@makefy/ui";

export function PDFLoading() {
  return (
    <div className="relative flex h-full flex-col">
      <div className="border-border flex h-[53px] items-center border-b-[1px] p-2" />
      <div className="flex h-full w-full p-4">
        <Skeleton className="h-full w-full flex-1 " />
      </div>
    </div>
  );
}


================================================
File: apps/chat-with-pdf/app/components/chat/types/message-actions.ts
================================================
import { Message } from "ai";
import { LucideProps } from "lucide-react";
import { ForwardRefExoticComponent, RefAttributes } from "react";

export type MessageActions = {
  Icon: ForwardRefExoticComponent<LucideProps & RefAttributes<SVGSVGElement>>;
  SucessIcon?: ForwardRefExoticComponent<
    LucideProps & RefAttributes<SVGSVGElement>
  >;
  active?: {
    Icon: ForwardRefExoticComponent<LucideProps & RefAttributes<SVGSVGElement>>;
    condition: (message: Message) => boolean;
  };
  getLabel: (message: Message) => string;
  value: string;
  onlyLastMessage?: boolean;
};


================================================
File: apps/chat-with-pdf/app/components/email-templates/verify-email-template.tsx
================================================
import {
  Body,
  Container,
  Head,
  Heading,
  Hr,
  Html,
  Img,
  Link,
  Preview,
  Section,
  Text,
} from "@react-email/components";
import * as React from "react";

interface VerifyEmailTemplateProps {
  verificationCode?: string;
}

export function VerifyEmailTemplate({
  verificationCode,
}: VerifyEmailTemplateProps) {
  return (
    <Html>
      <Head />
      <Preview>Supauth Email Verification</Preview>
      <Body style={main}>
        <Container style={container}>
          <Section style={coverSection}>
            <Section style={imageSection}></Section>
            <Section style={upperSection}>
              <Heading style={h1}>SupaAuth Verify your email address</Heading>
              <Text style={mainText}>
                {
                  "Thanks for starting the new account creation process. We want to make sure it's really you. Please enter the following verification code when prompted. If you don&apos;t want to create an account, you can ignore this message."
                }
              </Text>
              <Section style={verificationSection}>
                <Text style={verifyText}>Verification code</Text>

                <Text style={codeText}>{verificationCode}</Text>
                <Text style={validityText}>
                  (This code is valid for 1 hour)
                </Text>
              </Section>
            </Section>
          </Section>
        </Container>
      </Body>
    </Html>
  );
}

const main = {
  backgroundColor: "#fff",
  color: "#212121",
};

const container = {
  padding: "20px",
  margin: "0 auto",
  backgroundColor: "#eee",
};

const h1 = {
  color: "#333",
  fontFamily:
    "-apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif",
  fontSize: "20px",
  fontWeight: "bold",
  marginBottom: "15px",
};

const link = {
  color: "#2754C5",
  fontFamily:
    "-apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif",
  fontSize: "14px",
  textDecoration: "underline",
};

const text = {
  color: "#333",
  fontFamily:
    "-apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif",
  fontSize: "14px",
  margin: "24px 0",
};

const imageSection = {
  backgroundColor: "#252f3d",
  display: "flex",
  padding: "20px 0",
  alignItems: "center",
  justifyContent: "center",
};

const coverSection = { backgroundColor: "#fff" };

const upperSection = { padding: "25px 35px" };

const lowerSection = { padding: "25px 35px" };

const footerText = {
  ...text,
  fontSize: "12px",
  padding: "0 20px",
};

const verifyText = {
  ...text,
  margin: 0,
  fontWeight: "bold",
  textAlign: "center" as const,
};

const codeText = {
  ...text,
  fontWeight: "bold",
  fontSize: "36px",
  margin: "10px 0",
  textAlign: "center" as const,
};

const validityText = {
  ...text,
  margin: "0px",
  textAlign: "center" as const,
};

const verificationSection = {
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
};

const mainText = { ...text, marginBottom: "14px" };


================================================
File: apps/chat-with-pdf/app/components/header/feedback-dialog.tsx
================================================
"use client";

import { submitFeedback } from "@/app/actions/submit-feedback";
import { zodResolver } from "@hookform/resolvers/zod";
import {
  Button,
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
  Textarea,
  useToast,
} from "@makefy/ui";
import { Loader2Icon } from "lucide-react";
import { useState } from "react";
import { useForm } from "react-hook-form";
import { z } from "zod";

const FeedbackSchema = z.object({
  type: z.union([
    z.literal("Improvement", {
      message: "Please select the type of feedback.",
    }),
    z.literal("Bug or error", {
      message: "Please select the type of feedback.",
    }),
    z.literal("General feedback", {
      message: "Please select the type of feedback.",
    }),
  ]),
  message: z
    .string({
      message: "Please provide a message.",
    })
    .min(20, {
      message: "Please provide a message with at least 20 characters.",
    })
    .max(500),
});

type FeedbackDialogProps = {
  triggerEl: React.ReactNode;
};

export function FeedbackDialog({ triggerEl }: FeedbackDialogProps) {
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const feedbackForm = useForm<z.infer<typeof FeedbackSchema>>({
    resolver: zodResolver(FeedbackSchema),
    mode: "onBlur",
    defaultValues: {
      type: "Improvement",
    },
  });
  const { toast } = useToast();

  // TODO: Abstract this function to a utility function
  function resizeTextarea(event: React.ChangeEvent<HTMLTextAreaElement>) {
    const textarea = event.target;
    textarea.style.height = "auto";
    textarea.style.height = `${textarea.scrollHeight}px`;
  }

  function handleOnOpenChange(isOpen: boolean) {
    setIsDialogOpen(isOpen);
    feedbackForm.reset();
    feedbackForm.clearErrors();
  }

  async function sendFeedback(values: z.infer<typeof FeedbackSchema>) {
    try {
      await submitFeedback(values);
      toast({
        title: "Feedback sent successfully!",
        description: "Thank you for sharing your thoughts with us.",
        duration: 5000,
      });
      feedbackForm.reset();
      feedbackForm.clearErrors();
      setIsDialogOpen(false);
    } catch (error) {
      toast({
        title: "Failed to send feedback",
        description:
          "An error occurred while sending your feedback. Please try again later.",
        duration: 5000,
      });
    }
  }

  return (
    <Dialog open={isDialogOpen} onOpenChange={handleOnOpenChange}>
      <DialogTrigger asChild>{triggerEl}</DialogTrigger>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Send us your feedback</DialogTitle>
          <DialogDescription>
            We'd love to hear from you! Please share your thoughts with us and
            help us improve.
          </DialogDescription>
        </DialogHeader>
        <div>
          <Form {...feedbackForm}>
            <form onSubmit={feedbackForm.handleSubmit(sendFeedback)}>
              <FormField
                control={feedbackForm.control}
                name="type"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Type *</FormLabel>
                    <Select
                      onValueChange={field.onChange}
                      defaultValue={field.value}
                    >
                      <FormControl>
                        <SelectTrigger onBlur={field.onBlur}>
                          <SelectValue placeholder="Select the type of feedback" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="Improvement">
                          Suggest an improvement
                        </SelectItem>
                        <SelectItem value="Bug or error">
                          Report a bug or error
                        </SelectItem>
                        <SelectItem value="General feedback">
                          General feedback
                        </SelectItem>
                      </SelectContent>
                    </Select>
                    <FormDescription>
                      Please select the type of feedback you'd like to share. Is
                      it a suggestion for improvement, a bug or error report, or
                      general feedback?
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={feedbackForm.control}
                name="message"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Message *</FormLabel>
                    <FormControl>
                      <Textarea
                        {...field}
                        className="max-h-28"
                        onChange={(event) => {
                          resizeTextarea(event);
                          field.onChange(event);
                        }}
                        maxLength={500}
                      />
                    </FormControl>
                    <FormDescription>
                      Feel free to share your thoughts with us.
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <DialogFooter>
                <Button
                  variant="outline"
                  onClick={() => handleOnOpenChange(false)}
                >
                  Cancel
                </Button>
                <Button
                  type="submit"
                  disabled={
                    !feedbackForm.formState.isValid ||
                    feedbackForm.formState.isSubmitting
                  }
                  className="flex flex-row gap-2"
                >
                  {feedbackForm.formState.isSubmitting && (
                    <Loader2Icon className="h-4 w-4 animate-spin" />
                  )}
                  Send
                </Button>
              </DialogFooter>
            </form>
          </Form>
        </div>
      </DialogContent>
    </Dialog>
  );
}


================================================
File: apps/chat-with-pdf/app/components/header/header.tsx
================================================
import {
  CommandShortcut,
  SidebarTrigger,
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@makefy/ui";
import { DocumentTitle } from "./document-title/document-title";

export async function Header() {
  return (
    <header className="relative border-b">
      <div className="flex h-14 flex-row items-center justify-between gap-4 overflow-hidden pl-2 pr-4 max-sm:gap-4">
        <TooltipProvider delayDuration={0}>
          <Tooltip>
            <TooltipTrigger asChild>
              <SidebarTrigger />
            </TooltipTrigger>
            <TooltipContent side="right">
              Toogle sidebar <CommandShortcut>⌘B</CommandShortcut>
            </TooltipContent>
          </Tooltip>
        </TooltipProvider>
        <div className="flex h-full flex-1 justify-center overflow-hidden">
          <DocumentTitle />
        </div>
        <div className="flex flex-row items-center gap-2 max-sm:hidden"></div>
      </div>
    </header>
  );
}


================================================
File: apps/chat-with-pdf/app/components/header/theme-switcher.tsx
================================================
"use client";

import {
  Button,
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
  Tooltip,
  TooltipContent,
  TooltipTrigger,
} from "@makefy/ui";
import { MoonIcon, SunIcon } from "lucide-react";
import { useTheme } from "next-themes";

export function ThemeSwitcher() {
  const { setTheme } = useTheme();

  return (
    <DropdownMenu>
      <Tooltip>
        <TooltipTrigger asChild>
          <DropdownMenuTrigger asChild>
            <Button variant="outline" size="icon">
              <SunIcon className="h-4 w-4 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
              <MoonIcon className="absolute h-4 w-4 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
              <span className="sr-only">Toggle theme</span>
            </Button>
          </DropdownMenuTrigger>
        </TooltipTrigger>
        <TooltipContent>Toggle theme</TooltipContent>
      </Tooltip>
      <DropdownMenuContent align="end">
        <DropdownMenuItem
          onClick={() => setTheme("light")}
          className="cursor-pointer"
        >
          Light
        </DropdownMenuItem>
        <DropdownMenuItem
          onClick={() => setTheme("dark")}
          className="cursor-pointer"
        >
          Dark
        </DropdownMenuItem>
        <DropdownMenuItem
          onClick={() => setTheme("system")}
          className="cursor-pointer"
        >
          System
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
}


================================================
File: apps/chat-with-pdf/app/components/header/document-title/document-title.tsx
================================================
"use client";

import { Button } from "@makefy/ui/components/button";
import {
  Command,
  CommandItem,
  CommandList,
} from "@makefy/ui/components/command";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@makefy/ui/components/popover";
import { cn } from "@makefy/ui/lib/utils";
import { Tables } from "@makefy/supabase/types";
import { ChevronDownIcon, PencilIcon, TrashIcon } from "lucide-react";
import { useParams } from "next/navigation";
import { useEffect, useMemo, useRef, useState } from "react";
import { getDocumentByChatId } from "@/app/actions/get-document-by-chat-id";
import {
  EDIT_DOCUMENT_TAB,
  EditDocumentDialog,
} from "./edit-document-dialog/edit-document-dialog";

type DocumentTitleProps = {
  className?: string;
};

export function DocumentTitle({ className }: DocumentTitleProps) {
  const params = useParams();
  const buttonRef = useRef<HTMLButtonElement | null>(null);
  const [editDocumentDialogTab, setEditDocumentDialogTab] =
    useState<EDIT_DOCUMENT_TAB | null>(null);
  const [document, setDocument] = useState<Tables<"Document">>();

  useEffect(() => {
    getDocument();
  }, [params]);

  async function getDocument() {
    if (!params.documentId) {
      setDocument(undefined);
      return;
    }

    try {
      const document = await getDocumentByChatId(params.documentId as string);
      setDocument(document);
    } catch (error) {
      setDocument(undefined);
    }
  }

  function toggleEditDocumentDialog(isOpen: boolean) {
    setEditDocumentDialogTab(isOpen ? EDIT_DOCUMENT_TAB.EDIT : null);
  }

  function handleOpenEditDocumentDialog(tab: EDIT_DOCUMENT_TAB) {
    setEditDocumentDialogTab(tab);
  }

  if (!document) {
    return null;
  }

  return (
    <div className="flex w-fit max-w-sm flex-1 flex-row items-center justify-center gap-2 max-sm:max-w-full max-sm:justify-start">
      <Popover>
        <PopoverTrigger asChild>
          <Button
            variant="ghost"
            role="combobox"
            ref={buttonRef}
            aria-label="Select a team"
            className={cn("flex justify-between gap-2 truncate", className)}
          >
            <div className="flex flex-col truncate text-left">
              <span className="truncate">{document?.name}</span>
            </div>
            <ChevronDownIcon className="ml-auto h-4 w-4 shrink-0 opacity-50" />
          </Button>
        </PopoverTrigger>
        <PopoverContent className="max-w-fit p-1" side="bottom" align="end">
          <Command>
            <CommandList>
              <CommandItem
                className="flex h-8 cursor-pointer flex-row gap-2 text-sm"
                onSelect={() => {
                  handleOpenEditDocumentDialog(EDIT_DOCUMENT_TAB.EDIT);
                }}
              >
                <PencilIcon className="h-4 min-h-4 w-4 shrink-0 text-gray-500" />
                <span className="truncate">Rename title</span>
              </CommandItem>
              <CommandItem
                className="flex h-8 cursor-pointer flex-row gap-2 text-sm"
                onSelect={() => {
                  handleOpenEditDocumentDialog(EDIT_DOCUMENT_TAB.DELETE);
                }}
              >
                <TrashIcon className="h-4 min-h-4 w-4 shrink-0 text-gray-500" />
                <span className="truncate">Delete</span>
              </CommandItem>
            </CommandList>
          </Command>
        </PopoverContent>
      </Popover>
      {document && editDocumentDialogTab && (
        <EditDocumentDialog
          document={document}
          defaultTab={editDocumentDialogTab}
          isOpen
          onOpenChange={toggleEditDocumentDialog}
        />
      )}
    </div>
  );
}


================================================
File: apps/chat-with-pdf/app/components/header/document-title/constants/input-names.ts
================================================
export const enum INPUT_NAME {
  LINK = "pdf-link",
  FILE = "pdf-file",
}


================================================
File: apps/chat-with-pdf/app/components/header/document-title/constants/loading-messages.ts
================================================
export const loadingPdfLinkMessages = [
  {
    text: "Fetching document data",
    active: true,
    completed: false,
    chatId: "",
    error: "",
    friendlyError:
      "Oopsie! We couldn't fetch the document data, please make sure the link is valid. If not, our AI might mistake it for intergalactic pancakes! 🥞🌌",
  },
  {
    text: "Processing your document",
    active: false,
    completed: false,
    chatId: "",
    error: "",
    friendlyError:
      "Uh-oh! We couldn't process your document. Our AI might have mistaken it for a secret message from a parallel universe! 🕵️‍♂️🌌",
  },
  {
    text: "Learning from your document",
    active: false,
    completed: false,
    chatId: "",
    error: "",
    friendlyError:
      "Oopsie! Our AI couldn't learn from your document. Maybe it's written in a language only aliens understand. 👽📚",
  },
  {
    text: "Storing knowledge in the cloud",
    active: false,
    completed: false,
    chatId: "",
    error: "",
    friendlyError:
      "Oopsie! Our AI got lost in the cloud while storing knowledge. It's like finding a specific sock in a black hole. 🧦🌌",
  },
  {
    text: null,
    active: null,
    completed: null,
    chatId: "",
    error: "",
  },
];

// Feel free to try again or get assistance if needed! 🤖💻

export const loadingPdfFileMessages = [
  {
    text: "Uploading document and fetching data",
    active: true,
    completed: false,
    chatId: "",
    error: "",
    friendlyError:
      "Oopsie! We couldn't upload the document and fetch the data. It seems like our AI got tangled in the wires. 🔌🤖",
  },
  {
    text: "Processing your document",
    active: false,
    completed: false,
    chatId: "",
    error: "",
    friendlyError:
      "Uh-oh! We couldn't process your document. Our AI might have mistaken it for a secret message from a parallel universe! 🕵️‍♂️🌌",
  },
  {
    text: "Learning from your document",
    active: false,
    completed: false,
    chatId: "",
    error: "",
    friendlyError:
      "Oopsie! Our AI couldn't learn from your document. Maybe it's written in a language only aliens understand. 👽📚",
  },
  {
    text: "Storing knowledge in the cloud",
    active: false,
    completed: false,
    chatId: "",
    error: "",
    friendlyError:
      "Oopsie! Our AI got lost in the cloud while storing knowledge. It's like finding a specific sock in a black hole. 🧦🌌",
  },
  {
    text: null,
    active: null,
    completed: null,
    chatId: "",
    error: "",
    friendlyError: "",
  },
];


================================================
File: apps/chat-with-pdf/app/components/header/document-title/edit-document-dialog/edit-document-dialog.tsx
================================================
"use client";

import { deleteChat } from "@/app/actions/delete-chat";
import { editChat } from "@/app/actions/edit-chat";
import { zodResolver } from "@hookform/resolvers/zod";
import {
  Button,
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
  Input,
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
  useToast,
} from "@makefy/ui";
import { Tables } from "@makefy/supabase/types";
import { LoaderCircleIcon, PencilIcon, TrashIcon } from "lucide-react";
import { useEffect } from "react";
import { useForm } from "react-hook-form";
import { z } from "zod";

const EditFormSchema = z.object({
  title: z.string().min(2, {
    message: "Title must be at least 2 characters long",
  }),
});

function getDeleteFormSchema(documentId: string) {
  return z.object({
    documentId: z.string().refine((value) => value === documentId, {
      message: "Document ID does not match",
    }),
  });
}

export const enum EDIT_DOCUMENT_TAB {
  EDIT = "edit",
  DELETE = "delete",
}

type EditDocumentDialogProps = {
  isOpen: boolean;
  document: Tables<"Document">;
  defaultTab?: EDIT_DOCUMENT_TAB;
  onOpenChange?: (isOpen: boolean) => void;
};

export function EditDocumentDialog({
  isOpen,
  document,
  defaultTab = EDIT_DOCUMENT_TAB.EDIT,
  onOpenChange = () => null,
}: EditDocumentDialogProps) {
  const editForm = useForm<z.infer<typeof EditFormSchema>>({
    resolver: zodResolver(EditFormSchema),
    mode: "all",
    defaultValues: {
      title: document.name || "",
    },
    values: {
      title: document.name || "",
    },
  });

  const deleteForm = useForm<z.infer<ReturnType<typeof getDeleteFormSchema>>>({
    resolver: zodResolver(getDeleteFormSchema(document.chatId || "")),
    mode: "all",
    defaultValues: {
      documentId: "",
    },
  });

  const { toast } = useToast();

  useEffect(() => {
    editForm.reset();
    deleteForm.reset();
  }, [isOpen]);

  function handleDialogToggle(isOpen: boolean) {
    onOpenChange(isOpen);
  }

  async function onSaveChanges(values: z.infer<typeof EditFormSchema>) {
    await editChat(document, values.title);
    handleDialogToggle(false);
  }

  async function onDeleteDocument(
    values: z.infer<ReturnType<typeof getDeleteFormSchema>>,
  ) {
    const deleteResponse = await deleteChat(values.documentId);
    if (deleteResponse?.error)
      return toast({
        title: "Oops! We couldn't delete the document.",
        description: deleteResponse?.error?.message,
        variant: "destructive",
      });
    handleDialogToggle(false);
  }

  return (
    <Dialog open={isOpen} onOpenChange={handleDialogToggle}>
      <DialogContent className="flex h-[360px] flex-col">
        <DialogHeader>
          <DialogTitle>{document.name}</DialogTitle>
          <DialogDescription>
            Edit the title or delete the document.
          </DialogDescription>
        </DialogHeader>
        <div className="flex-1">
          <Tabs defaultValue={defaultTab} className="flex h-full flex-col">
            <TabsList className="grid w-full grid-cols-2">
              <TabsTrigger
                className="flex gap-2"
                value={EDIT_DOCUMENT_TAB.EDIT}
              >
                <PencilIcon className="h-4 w-4" />
                Edit zone
              </TabsTrigger>
              <TabsTrigger
                className="flex gap-2"
                value={EDIT_DOCUMENT_TAB.DELETE}
              >
                <TrashIcon className="h-4 w-4" />
                Danger zone
              </TabsTrigger>
            </TabsList>
            <TabsContent className="flex-1" value={EDIT_DOCUMENT_TAB.EDIT}>
              <Form {...editForm}>
                <form
                  onSubmit={editForm.handleSubmit(onSaveChanges)}
                  className="flex h-full flex-col justify-between space-y-3"
                >
                  <FormField
                    control={editForm.control}
                    name="title"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Title</FormLabel>
                        <FormDescription>
                          This the title of the document, give it a meaningful
                          name.
                        </FormDescription>
                        <FormControl>
                          <Input placeholder="Document title..." {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <div className="flex justify-end">
                    <Button
                      type="submit"
                      className="flex gap-2"
                      disabled={
                        !editForm.formState.isValid ||
                        editForm.formState.isSubmitting ||
                        document.name === editForm.getValues().title
                      }
                    >
                      {editForm.formState.isSubmitting && (
                        <LoaderCircleIcon className="h-4 w-4 animate-spin" />
                      )}
                      Save changes
                    </Button>
                  </div>
                </form>
              </Form>
            </TabsContent>
            <TabsContent className="flex-1" value={EDIT_DOCUMENT_TAB.DELETE}>
              <Form {...deleteForm}>
                <form
                  onSubmit={deleteForm.handleSubmit(onDeleteDocument)}
                  className="flex h-full flex-col justify-between space-y-3"
                >
                  <FormField
                    control={deleteForm.control}
                    name="documentId"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Delete document</FormLabel>
                        <FormDescription>
                          This action is irreversible, be careful.
                        </FormDescription>
                        <FormControl>
                          <Input placeholder="Document ID..." {...field} />
                        </FormControl>
                        <FormDescription>
                          Type{" "}
                          <span className="font-bold">{document.chatId}</span>{" "}
                          to delete the document.
                        </FormDescription>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <div className="flex justify-end">
                    <Button
                      type="submit"
                      variant="destructive"
                      className="flex gap-2"
                      disabled={
                        !deleteForm.formState.isValid ||
                        deleteForm.formState.isSubmitting
                      }
                    >
                      {!deleteForm.formState.isSubmitting && (
                        <TrashIcon className="h-4 w-4" />
                      )}
                      {deleteForm.formState.isSubmitting && (
                        <LoaderCircleIcon className="h-4 w-4 animate-spin" />
                      )}
                      Delete document
                    </Button>
                  </div>
                </form>
              </Form>
            </TabsContent>
          </Tabs>
        </div>
      </DialogContent>
    </Dialog>
  );
}


================================================
File: apps/chat-with-pdf/app/components/header/document-title/new-document-dialog/new-document-dialog-content.tsx
================================================
import {
  Button,
  Input,
  Label,
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from "@makefy/ui";
import { cn } from "@makefy/ui/lib/utils";
import { TrashIcon } from "lucide-react";
import { PDFDocument } from "pdf-lib";
import { RefObject, useEffect, useState } from "react";
import { DropzoneInputProps, useDropzone } from "react-dropzone";
import {
  Controller,
  ControllerRenderProps,
  FieldValues,
  useFormContext,
} from "react-hook-form";
import { INPUT_NAME } from "../constants/input-names";

const enum NEW_DOCUMENT_TAB {
  LINK = "link",
  IMPORT = "import",
}

type FileAttached = {
  file: File;
  metadata: {
    fileName: string;
    title: string;
    numPages: number;
    size: {
      kb: number;
      mb: number;
    };
  };
};

export function NewDocumentDialogContent() {
  const [fileAttached, setFileAttached] = useState<FileAttached | null>(null);
  const [tab, setTab] = useState<NEW_DOCUMENT_TAB | string>(
    NEW_DOCUMENT_TAB.LINK,
  );

  useEffect(handleInputFileValueChange, [fileAttached, tab]);

  const {
    register,
    setValue: setInputValue,
    trigger: triggerInputValidation,
    control,
  } = useFormContext();

  const { getRootProps, getInputProps } = useDropzone({
    onDrop: loadFile,
    maxFiles: 1,
    accept: { "application/pdf": [".pdf"] },
    multiple: false,
  });

  function handleRemoveFile() {
    setFileAttached(null);
    triggerInputValidation(INPUT_NAME.FILE as string);
    console.log("triggered validation");
  }

  function handleInputFileValueChange() {
    const isOnImportTab = tab === NEW_DOCUMENT_TAB.IMPORT;
    const fileData = isOnImportTab ? fileAttached?.file : undefined;

    // Set the value of the input depending on the tab and validate
    setInputValue(INPUT_NAME.FILE as string, fileData, {
      shouldValidate: true,
    });
  }

  function handleTabChange(value: NEW_DOCUMENT_TAB | string) {
    setTab(value);
  }

  function loadFile(acceptedFiles: File[]) {
    const [file] = acceptedFiles;
    if (!file) return false;

    const { name: fileName } = file;
    const size = file.size;
    const sizeInKB = +(size / 1024).toFixed(2);
    const sizeInMB = +(sizeInKB / 1024).toFixed(2);

    const reader = new FileReader();

    reader.onabort = () => console.log("file reading was aborted");
    reader.onerror = () => console.log("file reading has failed");
    reader.onload = async () => {
      // Do whatever you want with the file contents
      const binaryStr = reader.result;

      const pdfDoc = await PDFDocument.load(binaryStr as ArrayBuffer, {
        updateMetadata: false,
        ignoreEncryption: true,
      });

      const title = pdfDoc.getTitle() || "";
      const numPages = pdfDoc.getPageCount();

      setFileAttached({
        file,
        metadata: {
          fileName,
          title,
          numPages,
          size: {
            kb: sizeInKB,
            mb: sizeInMB,
          },
        },
      });
    };
    reader.readAsArrayBuffer(file);
  }

  function validateFile(fileData: FileAttached) {
    console.log("validating file", fileData);
    const MAX_FILE_SIZE = 40 * 1024 * 1024; // 40MB
    const MAX_PAGES = 5; // 5 pages

    const sizeInMB = fileData?.metadata?.size.mb;
    const numPages = fileData?.metadata?.numPages;

    if (sizeInMB > MAX_FILE_SIZE) {
      return `File size exceeds the limit of 40MB. Current size is ${sizeInMB}MB`;
    }

    if (numPages > MAX_PAGES) {
      return `File pages exceeds the limit of 5 pages. Current pages are ${numPages}`;
    }

    return true;
  }

  function getMergedInputProps(
    reactHookFormInputProps: ControllerRenderProps<
      FieldValues,
      INPUT_NAME.FILE
    >,
    reactDropzoneInputProps: DropzoneInputProps & {
      ref: RefObject<HTMLInputElement>;
    },
  ) {
    const {
      ref: rdInputRef,
      onChange: rdOnChange,
      ...rdInputProps
    } = reactDropzoneInputProps;

    const {
      value,
      ref: rhfInputRef,
      onChange: rhfOnChange,
      ...field
    } = reactHookFormInputProps;

    const mergedInputProps: JSX.IntrinsicElements["input"] = {
      ...rdInputProps,
      ...field,
      value: value?.fileName,
      ref: (el) => {
        (rdInputRef.current as HTMLInputElement | null) = el;
        rhfInputRef(el);
      },
      onChange: (event) => {
        if (rdOnChange) rdOnChange(event);
        rhfOnChange(event);
      },
      id: "file-uploader",
    };

    return mergedInputProps;
  }

  return (
    <Tabs defaultValue={tab} onValueChange={handleTabChange}>
      <TabsList className="grid w-full grid-cols-2">
        <TabsTrigger value={NEW_DOCUMENT_TAB.LINK}>
          Import from link
        </TabsTrigger>
        <TabsTrigger value={NEW_DOCUMENT_TAB.IMPORT}>
          From your computer
        </TabsTrigger>
      </TabsList>
      <TabsContent value={NEW_DOCUMENT_TAB.LINK}>
        <div className="h-48 space-y-4 py-2">
          <Label className="flex flex-col gap-2">
            Link to your pdf *
            <p className="text-muted-foreground text-sm">
              Make sure the link ends with .pdf or it is a valid pdf link,
              otherwise, download the document and upload it manually. The
              document should be up to 5 pages.
            </p>
            <Input
              placeholder="https://mydomain.com/how-many-cups-did-argentina-win.pdf"
              {...register(INPUT_NAME.LINK, {
                required: tab === NEW_DOCUMENT_TAB.LINK,
                disabled: tab !== NEW_DOCUMENT_TAB.LINK,
              })}
            />
          </Label>
        </div>
      </TabsContent>
      <TabsContent value={NEW_DOCUMENT_TAB.IMPORT}>
        <div className="h-48 space-y-4 py-2">
          {!fileAttached && (
            <Label
              className="flex h-full flex-col gap-2"
              htmlFor="file-uploader"
            >
              Upload your pdf *
              <div
                className={cn(
                  "flex flex-1 shrink-0 items-center justify-center rounded-md border border-dashed dark:border-2",
                  {
                    "cursor-pointer": !fileAttached,
                  },
                )}
                {...getRootProps()}
              >
                <div
                  className={cn(
                    "flex max-w-[420px] flex-col items-center justify-center px-4 text-center",
                    {
                      "w-full": fileAttached,
                    },
                  )}
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="48"
                    height="48"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    strokeWidth="1.75"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    className="text-muted-foreground h-10 w-10"
                  >
                    <path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z" />
                    <path d="M14 2v4a2 2 0 0 0 2 2h4" />
                    <path d="M10 9H8" />
                    <path d="M16 13H8" />
                    <path d="M16 17H8" />
                  </svg>

                  <h3 className="mt-4 text-lg font-semibold">
                    Drag 'n' drop or click to select
                  </h3>
                  <p className="text-muted-foreground mb-4 mt-2 text-sm">
                    Only .pdf up to 5 pages and 50MB are supported.
                  </p>
                </div>
              </div>
            </Label>
          )}
          {fileAttached && (
            <div className="flex h-full flex-col gap-2">
              Upload your pdf *
              <div className="border-border z-10 flex flex-row items-center justify-between gap-2 rounded-md border-2 p-4">
                <div className="flex shrink flex-row items-center gap-2 truncate">
                  <div className="flex flex-col gap-1 truncate text-left">
                    <span className="truncate">
                      {fileAttached?.metadata?.fileName}
                    </span>
                    <div className="flex flex-row gap-2">
                      <span className="text-xs text-gray-500 dark:text-gray-400">
                        {fileAttached?.metadata?.numPages} page
                        {fileAttached?.metadata?.numPages > 1 ? "s" : ""}{" "}
                      </span>
                      <span className="text-xs text-gray-500 dark:text-gray-400">
                        {fileAttached?.metadata?.size.mb > 1
                          ? `${fileAttached?.metadata?.size.mb} MB`
                          : `${fileAttached?.metadata?.size.kb} KB`}
                      </span>
                    </div>
                  </div>
                </div>
                <Button
                  className="ml-auto flex shrink-0 gap-2"
                  variant="outline"
                  size="default"
                  onClick={handleRemoveFile}
                >
                  <span>Remove file</span>
                  <TrashIcon className="h-4 w-4" />
                </Button>
              </div>
            </div>
          )}
          <Controller
            control={control}
            name={INPUT_NAME.FILE}
            disabled={tab !== NEW_DOCUMENT_TAB.IMPORT}
            rules={{
              required: true,
              validate: validateFile,
              shouldUnregister: true,
            }}
            render={({ field }) => (
              <input {...getMergedInputProps(field, getInputProps())} />
            )}
          ></Controller>
        </div>
      </TabsContent>
    </Tabs>
  );
}


================================================
File: apps/chat-with-pdf/app/components/header/document-title/new-document-dialog/new-document-dialog.tsx
================================================
import {
  Alert,
  AlertDescription,
  AlertTitle,
  Button,
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@makefy/ui";
import { Loader2Icon } from "lucide-react";
import { useRouter } from "next/navigation";
import { useState } from "react";
import { FieldValues, FormProvider, useForm } from "react-hook-form";
import {
  loadingPdfFileMessages,
  loadingPdfLinkMessages,
} from "../constants/loading-messages";
import { NewDocumentDialogContent } from "./new-document-dialog-content";
import { NewDocumentLoadingState } from "./new-document-loading-state";

type NewDocumentDialogProps = {
  isOpen: boolean;
  onOpenChange?: (isOpen: boolean) => void;
};

export function NewDocumentDialog({
  isOpen,
  onOpenChange = () => null,
}: NewDocumentDialogProps) {
  const router = useRouter();
  const [loadingMessages, setLoadingMessages] = useState<
    typeof loadingPdfLinkMessages | typeof loadingPdfFileMessages
  >([]);

  const methods = useForm({ mode: "all" });

  function handleDialogToggle(isOpen: boolean) {
    onOpenChange(isOpen);
    if (!isOpen) {
      // Clear the loading messages after the dialog closing animation is done
      setTimeout(() => setLoadingMessages([]), 500);
    }
  }

  async function formAction(formInputValues: FieldValues = {}) {
    const formData = new FormData();

    // Filter out empty values
    Object.keys(formInputValues)
      .filter((key) => formInputValues[key])
      .forEach((key) => {
        formData.set(key, formInputValues[key]);
      });

    const response = await fetch("/api/chat/new-chat", {
      method: "POST",
      body: formData,
      cache: "no-store",
    });

    setLoadingMessages(loadingPdfLinkMessages);

    const reader = await response.body?.getReader();
    const decoder = new TextDecoder();

    async function read() {
      const { done, value } = await (reader?.read() as Promise<
        ReadableStreamReadResult<Uint8Array>
      >);

      const chunk = decoder.decode(value, { stream: true });
      if (!chunk) return null;
      const parsedLoadingMessages = JSON.parse(chunk);

      const filteredLoadingMessages = parsedLoadingMessages.filter(
        (message: { text: any }) => message.text,
      );
      setLoadingMessages(filteredLoadingMessages);

      const lastLoadingMessage = parsedLoadingMessages.at(-1);

      if (lastLoadingMessage.chatId) {
        handleDialogToggle(false);
        methods.reset();
        setTimeout(
          () => router.push(`/chat/${lastLoadingMessage.chatId}`),
          1000,
        );
      }

      if (done) {
        console.log("it is done", value);
        return null;
      }

      return read();
    }

    read();

    // Upload the new document
  }

  return (
    <Dialog open={isOpen} onOpenChange={handleDialogToggle}>
      <DialogContent className="flex max-h-screen min-h-[400px] flex-col">
        <DialogHeader>
          <DialogTitle>Start chatting with a new document</DialogTitle>
          <DialogDescription>
            Add a new document to chat with.
          </DialogDescription>
        </DialogHeader>
        {!loadingMessages.length && (
          <div className="flex flex-1 flex-col gap-4">
            <FormProvider {...methods}>
              <form
                className="flex flex-1 flex-col justify-between gap-2"
                onSubmit={methods.handleSubmit(formAction)}
              >
                <NewDocumentDialogContent />
                <DialogFooter>
                  <Button
                    variant="outline"
                    onClick={() => handleDialogToggle(false)}
                  >
                    Cancel
                  </Button>
                  <Button
                    type="submit"
                    disabled={
                      !methods.formState.isValid ||
                      methods.formState.isSubmitting
                    }
                    className="flex flex-row gap-2"
                  >
                    {methods.formState.isSubmitting && (
                      <Loader2Icon className="h-4 w-4 animate-spin" />
                    )}
                    Import
                  </Button>
                </DialogFooter>
              </form>
            </FormProvider>
          </div>
        )}
        {!!loadingMessages.length && (
          <div className="flex flex-1 flex-col justify-between gap-2">
            <NewDocumentLoadingState
              loadingMessages={loadingMessages}
              onTryAgain={() => setLoadingMessages([])}
            />
          </div>
        )}
      </DialogContent>
    </Dialog>
  );
}


================================================
File: apps/chat-with-pdf/app/components/header/document-title/new-document-dialog/new-document-loading-state.tsx
================================================
import { Button } from "@makefy/ui";
import { AnimatePresence, motion } from "framer-motion";
import { SadFaceIcon } from "icons/sad-face";
import { SparkleIcon } from "icons/sparkle";
import { CheckIcon, ClockIcon, LoaderCircleIcon, XIcon } from "lucide-react";
import { Fragment, useEffect, useRef } from "react";
import {
  loadingPdfFileMessages,
  loadingPdfLinkMessages,
} from "../constants/loading-messages";

const SparkleIconAnimated = motion(SparkleIcon);
const SadFaceIconAnimated = motion(SadFaceIcon);
const ButtonAnimated = motion(Button);

type NewDocumentLoadingStateProps = {
  loadingMessages:
    | typeof loadingPdfLinkMessages
    | typeof loadingPdfFileMessages;
  onTryAgain: () => void;
};

export function NewDocumentLoadingState({
  loadingMessages,
  onTryAgain,
}: NewDocumentLoadingStateProps) {
  const loadingTextRefs = useRef<HTMLDivElement[] | null[]>([]);

  useEffect(handleLoadingMessageChanges, [loadingMessages]);

  const failedLoadingMessage = loadingMessages?.find((step) => step?.error);

  function handleLoadingMessageChanges() {
    /* Auto scroll to next loading message */
    const lastActiveIndex = loadingMessages.findIndex(
      (step) => !step.completed,
    );

    if (loadingTextRefs.current[lastActiveIndex]) {
      loadingTextRefs.current[lastActiveIndex]?.scrollIntoView({
        behavior: "smooth",
        block: "center",
      });
    }
  }

  function handleTryAgain() {
    if (onTryAgain && typeof onTryAgain === "function") {
      onTryAgain();
    }
  }

  return (
    <motion.div
      className="flex flex-1 flex-col items-center justify-center gap-4"
      layout
    >
      <div className="relative h-16 w-16">
        <AnimatePresence mode="popLayout">
          {failedLoadingMessage?.error && (
            <SadFaceIconAnimated
              className="h-full w-full"
              animate={{ scale: 1, opacity: 1 }}
              initial={{ scale: 0, opacity: 0 }}
              transition={{ duration: 0.3 }}
            />
          )}
          {!failedLoadingMessage?.error && (
            <>
              <SparkleIconAnimated
                className="text-primary absolute bottom-2 h-10 w-10"
                animate={{ scale: 1, opacity: 1 }}
                initial={{ scale: 0, opacity: 0 }}
                transition={{
                  repeat: Infinity,
                  duration: 0.5,
                  repeatDelay: 0.5,
                  repeatType: "reverse",
                }}
              />
              <SparkleIconAnimated
                className="text-primary absolute bottom-0 right-0 h-6 w-6"
                animate={{ scale: 1, opacity: 1 }}
                initial={{ scale: 0, opacity: 0 }}
                transition={{
                  delay: 0.25,
                  repeat: Infinity,
                  duration: 0.5,
                  repeatDelay: 0.5,
                  repeatType: "reverse",
                }}
              />
              <SparkleIconAnimated
                className="text-primary absolute right-2 top-2 h-5 w-5"
                animate={{ scale: 1, opacity: 1 }}
                initial={{ scale: 0, opacity: 0 }}
                transition={{
                  delay: 0.5,
                  repeat: Infinity,
                  duration: 0.5,
                  repeatDelay: 0.5,
                  repeatType: "reverse",
                }}
              />
            </>
          )}
        </AnimatePresence>
      </div>
      <div className="relative">
        <div className="from-background pointer-events-none absolute inset-x-0 top-0 z-10 h-4 bg-gradient-to-b to-transparent" />
        <div className="from-background pointer-events-none absolute inset-x-0 bottom-0 z-10 h-4 bg-gradient-to-t to-transparent" />
        <div className="flex h-20 flex-col gap-[6px] overflow-hidden">
          {loadingMessages.map((step, index) => (
            <Fragment key={index}>
              {index === 0 && <div className="block min-h-5 w-full" />}
              <motion.div
                layout
                className="flex w-full justify-center space-x-4"
                animate={{
                  scale:
                    step.active ||
                    (index === loadingMessages.length - 1 && step.completed)
                      ? 1
                      : 0.75,
                  opacity:
                    step.active ||
                    (index === loadingMessages.length - 1 && step.completed)
                      ? 1
                      : 0.3,
                }}
                transition={{ duration: 0.5 }}
                initial={{
                  scale: index === 0 ? 1 : 0.75,
                  opacity: index === 0 ? 1 : 0.3,
                }}
                ref={(el) => {
                  loadingTextRefs.current[index] = el;
                }}
              >
                <div className="flex h-full items-center">
                  {step.completed && <CheckIcon className="h-5 w-5" />}
                  {step.active && !step.error && (
                    <LoaderCircleIcon className="h-5 w-5 animate-spin" />
                  )}
                  {step.error && <XIcon className="h-5 w-5" />}
                  {!step.completed && !step.active && (
                    <ClockIcon className="h-5 w-5" />
                  )}
                </div>
                <div>
                  <h4 className="font-medium">{step.text}</h4>
                </div>
              </motion.div>
              {index === loadingMessages.length - 1 && (
                <div className="block min-h-5 w-full" />
              )}
            </Fragment>
          ))}
        </div>
      </div>
      {failedLoadingMessage?.error && (
        <motion.span
          initial={{ y: 10, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          transition={{ duration: 0.5, delay: 0.3 }}
          className="text-muted-foreground max-w-sm text-center text-sm"
        >
          {failedLoadingMessage.friendlyError}
        </motion.span>
      )}
      {failedLoadingMessage?.error && (
        <ButtonAnimated
          initial={{ y: 10, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          transition={{ duration: 0.5, delay: 0.3 }}
          onClick={handleTryAgain}
        >
          Try again
        </ButtonAnimated>
      )}
    </motion.div>
  );
}


================================================
File: apps/chat-with-pdf/app/components/header/user-nav/user-nav-menu-items.tsx
================================================
"use client";

import { createSupabaseClient } from "@makefy/supabase/client";
import {
  DropdownMenuGroup,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  ToggleGroup,
  ToggleGroupItem,
} from "@makefy/ui";
import { LaptopMinimalIcon, MoonIcon, SunIcon } from "lucide-react";
import { useTheme } from "next-themes";
import { useRouter } from "next/navigation";

export function UserNavMenuItems() {
  const router = useRouter();
  const { theme, setTheme } = useTheme();
  console.log(theme);

  async function handleLogout() {
    const supabase = createSupabaseClient();

    await supabase.auth.signOut();

    router.push("/login");
  }

  return (
    <>
      <DropdownMenuGroup>
        <DropdownMenuItem className="cursor-pointer">
          Profile
          <DropdownMenuShortcut>⇧⌘P</DropdownMenuShortcut>
        </DropdownMenuItem>
        <DropdownMenuItem className="cursor-pointer">
          Billing
          <DropdownMenuShortcut>⌘B</DropdownMenuShortcut>
        </DropdownMenuItem>
        <DropdownMenuItem className="flex justify-between">
          Theme
          <ToggleGroup
            type="single"
            size="sm"
            value={theme}
            onValueChange={(value) => setTheme(value)}
            onClick={(event) => event.stopPropagation()}
            className="border-border bg-background rounded-md border"
          >
            <ToggleGroupItem
              value="system"
              className="aspect-square rounded-md"
            >
              <LaptopMinimalIcon className="text-muted-foreground h-3 w-3" />
            </ToggleGroupItem>
            <ToggleGroupItem value="light" className="aspect-square rounded-md">
              <SunIcon className="text-muted-foreground h-3 w-3" />
            </ToggleGroupItem>
            <ToggleGroupItem value="dark" className="aspect-square rounded-md">
              <MoonIcon className="text-muted-foreground h-3 w-3" />
            </ToggleGroupItem>
          </ToggleGroup>
        </DropdownMenuItem>
        <DropdownMenuItem className="cursor-pointer">
          Settings
          <DropdownMenuShortcut>⌘S</DropdownMenuShortcut>
        </DropdownMenuItem>
      </DropdownMenuGroup>
      <DropdownMenuSeparator />
      <DropdownMenuItem className="cursor-pointer" onClick={handleLogout}>
        Log out
        <DropdownMenuShortcut>⇧⌘Q</DropdownMenuShortcut>
      </DropdownMenuItem>{" "}
    </>
  );
}


================================================
File: apps/chat-with-pdf/app/components/header/user-nav/user-nav.tsx
================================================
import { Button } from "@makefy/ui/components/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@makefy/ui/components/dropdown-menu";
import { UserAvatar } from "@/components/ui/user-avatar";
import { UserNavMenuItems } from "./user-nav-menu-items";
import { createSupabaseServer } from "@makefy/supabase/server";

export async function UserNav() {
  const supabase = createSupabaseServer();
  const {
    data: { user },
  } = await supabase.auth.getUser();
  const userMetadata = user?.user_metadata;

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button
          variant="ghost"
          className="outline-border relative h-8 w-8 rounded-full shadow-sm outline outline-1 outline-offset-2"
        >
          <UserAvatar className="h-8 w-8" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent className="w-56" align="end" forceMount>
        <DropdownMenuLabel className="font-normal">
          <div className="flex flex-col space-y-1">
            <p className="text-sm font-medium leading-none">
              {userMetadata?.full_name || userMetadata?.name}
            </p>
            <p className="text-muted-foreground break-all text-xs leading-none">
              {user?.email}
            </p>
          </div>
        </DropdownMenuLabel>
        <DropdownMenuSeparator />
        <UserNavMenuItems />
      </DropdownMenuContent>
    </DropdownMenu>
  );
}


================================================
File: apps/chat-with-pdf/app/components/pages-containers/chat-id-container.tsx
================================================
import { ChatProvider } from "@/app/context/chat-context";
import { ChatScreen } from "../chat/chat-screen";
import { Tables } from "@makefy/supabase/types";

type ChatIdContainerProps =
  | {
      loading: true;
      chatData?: never;
    }
  | {
      loading?: false;
      chatData: Tables<"Chat">;
    };

export function ChatIdContainer({ chatData, loading }: ChatIdContainerProps) {
  return !loading ? (
    <ChatProvider chatData={chatData}>
      <ChatScreen />
    </ChatProvider>
  ) : (
    <ChatScreen loading />
  );
}


================================================
File: apps/chat-with-pdf/app/components/pages-containers/chats-container.tsx
================================================
"use client";

import {
  Button,
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  Separator,
  Skeleton,
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@makefy/ui";
import { FileTextIcon, PlusCircleIcon } from "lucide-react";
import Link from "next/link";
import { useState } from "react";
import { Container } from "../ui/container";
import { Heading } from "../ui/heading";
import { SadFaceIcon } from "icons/sad-face";
import { NewDocumentDialog } from "../header/document-title/new-document-dialog/new-document-dialog";
import { Tables } from "@makefy/supabase/types";

type ChatsContainerProps =
  | {
      loading: true;
      chats?: never;
      documents?: never;
    }
  | {
      loading?: false;
      chats: Tables<"Chat">[];
      documents: Tables<"Document">[];
    };

export function ChatsContainer({
  chats,
  documents,
  loading = false,
}: ChatsContainerProps) {
  const [isNewChatDialogOpen, setIsNewChatDialogOpen] = useState(false);

  function handleNewChatDialogToggle() {
    setIsNewChatDialogOpen(!isNewChatDialogOpen);
  }

  function getChatData(chatId: string) {
    return chats?.find((chat) => chat.id === chatId);
  }

  const fakeChatsList = Array.from({ length: 6 }).fill(null);

  return (
    <div className="flex h-full flex-1 flex-col gap-4 p-4">
      <div>
        <Container className="pb-4">
          <Heading
            loading={loading}
            title="Chats"
            description="All your conversations with your documents"
            actionButton={
              <TooltipProvider delayDuration={0}>
                <Tooltip disableHoverableContent>
                  <TooltipTrigger asChild>
                    <Button
                      disabled={documents?.length === 5}
                      className="flex gap-2"
                      onClick={handleNewChatDialogToggle}
                    >
                      <PlusCircleIcon className="h-4 w-4" />
                      Start a new chat
                    </Button>
                  </TooltipTrigger>
                  {documents?.length === 5 && (
                    <TooltipContent>
                      You have reached the maximum number of documents.
                    </TooltipContent>
                  )}
                </Tooltip>
              </TooltipProvider>
            }
          />
        </Container>
        <Separator />
      </div>
      <Container className="flex-1">
        <Card className="col-span-4 flex h-full hover:shadow-none">
          <CardContent className="flex flex-1 flex-col gap-4 p-4">
            {!loading &&
              documents?.map((document) => (
                <Card
                  className="flex flex-row items-center justify-between p-4"
                  key={document.chatId}
                >
                  <div className="flex flex-row items-center gap-4">
                    <FileTextIcon className="h-6 w-6" />
                    <div className="flex flex-col gap-2">
                      <CardHeader className="p-0">
                        <CardTitle>{document?.name}</CardTitle>
                      </CardHeader>
                      <CardContent className="text-muted-foreground flex gap-2 p-0">
                        <span>
                          {
                            (
                              getChatData(document.chatId || "")
                                ?.documentMetadata as Record<string, any>
                            )?.numPages
                          }{" "}
                          page
                          {(
                            getChatData(document.chatId || "")
                              ?.documentMetadata as Record<string, any>
                          )?.numPages > 1
                            ? "s"
                            : ""}{" "}
                        </span>
                        <span>
                          {(
                            getChatData(document.chatId || "")
                              ?.documentMetadata as Record<string, any>
                          )?.size.mb > 1
                            ? `${(getChatData(document.chatId || "")?.documentMetadata as Record<string, any>)?.size.mb} MB`
                            : `${(getChatData(document.chatId || "")?.documentMetadata as Record<string, any>)?.size.kb} KB`}
                        </span>
                      </CardContent>
                    </div>
                  </div>
                  <Button className="flex-shrink-0" variant="secondary" asChild>
                    <Link href={`/chat/${document.chatId}`}>Open chat</Link>
                  </Button>
                </Card>
              ))}
            {loading &&
              fakeChatsList.map((_, index) => (
                <Skeleton className="h-20 w-full" key={index} />
              ))}
            {!loading && chats?.length === 0 && (
              <div className="flex h-full flex-col items-center justify-center gap-4">
                <SadFaceIcon className="h-28 w-28 fill-gray-600 opacity-30" />
                <p className="text-muted-foreground max-w-xs text-center">
                  Oh no! No chats found. Start a new chat to get the party
                  started.
                </p>
              </div>
            )}
          </CardContent>
        </Card>
      </Container>
      <NewDocumentDialog
        isOpen={isNewChatDialogOpen}
        onOpenChange={handleNewChatDialogToggle}
      />
    </div>
  );
}


================================================
File: apps/chat-with-pdf/app/components/pages-containers/login/login-container.tsx
================================================
"use client";

import Image from "next/image";
import { Social } from "../signup/social";
import { LoginForm } from "./login-form";
import Logo from "@/public/logo.svg";

export function LoginContainer() {
  const queryString =
    typeof window !== "undefined" ? window?.location.search : "";
  const urlParams = new URLSearchParams(queryString);

  // Get the value of the 'next' parameter
  const next = urlParams.get("next");

  return (
    <div className="w-full rounded-md border shadow  sm:w-[26rem] sm:p-5 dark:border-zinc-800">
      <div className="space-y-5 p-5">
        <div className="space-y-3 text-center">
          <div className="bg-background mx-auto flex size-16 items-center justify-center overflow-hidden rounded-full p-2">
            <Logo />
          </div>
          <h1 className="font-bold">Sign in to Makefy</h1>
          <p className="text-sm">Welcome back! Please sign in to continue</p>
        </div>
        <Social redirectTo={next || "/"} />
        <div className="flex items-center gap-5">
          <div className="h-[0.5px] w-full flex-1 bg-zinc-400 dark:bg-zinc-800"></div>
          <div className="text-sm">or</div>
          <div className="h-[0.5px] w-full flex-1 bg-zinc-400 dark:bg-zinc-800"></div>
        </div>
        <LoginForm redirectTo={next || "/"} />
      </div>
    </div>
  );
}


================================================
File: apps/chat-with-pdf/app/components/pages-containers/login/login-form.tsx
================================================
"use client";

import { useRouter } from "next/navigation";
import { useState, useTransition } from "react";

import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { AiOutlineLoading3Quarters } from "react-icons/ai";
import { FaRegEye, FaRegEyeSlash } from "react-icons/fa6";
import { z } from "zod";

import {
  Button,
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
  Input,
  useToast,
} from "@makefy/ui";
import { cn } from "@makefy/ui/lib/utils";
import Link from "next/link";
import { createSupabaseClient } from "@makefy/supabase/client";

const FormSchema = z.object({
  email: z.string().email({ message: "Invalid Email Address" }),
  password: z.string().min(6, { message: "Password is too short" }),
});

export function LoginForm({ redirectTo }: { redirectTo: string }) {
  const [passwordReveal, setPasswordReveal] = useState(false);
  const [isPending, startTransition] = useTransition();
  const router = useRouter();

  const { toast } = useToast();

  const form = useForm<z.infer<typeof FormSchema>>({
    resolver: zodResolver(FormSchema),
    defaultValues: {
      email: "",
      password: "",
    },
  });

  function onSubmit(data: z.infer<typeof FormSchema>) {
    const supabase = createSupabaseClient();
    if (!isPending) {
      startTransition(async () => {
        const { error } = await supabase.auth.signInWithPassword({
          email: data.email,
          password: data.password,
        });
        if (error) {
          toast({
            title: "Error",
            description: error.message,
            variant: "destructive",
          });
        } else {
          router.push(redirectTo);
        }
      });
    }
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)}>
        <FormField
          control={form.control}
          name="email"
          render={({ field }) => (
            <FormItem>
              <FormLabel className=" test-sm  font-semibold">
                Email Address
              </FormLabel>
              <FormControl>
                <Input
                  className="h-8"
                  placeholder="example@gmail.com"
                  type="email"
                  {...field}
                />
              </FormControl>
              <FormMessage className="text-red-500" />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="password"
          render={({ field }) => (
            <FormItem>
              <FormLabel className="text-sm font-semibold">Password</FormLabel>
              <FormControl>
                <div className=" relative">
                  <Input
                    className="h-8"
                    type={passwordReveal ? "text" : "password"}
                    {...field}
                  />
                  <div
                    className="group absolute right-2 top-[30%] cursor-pointer"
                    onClick={() => setPasswordReveal(!passwordReveal)}
                  >
                    {passwordReveal ? (
                      <FaRegEye className=" transition-all group-hover:scale-105" />
                    ) : (
                      <FaRegEyeSlash className=" transition-all group-hover:scale-105" />
                    )}
                  </div>
                </div>
              </FormControl>
              <FormMessage className="text-red-500" />
            </FormItem>
          )}
        />
        <Button type="submit" className="flex w-full gap-2">
          <AiOutlineLoading3Quarters
            className={cn(!isPending ? "hidden" : "block animate-spin")}
          />
          Continue
        </Button>
      </form>
      <div className="mt-4 text-center text-sm">
        Don&apos;t have an account?{" "}
        <Link href="/signup" className="underline">
          Sign up
        </Link>
      </div>
    </Form>
  );
}


================================================
File: apps/chat-with-pdf/app/components/pages-containers/signup/sign-up-container.tsx
================================================
"use client";

import Image from "next/image";
import { SignUpForm } from "./signup-form";
import { Social } from "./social";
import Logo from "@/public/logo.svg";

export function SignUpContainer() {
  const queryString =
    typeof window !== "undefined" ? window?.location.search : "";
  const urlParams = new URLSearchParams(queryString);

  // Get the value of the 'next' parameter
  const next = urlParams.get("next");
  const verify = urlParams.get("verify");

  return (
    <div className="w-full rounded-md border shadow  sm:w-[26rem] sm:p-5 dark:border-zinc-800">
      <div className="space-y-5 p-5">
        <div className="space-y-3 text-center">
          <div className="bg-background mx-auto flex size-16 items-center justify-center overflow-hidden rounded-full p-2">
            <Logo />
          </div>
          <h1 className="font-bold">Create Account</h1>
          <p className="text-sm">
            Welcome! Please fill in the details to get started.
          </p>
        </div>
        <Social redirectTo={next || "/"} />
        <div className="flex items-center gap-5">
          <div className="h-[0.5px] w-full flex-1 bg-zinc-400 dark:bg-zinc-800"></div>
          <div className="text-sm">or</div>
          <div className="h-[0.5px] w-full flex-1 bg-zinc-400 dark:bg-zinc-800"></div>
        </div>
      </div>
      <SignUpForm redirectTo={next || "/"} />
    </div>
  );
}


================================================
File: apps/chat-with-pdf/app/components/pages-containers/signup/signup-form.tsx
================================================
"use client";

import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { FaRegEye, FaRegEyeSlash } from "react-icons/fa6";
import { RiArrowRightSFill, RiArrowDropLeftFill } from "react-icons/ri";
import { AiOutlineLoading3Quarters } from "react-icons/ai";
import { SiMinutemailer } from "react-icons/si";
import { REGEXP_ONLY_DIGITS } from "input-otp";
import { useState, useTransition } from "react";
import Link from "next/link";
import { usePathname, useRouter } from "next/navigation";
import {
  FormMessage,
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  Input,
  useToast,
  Button,
  InputOTP,
  InputOTPGroup,
  InputOTPSlot,
  InputOTPSeparator,
} from "@makefy/ui";
import { cn } from "@makefy/ui/lib/utils";
import { verifyOtp } from "@/app/actions/auth";

const FormSchema = z
  .object({
    email: z.string().email({ message: "Invalid Email Address" }),
    password: z.string().min(6, { message: "Password is too short" }),
    "confirm-pass": z.string().min(6, { message: "Password is too short" }),
  })
  .refine(
    (data) => {
      if (data["confirm-pass"] !== data.password) {
        console.log("running");
        return false;
      } else {
        return true;
      }
    },
    { message: "Password does't match", path: ["confirm-pass"] },
  );

export function SignUpForm({ redirectTo }: { redirectTo: string }) {
  const queryString =
    typeof window !== "undefined" ? window.location.search : "";
  const urlParams = new URLSearchParams(queryString);

  const verify = urlParams.get("verify");
  const existEmail = urlParams.get("email");

  const [passwordReveal, setPasswordReveal] = useState(false);
  const [isConfirmed, setIsConfirmed] = useState(verify === "true");
  const [verifyStatus, setVerifyStatus] = useState<string>("");
  const [isPending, startTransition] = useTransition();
  const [isSendAgain, startSendAgain] = useTransition();
  const pathname = usePathname();
  const router = useRouter();
  const form = useForm<z.infer<typeof FormSchema>>({
    resolver: zodResolver(FormSchema),
    defaultValues: {
      email: "",
      password: "",
      "confirm-pass": "",
    },
  });

  const { toast } = useToast();

  async function postEmail({
    email,
    password,
  }: {
    email: string;
    password: string;
  }) {
    const requestOptions = {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ email, password }),
    };
    // Send the POST request
    const res = await fetch("/api/auth/signup", requestOptions);
    return res.json();
  }

  async function sendVerifyEmail(data: z.infer<typeof FormSchema>) {
    const json = await postEmail({
      email: data.email,
      password: data.password,
    });
    if (!json.error) {
      router.replace(
        (pathname || "/") + "?verify=true&email=" + form.getValues("email"),
      );
      setIsConfirmed(true);
    } else {
      if (json.error?.code) {
        toast({
          title: json.error.code,
          variant: "destructive",
        });
      } else if (json.error?.message) {
        toast({
          title: json.error.message,
          variant: "destructive",
        });
      }
    }
  }

  const inputOptClass = cn({
    " border-green-500": verifyStatus === "success",
    " border-red-500": verifyStatus === "failed",
  });

  function onSubmit(data: z.infer<typeof FormSchema>) {
    if (!isPending) {
      startTransition(async () => {
        await sendVerifyEmail(data);
      });
    }
  }

  return (
    <div
      className={` items-center space-x-5 overflow-hidden whitespace-nowrap  p-5 align-top   ${
        isPending ? "animate-pulse" : ""
      }`}
    >
      <Form {...form}>
        <form
          onSubmit={form.handleSubmit(onSubmit)}
          className={cn(`inline-block w-full transform transition-all`, {
            "-translate-x-[110%]": isConfirmed,
          })}
        >
          <FormField
            control={form.control}
            name="email"
            render={({ field }) => (
              <FormItem>
                <FormLabel className=" test-sm  font-semibold">
                  Email Address
                </FormLabel>
                <FormControl>
                  <Input
                    className="h-8"
                    placeholder="example@gmail.com"
                    type="email"
                    {...field}
                  />
                </FormControl>
                <FormMessage className="text-red-500" />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="password"
            render={({ field }) => (
              <FormItem>
                <FormLabel className="text-sm font-semibold">
                  Password
                </FormLabel>
                <FormControl>
                  <div className=" relative">
                    <Input
                      className="h-8"
                      type={passwordReveal ? "text" : "password"}
                      {...field}
                    />
                    <div
                      className="group absolute right-2 top-[30%] cursor-pointer"
                      onClick={() => setPasswordReveal(!passwordReveal)}
                    >
                      {passwordReveal ? (
                        <FaRegEye className=" transition-all group-hover:scale-105" />
                      ) : (
                        <FaRegEyeSlash className=" transition-all group-hover:scale-105" />
                      )}
                    </div>
                  </div>
                </FormControl>
                <FormMessage className="text-red-500" />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="confirm-pass"
            render={({ field }) => (
              <FormItem>
                <FormLabel className="text-sm font-semibold">
                  Confirm Password
                </FormLabel>
                <FormControl>
                  <div className=" relative">
                    <Input
                      className="h-8"
                      type={passwordReveal ? "text" : "password"}
                      {...field}
                    />
                    <div
                      className="group absolute right-2 top-[30%] cursor-pointer"
                      onClick={() => setPasswordReveal(!passwordReveal)}
                    >
                      {passwordReveal ? (
                        <FaRegEye className=" transition-all group-hover:scale-105" />
                      ) : (
                        <FaRegEyeSlash className=" transition-all group-hover:scale-105" />
                      )}
                    </div>
                  </div>
                </FormControl>
                <FormMessage className="text-red-500" />
              </FormItem>
            )}
          />
          <Button type="submit" className="flex w-full gap-2">
            <AiOutlineLoading3Quarters
              className={cn(!isPending ? "hidden" : "block animate-spin")}
            />
            Continue
            <RiArrowRightSFill className=" size-4" />
          </Button>
          <div className="mt-4 text-center text-sm">
            <h1>
              Already have account?{" "}
              <Link
                href={redirectTo ? `/login?next=` + redirectTo : "/login"}
                className="underline"
              >
                Log in
              </Link>
            </h1>
          </div>
        </form>
      </Form>
      {/* verify email */}
      <div
        className={cn(
          `inline-block h-80 w-full transform space-y-3  text-wrap align-top transition-all`,
          isConfirmed ? "-translate-x-[105%]" : "translate-x-0",
        )}
      >
        <div className="flex h-full flex-col items-center justify-center space-y-5">
          <SiMinutemailer className=" size-8" />

          <h1 className="text-center text-2xl font-semibold">Verify email</h1>
          <p className="text-center text-sm">
            {" A verification code has been sent to "}
            <span className="font-bold">
              {verify === "true" ? existEmail : form.getValues("email")}
            </span>
          </p>

          <InputOTP
            pattern={REGEXP_ONLY_DIGITS}
            id="input-otp"
            maxLength={6}
            onChange={async (value) => {
              if (value.length === 6) {
                document.getElementById("input-otp")?.blur();
                const res = await verifyOtp({
                  email: form.getValues("email"),
                  otp: value,
                  type: "email",
                });
                const { error } = JSON.parse(res);
                if (error) {
                  setVerifyStatus("failed");
                } else {
                  setVerifyStatus("success");
                  router.push(redirectTo);
                }
              }
            }}
          >
            <InputOTPGroup>
              <InputOTPSlot index={0} className={inputOptClass} />
              <InputOTPSlot index={1} className={inputOptClass} />
              <InputOTPSlot index={2} className={inputOptClass} />
            </InputOTPGroup>
            <InputOTPSeparator />
            <InputOTPGroup>
              <InputOTPSlot index={3} className={inputOptClass} />
              <InputOTPSlot index={4} className={cn(inputOptClass)} />
              <InputOTPSlot index={5} className={cn(inputOptClass)} />
            </InputOTPGroup>
          </InputOTP>
          <div className="flex gap-2 text-sm">
            <p>{"Didn't work?"} </p>
            <span
              className="flex cursor-pointer items-center gap-2 text-blue-400 transition-all hover:underline "
              onClick={async () => {
                if (!isSendAgain) {
                  startSendAgain(async () => {
                    if (!form.getValues("password")) {
                      const json = await postEmail({
                        email: form.getValues("email"),
                        password: form.getValues("password"),
                      });

                      if (json.error) {
                        toast({
                          title: "Fail to resend email",
                          variant: "destructive",
                        });
                      } else {
                        toast({
                          title: "Please check your email.",
                        });
                      }
                    } else {
                      router.replace(pathname || "/register");
                      form.setValue("email", existEmail || "");
                      form.setValue("password", "");
                      setIsConfirmed(false);
                    }
                  });
                }
              }}
            >
              <AiOutlineLoading3Quarters
                className={`${!isSendAgain ? "hidden" : "block animate-spin"}`}
              />
              Send me another code.
            </span>
          </div>
          <Button
            type="submit"
            className="flex h-8 w-full items-center gap-2 bg-indigo-500 text-white transition-all hover:bg-indigo-600"
            onClick={async () => {
              setIsConfirmed(false);
            }}
          >
            <RiArrowDropLeftFill className=" size-5" />
            Change Email
          </Button>
        </div>
      </div>
    </div>
  );
}


================================================
File: apps/chat-with-pdf/app/components/pages-containers/signup/social.tsx
================================================
"use client";

import React from "react";
import { IoLogoGithub } from "react-icons/io5";
import { Button, useToast } from "@makefy/ui";
import { createSupabaseClient } from "@makefy/supabase/client";

export function Social({ redirectTo }: { redirectTo: string }) {
  const { toast } = useToast();

  const loginWithProvider = async (provider: "github" | "google") => {
    const supbase = createSupabaseClient();
    const { error, data } = await supbase.auth.signInWithOAuth({
      provider,
      options: {
        redirectTo:
          window.location.origin + `/auth/callback?next=` + redirectTo,
      },
    });
    console.log({ data });
    if (error) {
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive",
      });
    }
  };

  return (
    <div className="flex w-full flex-col gap-2">
      <Button
        className="flex h-8 w-full items-center gap-5"
        variant="outline"
        onClick={() => loginWithProvider("github")}
      >
        <IoLogoGithub />
        Github
      </Button>
      {/* <Button
        className="flex h-8 w-full items-center gap-2"
        variant="outline"
        onClick={() => loginWithProvider("google")}
      >
        <FcGoogle />
        Google
      </Button> */}
    </div>
  );
}


================================================
File: apps/chat-with-pdf/app/components/pdf/pdf-toolbar.tsx
================================================
import { PAGE_ZOOM_TYPE, PdfData } from "@/components/pdf/pdf-viewer";
import {
  Button,
  Input,
  Toggle,
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@makefy/ui";
import { cn } from "@makefy/ui/lib/utils";
import {
  ArrowLeftIcon,
  ArrowRightIcon,
  ZoomInIcon,
  ZoomOutIcon,
} from "@radix-ui/react-icons";
import { UnfoldVerticalIcon } from "lucide-react";

type Props = {
  className?: string;
  pdfData: PdfData;
  page: number;
  zoom?: number;
  changePageOnScroll?: boolean;
  onPageChange?: (page: number) => void;
  onZoomChange?: (zoomType: PAGE_ZOOM_TYPE) => void;
  onChangePageOnScroll?: (enabled: boolean) => void;
};

export function PdfToolbar({
  className,
  pdfData,
  page,
  zoom = 1,
  changePageOnScroll = false,
  onPageChange = () => null,
  onZoomChange = (zoomScale: number) => null,
  onChangePageOnScroll = () => null,
}: Props) {
  const zoomFormatted = `${zoom * 100}%`;

  function handlePageChange(newPage: number) {
    if (newPage < 1 || newPage > pdfData?.numPages) return;
    onPageChange(newPage);
  }

  function handlePageZoom(zoomType: PAGE_ZOOM_TYPE) {
    onZoomChange(zoomType);
  }

  return (
    <div className={cn("border-border border-b-[1px] p-2", className)}>
      <div className="flex items-center justify-between">
        <TooltipProvider delayDuration={0}>
          <div className="flex items-center gap-2">
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  className="flex-shrink-0"
                  size="icon"
                  variant="ghost"
                  onClick={() => handlePageChange(page - 1)}
                  disabled={page - 1 < 1}
                >
                  <ArrowLeftIcon className="h-5 w-5" />
                </Button>
              </TooltipTrigger>
              <TooltipContent side="bottom">Previous page</TooltipContent>
            </Tooltip>
            <div className="text-muted-foreground flex flex-row items-center gap-2">
              <Input
                className="h-8 w-16 appearance-none p-0 text-center"
                value={page}
                type="number"
                min={1}
                max={pdfData?.numPages || 1}
                disabled={!pdfData}
                onChange={(event) => handlePageChange(+event.target.value)}
              />
              <span>of {pdfData?.numPages || 1}</span>
            </div>
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  className="flex-shrink-0"
                  size="icon"
                  variant="ghost"
                  onClick={() => handlePageChange(page + 1)}
                  disabled={page + 1 > pdfData?.numPages}
                >
                  <ArrowRightIcon className="h-5 w-5" />
                </Button>
              </TooltipTrigger>
              <TooltipContent side="bottom">Next page</TooltipContent>
            </Tooltip>
            {/* <Separator className="h-6" orientation="vertical" /> */}
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  className="flex-shrink-0"
                  size="icon"
                  variant="ghost"
                  disabled={zoom === 0.25 || !pdfData}
                  onClick={() => handlePageZoom(PAGE_ZOOM_TYPE.OUT)}
                >
                  <ZoomOutIcon className="h-5 w-5" />
                </Button>
              </TooltipTrigger>
              <TooltipContent side="bottom">Zoom Out</TooltipContent>
            </Tooltip>
            <span className="text-muted-foreground">{zoomFormatted}</span>
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  className="flex-shrink-0"
                  size="icon"
                  variant="ghost"
                  disabled={zoom === 2 || !pdfData}
                  onClick={() => handlePageZoom(PAGE_ZOOM_TYPE.IN)}
                >
                  <ZoomInIcon className="h-5 w-5" />
                </Button>
              </TooltipTrigger>
              <TooltipContent side="bottom">Zoom In</TooltipContent>
            </Tooltip>
          </div>
          <div className="flex items-center gap-2">
            <Tooltip>
              <TooltipTrigger asChild>
                <Toggle
                  className="aria-[pressed=true]:bg-accent aria-[pressed=true]:text-accent-foreground flex-shrink-0 hover:text-current"
                  onPressedChange={onChangePageOnScroll}
                  pressed={changePageOnScroll}
                  disabled={!pdfData}
                >
                  <UnfoldVerticalIcon className="h-5 w-5" />
                </Toggle>
              </TooltipTrigger>
              <TooltipContent side="bottom">
                Change page on scroll
              </TooltipContent>
            </Tooltip>
          </div>
        </TooltipProvider>
      </div>
    </div>
  );
}


================================================
File: apps/chat-with-pdf/app/components/pdf/pdf-viewer.tsx
================================================
"use client";

import { updateChatMessages } from "@/app/actions/update-chat-messages";
import {
  Button,
  Popover,
  PopoverContent,
  PopoverPortal,
  Skeleton,
} from "@makefy/ui";
import { cn } from "@makefy/ui/lib/utils";
import { useGlobalChat } from "hooks/use-global-chat";
import { MessageSquareQuoteIcon } from "lucide-react";
import { PDFDocument } from "pdf-lib";
import { useRef, useState } from "react";
import { Document, Page, pdfjs } from "react-pdf";
import "react-pdf/dist/Page/AnnotationLayer.css";
import "react-pdf/dist/Page/TextLayer.css";
import { DocumentCallback } from "react-pdf/dist/cjs/shared/types";
import { useOnClickOutside } from "usehooks-ts";
import { PdfToolbar } from "./pdf-toolbar";
import { useTheme } from "next-themes";

pdfjs.GlobalWorkerOptions.workerSrc = `/api/pdf-helper?url=unpkg.com/pdfjs-dist@${pdfjs.version}/build/pdf.worker.min.mjs`;

export const documentOptions = {
  cMapUrl: `/api/pdf-helper?url=unpkg.com/pdfjs-dist@${pdfjs.version}/cmaps/`,
};

export const enum PAGE_ZOOM_TYPE {
  IN,
  OUT,
}

type SelectedTextOptions = {
  selectedText: string;
  coordinates: {
    top: number;
    left: number;
  };
};

export type PdfData = {
  numPages: number;
  title: string;
};

export function PdfViewer({ className }: { className?: string }) {
  const pdfContainerRef = useRef<HTMLDivElement>(null);
  const pdfPagesRef = useRef<HTMLDivElement[] | null[]>([]);
  const popoverRef = useRef<HTMLDivElement>(null);
  const [pdfData, setPdfData] = useState<PdfData | null>(null);
  const {
    globalContext: { chatData, setExtraData, documentState, setDocumentState },
  } = useGlobalChat();
  useOnClickOutside(popoverRef, () => setSelectedTextOptions(null));
  /* Tools */
  const [currentZoom, setCurrentZoom] = useState<number>(1);
  const [enableChangePageOnScroll, setEnableChangePageOnScroll] =
    useState<boolean>(true);

  /* PDF actions */
  const [selectedTextOptions, setSelectedTextOptions] =
    useState<SelectedTextOptions | null>(null);

  async function handlePdfData(pdf: DocumentCallback) {
    const pdfBytes = await pdf.getData();

    const pdfDoc = await PDFDocument.load(pdfBytes, { updateMetadata: false });

    const title = pdfDoc.getTitle() ?? "Untitled PDF";
    const numPages = pdfDoc.getPageCount();

    const documentMetadata = {
      title,
      numPages,
    };

    if (!chatData.documentMetadata) {
      updateChatMessages({
        documentId: chatData.id as string,
        documentMetadata,
      });
    }

    setPdfData(documentMetadata);
  }

  function handlePdfScroll(event: WheelEvent) {
    const isControlPressed = event.ctrlKey;

    const scrollDirection = event.deltaY > 0 ? "down" : "up";

    if (isControlPressed) {
      handlePageZoomChange(
        scrollDirection === "down" ? PAGE_ZOOM_TYPE.OUT : PAGE_ZOOM_TYPE.IN,
      );
      return;
    }

    if (!enableChangePageOnScroll) return;

    const pdfContainerEl = pdfContainerRef.current;

    let isScrollAtBottom;

    if (pdfContainerEl)
      isScrollAtBottom =
        Math.abs(
          pdfContainerEl?.scrollHeight -
            (pdfContainerEl?.scrollTop + pdfContainerEl?.clientHeight),
        ) <= 1;

    const isScrollAtTop = pdfContainerEl?.scrollTop === 0;

    const canGoNextPage = scrollDirection === "down" && isScrollAtBottom;
    const canGoPrevPage = scrollDirection === "up" && isScrollAtTop;

    if (canGoNextPage || canGoPrevPage) {
      const safeNextPage = Math.min(
        pdfData?.numPages as number,
        Math.max(
          1,
          documentState.currentPage + (scrollDirection === "down" ? 1 : -1),
        ),
      );
      setDocumentState({ currentPage: safeNextPage });

      return null;
    }
  }

  function handlePageNumberChange(pageNumber: number) {
    setDocumentState({ currentPage: pageNumber });
    pdfPagesRef.current[pageNumber - 1]?.scrollIntoView();
  }

  function handlePageZoomChange(zoomType: PAGE_ZOOM_TYPE) {
    const zoom =
      zoomType === PAGE_ZOOM_TYPE.IN ? currentZoom + 0.25 : currentZoom - 0.25;
    const limitedZoom = Math.min(2, Math.max(0.25, zoom));

    setCurrentZoom(limitedZoom);
  }

  function handleTextSelection() {
    const selection = window.getSelection();
    // Get the selected text
    const selectedText = selection?.toString();

    // Get selection coordinates
    const range = selection?.getRangeAt(0);
    const rect = range?.getBoundingClientRect();

    const textOptions = selectedText
      ? {
          selectedText: selectedText as string,
          coordinates: {
            top: (rect?.top as number) - 50,
            left: rect?.left as number,
          },
        }
      : null;

    setSelectedTextOptions(textOptions);
  }

  function handleAskAssistant() {
    // remove text selection
    window.getSelection()?.removeAllRanges();
    // close popover
    setSelectedTextOptions(null);
    setExtraData({
      quotedText: selectedTextOptions?.selectedText,
      page: documentState.currentPage,
    });
  }

  return (
    <div className={cn("h-full w-full lg:block", className)}>
      <div className="flex h-full flex-col overflow-hidden">
        <PdfToolbar
          pdfData={pdfData as PdfData}
          zoom={currentZoom}
          page={documentState.currentPage}
          changePageOnScroll={enableChangePageOnScroll}
          onPageChange={handlePageNumberChange}
          onZoomChange={handlePageZoomChange}
          onChangePageOnScroll={setEnableChangePageOnScroll}
        />
        <div
          className="bg-muted flex-1 overflow-auto p-4"
          ref={pdfContainerRef}
        >
          <div className="relative flex h-full gap-4">
            {!pdfData && (
              <Skeleton className="absolute left-0 top-0 block h-full w-full" />
            )}

            {chatData.documentUrl && (
              <Document
                options={documentOptions}
                file={`/api/pdf-helper?url=${chatData.documentUrl}`}
                onLoadSuccess={handlePdfData}
                onWheel={handlePdfScroll}
                loading={null}
                noData={null}
                error={null}
                className="flex w-full flex-col items-center gap-4"
              >
                <Popover open={!!selectedTextOptions}>
                  <Page
                    pageNumber={documentState.currentPage}
                    className="border-border max-w-max border shadow-lg"
                    scale={currentZoom}
                    onMouseUp={handleTextSelection}
                  />
                  <PopoverPortal>
                    <PopoverContent
                      className="absolute z-20 w-fit p-1"
                      onOpenAutoFocus={(e) => e.preventDefault()}
                      style={{ ...(selectedTextOptions?.coordinates || {}) }}
                      ref={popoverRef}
                    >
                      <Button
                        className="z-30 flex gap-2"
                        variant="ghost"
                        size="sm"
                        onClick={handleAskAssistant}
                      >
                        <MessageSquareQuoteIcon className="h-4 w-4" />
                        Ask the assistant
                      </Button>
                    </PopoverContent>
                  </PopoverPortal>
                </Popover>
              </Document>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}


================================================
File: apps/chat-with-pdf/app/components/sidebar/app-sidebar.tsx
================================================
"use client";

import {
  BadgeCheck,
  Bell,
  ChevronsUpDown,
  CreditCard,
  LogOut,
  Plus,
  Sparkles,
} from "lucide-react";

import { NewDocumentDialog } from "@/components/header/document-title/new-document-dialog/new-document-dialog";
import { createSupabaseClient } from "@makefy/supabase/client";
import Logo from "@/public/logo.svg";
import {
  Avatar,
  AvatarFallback,
  AvatarImage,
} from "@makefy/ui/components/avatar";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@makefy/ui/components/dropdown-menu";
import {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarHeader,
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarRail,
} from "@makefy/ui/components/sidebar";
import type { User } from "@makefy/supabase/types";
import Link from "next/link";
import { useRouter } from "next/navigation";
import { useState } from "react";
import RecentConversationsSidebarGroup from "./recent-conversation-sidebar-group";
import { SecondarySidebarMenu } from "./secondary-sidebar-menu";

export function AppSidebar({ userInfo }: { userInfo: User }) {
  const router = useRouter();
  const [isNewChatDialogOpen, setIsNewChatDialogOpen] = useState(false);

  function handleNewChatDialogToggle() {
    setIsNewChatDialogOpen(!isNewChatDialogOpen);
  }

  function getAvatarFallback() {
    if (!userInfo) return "";
    const userFullName =
      userInfo.user_metadata?.full_name || userInfo.user_metadata?.name;
    const userEmail = userInfo.email;
    const userFallback = (userFullName || userEmail)?.toUpperCase();

    return userFallback
      ?.split(" ")
      .map((name: string) => name[0])
      .join("");
  }

  async function handleLogout() {
    const supabase = createSupabaseClient();

    await supabase.auth.signOut();

    router.push("/login");
  }

  return (
    <>
      <Sidebar className="z-20" collapsible="icon">
        <SidebarHeader className="transition-all duration-300 group-data-[collapsible=icon]:py-3">
          <SidebarMenu>
            <SidebarMenuItem>
              <SidebarMenuButton size="lg" asChild>
                <Link href="/">
                  <div className="bg-foreground text-sidebar-primary-foreground flex aspect-square size-8 items-center justify-center rounded-md">
                    <Logo className="fill-accent h-auto w-5" />
                  </div>
                  <div className="grid flex-1 text-left text-sm leading-tight">
                    <span className="truncate font-semibold">
                      Chat with PDF
                    </span>
                    <span className="truncate text-xs">by Makefy ✨</span>
                  </div>
                </Link>
              </SidebarMenuButton>
            </SidebarMenuItem>
          </SidebarMenu>
        </SidebarHeader>
        <SidebarContent>
          <SidebarGroup className="group-data-[collapsible=icon]:hidden">
            <SidebarMenu>
              <SidebarMenuItem>
                <SidebarMenuButton
                  tooltip="New conversation"
                  variant="outline"
                  onClick={handleNewChatDialogToggle}
                >
                  <Plus />
                  <span>New conversation</span>
                </SidebarMenuButton>
              </SidebarMenuItem>
            </SidebarMenu>
          </SidebarGroup>
          <RecentConversationsSidebarGroup />
          <SecondarySidebarMenu />
        </SidebarContent>
        <SidebarFooter>
          <SidebarMenu>
            <SidebarMenuItem>
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <SidebarMenuButton
                    size="lg"
                    className="data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground"
                  >
                    <Avatar className="h-8 w-8 rounded-lg">
                      <AvatarImage
                        src={userInfo?.user_metadata?.avatar_url}
                        alt={userInfo?.user_metadata?.full_name}
                      />
                      <AvatarFallback className="rounded-lg">
                        {getAvatarFallback()}
                      </AvatarFallback>
                    </Avatar>
                    <div className="grid flex-1 text-left text-sm leading-tight">
                      <span className="truncate font-semibold">
                        {userInfo?.user_metadata?.full_name ||
                          userInfo?.user_metadata?.name ||
                          "Unknown User"}
                      </span>
                      <span className="truncate text-xs">
                        {userInfo?.email}
                      </span>
                    </div>
                    <ChevronsUpDown className="ml-auto size-4" />
                  </SidebarMenuButton>
                </DropdownMenuTrigger>
                <DropdownMenuContent
                  className="w-[--radix-dropdown-menu-trigger-width] min-w-56 rounded-lg"
                  side="right"
                  align="end"
                  sideOffset={4}
                >
                  <DropdownMenuLabel className="p-0 font-normal">
                    <div className="flex items-center gap-2 px-1 py-1.5 text-left text-sm">
                      <Avatar className="h-8 w-8 rounded-lg">
                        <AvatarImage
                          src={userInfo?.user_metadata?.avatar_url}
                          alt={userInfo?.user_metadata?.full_name}
                        />
                        <AvatarFallback className="rounded-lg">
                          {getAvatarFallback()}
                        </AvatarFallback>
                      </Avatar>
                      <div className="grid flex-1 text-left text-sm leading-tight">
                        <span className="truncate font-semibold">
                          {userInfo?.user_metadata?.full_name ||
                            userInfo?.user_metadata?.name ||
                            "Unknown User"}
                        </span>
                        <span className="truncate text-xs">
                          {userInfo?.email}
                        </span>
                      </div>
                    </div>
                  </DropdownMenuLabel>
                  <DropdownMenuSeparator />
                  <DropdownMenuGroup>
                    <DropdownMenuItem disabled>
                      <Sparkles />
                      Upgrade to Pro
                    </DropdownMenuItem>
                  </DropdownMenuGroup>
                  <DropdownMenuSeparator />
                  <DropdownMenuGroup>
                    <DropdownMenuItem disabled>
                      <BadgeCheck />
                      Account
                    </DropdownMenuItem>
                    <DropdownMenuItem disabled>
                      <CreditCard />
                      Billing
                    </DropdownMenuItem>
                    <DropdownMenuItem disabled>
                      <Bell />
                      Notifications
                    </DropdownMenuItem>
                  </DropdownMenuGroup>
                  <DropdownMenuSeparator />
                  <DropdownMenuItem onClick={handleLogout}>
                    <LogOut />
                    Log out
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            </SidebarMenuItem>
          </SidebarMenu>
        </SidebarFooter>
        <SidebarRail />
      </Sidebar>
      <NewDocumentDialog
        isOpen={isNewChatDialogOpen}
        onOpenChange={handleNewChatDialogToggle}
      />
    </>
  );
}


================================================
File: apps/chat-with-pdf/app/components/sidebar/recent-conversation-sidebar-group.tsx
================================================
import { createSupabaseClient } from "@makefy/supabase/client";
import {
  Button,
  SidebarGroup,
  SidebarGroupLabel,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuButton,
  SidebarMenuItem,
} from "@makefy/ui";
import { Tables } from "@makefy/supabase/types";
import { ChevronRight, MessageSquareIcon, MoreHorizontal } from "lucide-react";
import Link from "next/link";
import { useEffect, useState } from "react";

type RecentConversation = Record<
  "id" | "name",
  Tables<"Chat">["id"] | Tables<"Document">["name"]
>;

export default function RecentConversationsSidebarGroup() {
  const [recentConversations, setRecentConversations] = useState<
    RecentConversation[]
  >([]);

  useEffect(() => {
    getRecentConversations();
  }, []);

  async function getRecentConversations() {
    const supabase = createSupabaseClient();

    const { data, error } = await supabase
      .from("Chat")
      .select("id, updatedAt")
      .order("updatedAt", { ascending: false })
      .limit(3);

    if (error) {
      console.error(error);
      return [];
    }

    if (data) {
      const { data: documents, error } = await supabase
        .from("Document")
        .select("name, chatId")
        .in(
          "chatId",
          data.map((chat) => chat.id),
        );

      if (error) {
        console.error(error);
        return [];
      }

      const recentConversations = data.map((chat, index) => ({
        id: chat.id,
        name:
          documents.find((document) => document.chatId === chat.id)?.name ?? "",
      }));

      setRecentConversations(recentConversations);
    }
  }

  return (
    <SidebarGroup className="group-data-[collapsible=icon]:hidden">
      <SidebarGroupLabel>Recent conversations</SidebarGroupLabel>
      <SidebarMenu>
        {recentConversations.map((conversation) => (
          <SidebarMenuItem key={conversation.id}>
            <SidebarMenuButton asChild>
              <Link
                key={conversation.id}
                className="hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground block select-none space-y-1 overflow-hidden truncate rounded-md px-2 py-3 text-sm leading-none no-underline outline-none transition-colors"
                href={`/chat/${conversation.id}`}
              >
                <MessageSquareIcon className="h-4 w-4" />
                {conversation.name}
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
        ))}
        <SidebarMenuItem>
          <SidebarMenuButton className="text-sidebar-foreground/70" asChild>
            <Button variant="link" asChild className="justify-start">
              <Link href="/chat">
                <ChevronRight className="text-sidebar-foreground/70" />
                <span>See all</span>
              </Link>
            </Button>
          </SidebarMenuButton>
        </SidebarMenuItem>
      </SidebarMenu>
    </SidebarGroup>
  );
}


================================================
File: apps/chat-with-pdf/app/components/sidebar/secondary-sidebar-menu.tsx
================================================
import {
  SidebarGroup,
  SidebarGroupContent,
  SidebarMenu,
  SidebarMenuItem,
  SidebarMenuButton,
  ToggleGroup,
  ToggleGroupItem,
  SidebarMenuAction,
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
} from "@makefy/ui";
import { cn } from "@makefy/ui/lib/utils";
import {
  LaptopMinimalIcon,
  MessageSquareIcon,
  MoonIcon,
  MoreHorizontal,
  Plus,
  Settings2Icon,
  SunIcon,
  SunMoonIcon,
} from "lucide-react";
import { useTheme } from "next-themes";
import { FeedbackDialog } from "../header/feedback-dialog";

const ThemeIconsMap = {
  system: LaptopMinimalIcon,
  light: SunIcon,
  dark: MoonIcon,
};

const themeIconList = Object.keys(ThemeIconsMap);

export function SecondarySidebarMenu() {
  const { theme, setTheme } = useTheme();

  const CurrentThemeIcon = ThemeIconsMap[theme as keyof typeof ThemeIconsMap];

  return (
    <SidebarGroup className="mt-auto">
      <SidebarGroupContent>
        <SidebarMenu>
          <SidebarMenuItem>
            <FeedbackDialog
              triggerEl={
                <SidebarMenuButton tooltip="Feedback">
                  <MessageSquareIcon className="h-4 w-4" />
                  Feedback
                </SidebarMenuButton>
              }
            />
          </SidebarMenuItem>
          <SidebarMenuItem>
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <SidebarMenuButton tooltip="Theme">
                  <span className="flex items-center justify-start gap-2">
                    <CurrentThemeIcon className="h-4 w-4" />
                    Theme
                  </span>
                  <SidebarMenuAction>
                    <Settings2Icon className="h-4 w-4" />
                  </SidebarMenuAction>
                </SidebarMenuButton>
              </DropdownMenuTrigger>
              <DropdownMenuContent side="right" align="end">
                {themeIconList.map((themeIcon) => {
                  const ThemeIcon =
                    ThemeIconsMap[themeIcon as keyof typeof ThemeIconsMap];
                  return (
                    <DropdownMenuItem
                      key={themeIcon}
                      className={cn("cursor-pointer", {
                        "bg-accent": theme === themeIcon,
                      })}
                      onClick={() => setTheme(themeIcon)}
                    >
                      <ThemeIcon className="h-4 w-4" />
                      {themeIcon}
                    </DropdownMenuItem>
                  );
                })}
              </DropdownMenuContent>
            </DropdownMenu>
          </SidebarMenuItem>
        </SidebarMenu>
      </SidebarGroupContent>
    </SidebarGroup>
  );
}


================================================
File: apps/chat-with-pdf/app/components/ui/container.tsx
================================================
import { cn } from "@makefy/ui/lib/utils";

type ContainerProps = {
  children: React.ReactNode;
  className?: string;
};

export function Container({ children, className }: ContainerProps) {
  return (
    <div className={cn("flex w-full justify-center", className)}>
      <div className={"w-full max-w-screen-lg"}>{children}</div>
    </div>
  );
}


================================================
File: apps/chat-with-pdf/app/components/ui/heading.tsx
================================================
import { Button, Skeleton } from "@makefy/ui";
import { ArrowLeft } from "lucide-react";
import Link from "next/link";
import { ReactElement } from "react";

interface HeadingProps {
  loading?: boolean;
  title: string;
  description?: string;
  actionButton?: ReactElement;
  backButton?: boolean;
}

export function Heading({
  loading,
  title,
  description,
  actionButton,
  backButton,
}: HeadingProps) {
  return (
    <div className="flex flex-row items-center justify-between gap-4">
      <div className="flex flex-col gap-2">
        <div className="flex flex-row items-center gap-2">
          {!loading && backButton && (
            <Button
              asChild
              variant="ghost"
              size="icon"
              className="box-content h-7 w-7 hover:bg-transparent"
            >
              <Link href="./">
                <ArrowLeft className="text-foreground" />
              </Link>
            </Button>
          )}
          {loading && backButton && <Skeleton className="h-7 w-7" />}
          {!loading && title && (
            <h2 className="text-3xl font-bold tracking-tight">{title}</h2>
          )}
          {loading && <Skeleton className="h-8 w-32" />}
        </div>
        {!loading && description && (
          <p className="text-muted-foreground text-sm">{description}</p>
        )}
        {loading && <Skeleton className="h-4 w-72" />}
      </div>
      {!loading && actionButton}
      {loading && <Skeleton className="h-10 w-32" />}
    </div>
  );
}


================================================
File: apps/chat-with-pdf/app/components/ui/logo.tsx
================================================
import { cn } from "@makefy/ui/lib/utils";

type LogoProps = {
  className?: string;
};

export function Logo({ className }: LogoProps) {
  return (
    <div
      className={cn(
        "flex max-w-[100px] flex-shrink-0 flex-col gap-1 text-sm leading-none",
        className,
      )}
    >
      Chat with PDF
      <span className="text-muted-foreground text-right text-[8px] leading-none">
        by Makefy ✨
      </span>
    </div>
  );
}


================================================
File: apps/chat-with-pdf/app/components/ui/user-avatar.tsx
================================================
import {
  Avatar,
  AvatarFallback,
  AvatarImage,
} from "@makefy/ui/components/avatar";
import { createSupabaseServer } from "@makefy/supabase/server";
import { cn } from "@makefy/ui/lib/utils";

interface UserAvatarProps {
  className?: string;
}

export async function UserAvatar({ className }: UserAvatarProps) {
  const supabase = createSupabaseServer();
  const {
    data: { user },
    error,
  } = await supabase.auth.getUser();

  function getAvatarFallback() {
    if (!user) return "";
    const userFullName =
      user.user_metadata?.full_name || user.user_metadata?.name;
    const userEmail = user.email;
    const userFallback = (userFullName || userEmail)?.toUpperCase();

    return userFallback
      ?.split(" ")
      .map((name: string) => name[0])
      .join("");
  }

  if (error) {
    console.error(error);
    return (
      <Avatar className={className}>
        <AvatarFallback>!</AvatarFallback>
      </Avatar>
    );
  }

  return (
    <Avatar className={cn("h-8 w-8", className)}>
      <AvatarImage src={user?.user_metadata?.avatar_url} />
      <AvatarFallback>{getAvatarFallback()}</AvatarFallback>
    </Avatar>
  );
}


================================================
File: apps/chat-with-pdf/app/context/chat-context.tsx
================================================
"use client";

import { MESSAGE_TYPE } from "@/components/chat/constants/message-type";
import { Message, useChat, UseChatOptions } from "ai/react";
import { useParams } from "next/navigation";
import {
  createContext,
  Dispatch,
  SetStateAction,
  useEffect,
  useRef,
  useState,
} from "react";
import { updateChatMessages } from "../actions/update-chat-messages";
import { Tables } from "@makefy/supabase/types";
import { createSupabaseClient } from "@makefy/supabase/client";
import { generateDocumentTitle as generateDocumentTitleAction } from "../actions/generate-document-title";

const EMPTY_CHAT_DATA: Partial<Tables<"Chat">> = {
  id: "",
  documentMetadata: "",
  documentUrl: "",
  messages: [],
};

export const ChatContext = createContext({
  globalContext: {
    chatData: EMPTY_CHAT_DATA,
    isLoading: false,
    extraData: {} as Record<string, unknown>,
    setExtraData: (() => null) as Dispatch<
      SetStateAction<Record<string, unknown>>
    >,
    documentState: {
      currentPage: 1,
    },
    setDocumentState: (() => null) as Dispatch<
      SetStateAction<{ currentPage: number }>
    >,
  },
  initOptions: {} as UseChatOptions,
  useChatReturn: {} as ReturnType<typeof useChat>,
});

type ChatProviderProps = {
  children: React.ReactNode;
  chatData: Partial<Tables<"Chat">>;
};

export function ChatProvider({ children, chatData }: ChatProviderProps) {
  const [isLoading, setIsLoading] = useState(true);
  const [extraData, setExtraData] = useState<Record<string, unknown>>({});
  const [documentState, setDocumentState] = useState({
    currentPage: 1,
  });
  const params = useParams();
  const initOptions = {
    id: chatData.id,
    body: {
      documentId: params.documentId as string,
    },
  };
  const { ...useChatReturn } = useChat({
    ...initOptions,
    onFinish: sendPreloadedPrompts,
  });

  const preloadPrompts = useRef([
    {
      message:
        "Introduce yourself and explain your purpose here. Mention that you're here to assist with the provided document. Avoid mentioning your name. Make your message friendly and professional.",
      type: MESSAGE_TYPE.INTRODUCTION,
    },
  ]);

  useEffect(() => {
    fetchChatData();
  }, []);

  useEffect(() => {
    generateDocumentTitle();
  }, [chatData.id]);

  useEffect(sendPreloadedPrompts, [isLoading]);

  useEffect(storeChatMessages, [
    useChatReturn.messages,
    useChatReturn.isLoading,
  ]);

  const initialMessages = chatData.messages as unknown as Message[];

  async function fetchChatData() {
    setIsLoading(false);

    // restore messages from db
    useChatReturn.setMessages(chatData?.messages as unknown as Message[]);
  }

  async function generateDocumentTitle() {
    if (!chatData.id) return;
    const supabase = createSupabaseClient();

    const chatId = chatData.id as string;

    // Check if the document title is already set
    const { data, error } = await supabase
      .from("Document")
      .select("name")
      .eq("chatId", chatId)
      .single();

    const documentTitle = data?.name;
    if (!documentTitle) {
      const { title: generatedTitle } =
        await generateDocumentTitleAction(chatId);
      console.log({ generatedTitle });

      await supabase
        .from("Document")
        .update({ name: generatedTitle })
        .eq("chatId", chatId);
    }
  }

  function sendPreloadedPrompts() {
    const preloadPromptsArr = preloadPrompts.current;

    // If there are no prompts to send, return
    if (!preloadPromptsArr.length) return;

    if (isLoading) return;

    // If the chat context is not loading and there are initial messages, return
    if (!isLoading && initialMessages?.length) {
      preloadPrompts.current = [];
      return;
    }

    const firstMessage = preloadPrompts.current.at(0);

    const message = firstMessage?.message as string;
    const messageType = firstMessage?.type as string;

    setTimeout(() => {
      useChatReturn.append({
        role: "user",
        content: message,
        data: {
          messageType,
        },
      });
      // Remove the sent prompt from the array
      preloadPrompts.current = preloadPromptsArr.slice(
        preloadPromptsArr.length - preloadPromptsArr.length + 1,
        preloadPromptsArr.length,
      );
    }, 200);
  }

  function storeChatMessages() {
    // Check if new messages have been added to the chat to not update the chat messages with the same messages
    const hasAddedMessages = initialMessages
      ? useChatReturn.messages.length > initialMessages?.length
      : useChatReturn.messages.length > 0;
    if (hasAddedMessages && !useChatReturn.isLoading)
      updateChatMessages({
        documentId: params.documentId as string,
        messages:
          useChatReturn.messages as unknown as Tables<"Chat">["messages"],
      });
  }

  return (
    <ChatContext.Provider
      value={{
        globalContext: {
          chatData,
          isLoading,
          extraData,
          setExtraData,
          documentState,
          setDocumentState,
        },
        useChatReturn,
        initOptions,
      }}
    >
      {children}
    </ChatContext.Provider>
  );
}


================================================
File: apps/chat-with-pdf/app/private/page.tsx
================================================
import { createSupabaseServer } from "@makefy/supabase/server";
import { redirect } from "next/navigation";

export default async function PrivatePage() {
  const supabase = createSupabaseServer();

  const { data, error } = await supabase.auth.getUser();
  if (error || !data?.user) {
    redirect("/login");
  }

  return <p>Hello {data.user.email}</p>;
}


================================================
File: apps/chat-with-pdf/hooks/use-global-chat.ts
================================================
import { ChatContext } from "@/app/context/chat-context";
import { useContext } from "react";

export function useGlobalChat() {
  const { globalContext, useChatReturn, initOptions } = useContext(ChatContext);

  if (!useChatReturn) {
    throw new Error("useGlobalChat must be used within a ChatProvider");
  }

  return {
    globalContext,
    useChatReturn,
    initOptions,
  };
}


================================================
File: apps/chat-with-pdf/icons/sad-face.tsx
================================================
import { cn } from "@makefy/ui/lib/utils";
import { forwardRef } from "react";

type SadFaceIconProps = {
  className?: string;
};

export const SadFaceIcon = forwardRef<SVGSVGElement, SadFaceIconProps>(
  function SadFaceIcon({ className }: SadFaceIconProps, ref) {
    return (
      <svg
        ref={ref}
        xmlns="http://www.w3.org/2000/svg"
        width="206.667"
        height="192"
        version="1"
        viewBox="0 0 155 144"
        className={cn("h-4 w-4", className)}
      >
        <path
          d="M252 1309c-84-42-118-155-71-238 69-124 251-117 310 13 24 52 23 90 0 142-42 91-149 129-239 83zM1132 1313c-131-64-132-244-2-311 155-80 314 93 225 244-43 74-147 105-223 67zM615 680C382 643 193 523 66 330c-47-72-49-117-5-154 52-44 92-30 149 54 94 139 231 233 385 265 90 19 260 19 350 0 154-32 291-126 385-265 57-84 97-98 149-54 44 37 42 82-5 154-110 167-268 281-459 330-92 24-304 35-400 20z"
          transform="matrix(.1 0 0 -.1 0 144)"
          className="text-primary fill-current"
        />
      </svg>
    );
  },
);


================================================
File: apps/chat-with-pdf/icons/sparkle.tsx
================================================
import { cn } from "@makefy/ui/lib/utils";
import { forwardRef } from "react";

type SparkleIconProps = {
  className?: string;
};

export const SparkleIcon = forwardRef<SVGSVGElement, SparkleIconProps>(
  function SparkleIcon({ className }: SparkleIconProps, ref) {
    return (
      <svg
        ref={ref}
        xmlns="http://www.w3.org/2000/svg"
        version="1"
        viewBox="0 0 300 299"
        className={cn("h-4 w-4", className)}
      >
        <path
          d="M1450 2974c-48-20-58-36-154-246-46-101-112-244-146-318-35-74-89-191-120-260l-57-125-462-215C7 1575 10 1577 10 1494c0-60 28-89 139-141 129-61 339-158 546-252 94-43 194-90 223-105 61-31 37 12 269-491 206-448 209-453 245-475 42-25 84-25 126 0 38 23 22-8 322 640 39 85 88 190 107 233 20 42 40 77 44 77s75 31 156 69 281 130 443 205c327 151 350 167 350 239 0 23-8 55-19 72-19 31-59 52-596 298-82 37-193 89-246 114l-97 45-50 107c-49 103-130 277-254 546-121 262-128 274-156 289-45 22-75 25-112 10z"
          transform="matrix(.1 0 0 -.1 0 299)"
          className="text-primary fill-current"
        />
      </svg>
    );
  },
);


================================================
File: apps/chat-with-pdf/lib/constants/index.ts
================================================
export const protectedPaths = ["/chat"];
export const authPaths = ["/login", "/signup"];


================================================
File: apps/chat-with-pdf/lib/supabase/middleware.ts
================================================
import { createMiddlewareClient } from "@makefy/supabase";
import { protectedPaths, authPaths } from "lib/constants";
import { NextResponse, type NextRequest } from "next/server";

export async function updateSession(request: NextRequest) {
  const { supabase, response } = await createMiddlewareClient(request);
  const user = await supabase.auth.getUser();
  const url = new URL(request.url);
  const next = url.searchParams.get("next");

  if (user.error && !authPaths.includes(url.pathname)) {
    return NextResponse.redirect(
      new URL("/login?next=" + (next || url.pathname), request.url),
    );
  }

  if (user.data.user?.id) {
    if (authPaths.includes(url.pathname)) {
      return NextResponse.redirect(new URL("/", request.url));
    }
    return response;
  } else {
    if (protectedPaths.includes(url.pathname)) {
      return NextResponse.redirect(
        new URL("/login?next=" + (next || url.pathname), request.url),
      );
    }
    return response;
  }
}


================================================
File: apps/chat-with-pdf/lib/supabase/queries/get-chat.ts
================================================
import { generateSuggestedQuestions } from "@/app/actions/generate-suggested-questions";
import { createSupabaseServer } from "@makefy/supabase/server";
import type { SupabaseClient } from "@makefy/supabase/types";
import { unstable_cache } from "next/cache";

async function retrieveChat(supabase: SupabaseClient, id: string) {
  const { data: chatData, error: chatError } = await supabase
    .from("Chat")
    .select("*")
    .eq("id", id)
    .single();

  if (chatError) {
    throw chatError;
  }

  return chatData;
}

async function generateAndUpdateSuggestedQuestions(
  supabase: SupabaseClient,
  id: string,
) {
  const result = await generateSuggestedQuestions(id);

  if (!result?.questions) {
    return null;
  }

  const { error: updateError } = await supabase
    .from("Chat")
    .update({ suggestedQuestions: result.questions })
    .eq("id", id)
    .select();

  if (updateError) {
    throw updateError;
  }

  return result.questions;
}

export async function getChat(id: string) {
  const supabase = createSupabaseServer();
  const { data, error: errorOnFetchingSession } = await supabase.auth.getUser();

  if (errorOnFetchingSession) {
    throw errorOnFetchingSession;
  }

  const chat = await unstable_cache(
    (supabase: SupabaseClient) => retrieveChat(supabase, id),
    [data.user.id || "", id],
    {
      revalidate: 60 * 60,
      tags: ["chat", data.user.id || "", id],
    },
  )(supabase);

  if (!chat?.suggestedQuestions) {
    const suggestedQuestions = await generateAndUpdateSuggestedQuestions(
      supabase,
      id,
    );
    return { ...chat, suggestedQuestions };
  }

  return chat;
}


================================================
File: apps/chat-with-pdf/lib/supabase/queries/get-chats.ts
================================================
import type { SupabaseClient } from "@makefy/supabase/types";
import { unstable_cache } from "next/cache";
import { createSupabaseServer } from "@makefy/supabase/server";

async function retrieveChats(supabase: SupabaseClient) {
  const { data, error } = await supabase.from("Chat").select("*");

  if (error) {
    throw error;
  }

  return data;
}

export async function getChats() {
  const supabase = createSupabaseServer();
  const { data, error: errorOnFetchingSession } = await supabase.auth.getUser();

  if (errorOnFetchingSession) {
    throw errorOnFetchingSession;
  }

  const chats = unstable_cache(retrieveChats, [data.user.id || ""], {
    revalidate: 60 * 60,
    tags: ["chats", data.user.id || ""],
  })(supabase);

  return chats;
}


================================================
File: apps/chat-with-pdf/lib/supabase/queries/get-documents.ts
================================================
import type { SupabaseClient } from "@makefy/supabase/types";
import { unstable_cache } from "next/cache";
import { createSupabaseServer } from "@makefy/supabase/server";

async function retrieveDocuments(supabase: SupabaseClient) {
  const { data: documents, error: errorOnFetchingDocuments } = await supabase
    .from("Document")
    .select("*");

  if (errorOnFetchingDocuments) {
    throw errorOnFetchingDocuments;
  }

  return documents;
}

export async function getDocuments() {
  const supabase = createSupabaseServer();
  const { data, error: errorOnFetchingSession } = await supabase.auth.getUser();

  if (errorOnFetchingSession) {
    throw errorOnFetchingSession;
  }

  const documents = unstable_cache(retrieveDocuments, [data.user.id || ""], {
    revalidate: 60 * 60,
    tags: ["documents", data?.user?.id || ""],
  })(supabase);

  return documents;
}


================================================
File: apps/chat-with-pdf/prisma/schema.prisma
================================================
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Chat {
  id               String    @id @unique @default(uuid())
  documentMetadata Json?
  documentUrl      String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  messages         Json?
  document         Document?
}

model Document {
  id               String             @id @unique @default(uuid())
  name             String?
  url              String?
  metadata         Json?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  chatId           String?            @unique
  chat             Chat?              @relation(fields: [chatId], references: [id])
  documentSections DocumentSections[]
}

model DocumentSections {
  id         String                      @id @unique @default(dbgenerated("extensions.gen_random_uuid()")) @db.Uuid
  embedding  Unsupported("vector(768)")?
  chatId     String?
  text       String?
  textChunk  String?
  pageNumber Int?
  document   Document?                   @relation(fields: [documentId], references: [id])
  documentId String?
}

model Feedback {
  id        String   @id @unique @default(uuid())
  type      String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


================================================
File: apps/chat-with-pdf/prisma/migrations/migration_lock.toml
================================================
# Please do not edit this file manually
# It should be added in your version-control system (i.e. Git)
provider = "postgresql"

================================================
File: apps/chat-with-pdf/prisma/migrations/20240712011903_init/migration.sql
================================================
-- CreateTable
CREATE TABLE "Chat" (
    "id" TEXT NOT NULL,
    "documentMetadata" JSONB NOT NULL,
    "documentUrl" TEXT NOT NULL,
    "messages" JSONB[],
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "Chat_pkey" PRIMARY KEY ("id")
);

-- CreateIndex
CREATE UNIQUE INDEX "Chat_id_key" ON "Chat"("id");


================================================
File: apps/chat-with-pdf/prisma/migrations/20240712012540_optional_fields/migration.sql
================================================
/*
  Warnings:

  - The `messages` column on the `Chat` table would be dropped and recreated. This will lead to data loss if there is data in the column.

*/
-- AlterTable
ALTER TABLE "Chat" ALTER COLUMN "documentMetadata" DROP NOT NULL,
ALTER COLUMN "documentUrl" DROP NOT NULL,
DROP COLUMN "messages",
ADD COLUMN     "messages" JSONB;


================================================
File: apps/chat-with-pdf/prisma/migrations/20240804224749_feedback/migration.sql
================================================
-- CreateTable
CREATE TABLE "Feedback" (
    "id" TEXT NOT NULL,
    "type" TEXT NOT NULL,
    "message" TEXT NOT NULL,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "Feedback_pkey" PRIMARY KEY ("id")
);

-- CreateIndex
CREATE UNIQUE INDEX "Feedback_id_key" ON "Feedback"("id");


================================================
File: apps/chat-with-pdf/prisma/migrations/20240818222106_add_document/migration.sql
================================================
/*
  Warnings:

  - Added the required column `documentId` to the `Chat` table without a default value. This is not possible if the table is not empty.

*/
-- AlterTable
ALTER TABLE "Chat" ADD COLUMN     "documentId" TEXT NOT NULL;

-- CreateTable
CREATE TABLE "Document" (
    "id" TEXT NOT NULL,
    "name" TEXT,
    "url" TEXT,
    "chatId" TEXT NOT NULL,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "Document_pkey" PRIMARY KEY ("id")
);

-- CreateIndex
CREATE UNIQUE INDEX "Document_id_key" ON "Document"("id");

-- AddForeignKey
ALTER TABLE "Chat" ADD CONSTRAINT "Chat_documentId_fkey" FOREIGN KEY ("documentId") REFERENCES "Document"("id") ON DELETE RESTRICT ON UPDATE CASCADE;


================================================
File: apps/chat-with-pdf/prisma/migrations/20240818230228_add_optional_fields/migration.sql
================================================
-- DropForeignKey
ALTER TABLE "Chat" DROP CONSTRAINT "Chat_documentId_fkey";

-- AlterTable
ALTER TABLE "Chat" ALTER COLUMN "documentId" DROP NOT NULL;

 -- Example: enable the "vector" extension on supabase.
create extension vector with schema public;

-- AlterTable
ALTER TABLE "Document" ADD COLUMN     "embedding" vector(768);

-- AddForeignKey
ALTER TABLE "Chat" ADD CONSTRAINT "Chat_documentId_fkey" FOREIGN KEY ("documentId") REFERENCES "Document"("id") ON DELETE SET NULL ON UPDATE CASCADE;


================================================
File: apps/chat-with-pdf/prisma/migrations/20240818233331_add_doument_metadata/migration.sql
================================================
-- AlterTable
ALTER TABLE "Document" ADD COLUMN     "metadata" JSONB,
ALTER COLUMN "chatId" DROP NOT NULL;


================================================
File: apps/chat-with-pdf/prisma/migrations/20240819225259_add_document_sections/migration.sql
================================================
/*
  Warnings:

  - You are about to drop the column `documentId` on the `Chat` table. All the data in the column will be lost.
  - You are about to drop the column `embedding` on the `Document` table. All the data in the column will be lost.
  - A unique constraint covering the columns `[chatId]` on the table `Document` will be added. If there are existing duplicate values, this will fail.

*/
-- DropForeignKey
ALTER TABLE "Chat" DROP CONSTRAINT "Chat_documentId_fkey";

-- AlterTable
ALTER TABLE "Chat" DROP COLUMN "documentId";

-- AlterTable
ALTER TABLE "Document" DROP COLUMN "embedding";

-- CreateTable
CREATE TABLE "DocumentSections" (
    "id" TEXT NOT NULL,
    "embedding" vector(768),
    "chatId" TEXT,
    "text" TEXT,
    "pageNumber" INTEGER,
    "documentId" TEXT,

    CONSTRAINT "DocumentSections_pkey" PRIMARY KEY ("id")
);

-- CreateIndex
CREATE UNIQUE INDEX "DocumentSections_id_key" ON "DocumentSections"("id");

-- CreateIndex
CREATE UNIQUE INDEX "Document_chatId_key" ON "Document"("chatId");

-- AddForeignKey
ALTER TABLE "Document" ADD CONSTRAINT "Document_chatId_fkey" FOREIGN KEY ("chatId") REFERENCES "Chat"("id") ON DELETE SET NULL ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "DocumentSections" ADD CONSTRAINT "DocumentSections_documentId_fkey" FOREIGN KEY ("documentId") REFERENCES "Document"("id") ON DELETE SET NULL ON UPDATE CASCADE;


================================================
File: apps/chat-with-pdf/prisma/migrations/20240821023002_add_the_text_chunk_column/migration.sql
================================================
-- AlterTable
ALTER TABLE "DocumentSections" ADD COLUMN     "textChunk" TEXT;


================================================
File: apps/chat-with-pdf/prisma/migrations/20240823013715_generate_random_uuid_on_document_sections_table/migration.sql
================================================
/*
  Warnings:

  - The primary key for the `DocumentSections` table will be changed. If it partially fails, the table could be left without primary key constraint.
  - The `id` column on the `DocumentSections` table would be dropped and recreated. This will lead to data loss if there is data in the column.

*/
-- AlterTable
ALTER TABLE "DocumentSections" DROP CONSTRAINT "DocumentSections_pkey",
DROP COLUMN "id",
ADD COLUMN     "id" UUID NOT NULL DEFAULT gen_random_uuid(),
ADD CONSTRAINT "DocumentSections_pkey" PRIMARY KEY ("id");

-- CreateIndex
CREATE UNIQUE INDEX "DocumentSections_id_key" ON "DocumentSections"("id");


================================================
File: apps/chat-with-pdf/prisma/migrations/20240824221542_match_documents_function/migration.sql
================================================
-- Match documents using negative inner product (<#>)
create or replace function match_documents (
  query_embedding vector(768),
  match_threshold float,
  document_id uuid
)
returns setof "DocumentSections"
language sql
as $$
  select *
  from "DocumentSections"
  where "DocumentSections".embedding <#> query_embedding < -match_threshold 
  and "DocumentSections"."chatId"::text = document_id::text
  order by "DocumentSections"."pageNumber" asc
$$;

================================================
File: apps/chat-with-pdf/utils/context.ts
================================================
import { Tables } from "@makefy/supabase/types";
import { getEmbeddings } from "./vector-store";
import { createSupabaseServer } from "@makefy/supabase/server";

export async function getContext(query: string, documentId: string) {
  // User query embeddings
  const userQueryEmbeddings = await getEmbeddings(query);

  const supabase = createSupabaseServer();

  const { data: documentSections, error } = await supabase.rpc(
    "match_documents",
    {
      query_embedding: Array.isArray(userQueryEmbeddings)
        ? JSON.stringify(userQueryEmbeddings)
        : JSON.stringify([userQueryEmbeddings]),
      match_threshold: 0.7,
      match_count: 200,
      document_id: documentId,
    },
  );

  const supabaseTextContent = documentSections?.reduce(
    (acc: string, currentDocSections: Tables<"DocumentSections">) => {
      const { pageNumber, textChunk } = currentDocSections;
      // Return the accumulator in this format:
      // START PAGE 1 BLOCK
      // Text extracted from page 1

      if (!acc.includes(`START PAGE ${pageNumber} BLOCK`)) {
        acc += `START PAGE ${pageNumber} BLOCK\n`;
      }
      acc += `${textChunk}\n`;

      return acc;
    },
    "",
  );

  const textContentNormalized = supabaseTextContent?.replace(/\n/g, " ");

  // Limit the block text to 3000 characters

  return textContentNormalized?.substring(0, 3000);
}


================================================
File: apps/chat-with-pdf/utils/embed-document.ts
================================================
import { Document } from "@langchain/core/documents";
import { RecursiveCharacterTextSplitter } from "@langchain/textsplitters";
import { md5 } from "js-md5";
import { truncateStringByBytes } from "./truncate-string";
import { getEmbeddings } from "./vector-store";

export async function prepareDocument(
  page: Document<Record<string, any>>,
  chatId: string,
): Promise<Document<Record<string, any>>[]> {
  // Get the content of the page
  let { pageContent, metadata } = page;
  pageContent = pageContent.replace(/\n/g, "");

  // Define the document splitter
  const splitter = new RecursiveCharacterTextSplitter({
    chunkSize: 50,
    chunkOverlap: 1,
  });

  // Split the documents using the provided splitter
  const docs = await splitter.splitDocuments([
    new Document({
      pageContent,
      metadata: {
        chatId,
        pageNumber: metadata?.loc?.pageNumber,
        text: truncateStringByBytes(pageContent, 36000),
      },
    }),
  ]);

  return docs;
}

export async function embedDocument(doc: Document<Record<string, any>>) {
  try {
    const embeddings = await getEmbeddings(doc.pageContent);
    const hash = md5(doc.pageContent);

    const textChunk = doc.pageContent;

    return {
      id: hash,
      values: embeddings,
      metadata: {
        chatId: doc.metadata.chatId,
        text: doc.metadata.text,
        pageNumber: doc.metadata.pageNumber,
        textChunk,
      },
    };
  } catch (error) {}
}


================================================
File: apps/chat-with-pdf/utils/get-loading-messages.ts
================================================
import {
  loadingPdfFileMessages,
  loadingPdfLinkMessages,
} from "@/components/header/document-title/constants/loading-messages";
import type { PostgrestError } from "@makefy/supabase/types";

let currentActiveIndex = -1;
let loadingMessagesCopy = [] as
  | typeof loadingPdfFileMessages
  | typeof loadingPdfLinkMessages;

export function resetLoadingMessages() {
  currentActiveIndex = -1;
  loadingMessagesCopy = [];
}

type GetLoadingMessagesProps = {
  isViaLink: boolean;
  chatId: string | null;
  errorMessage?: string | PostgrestError;
  friendlyError?: string;
};

export function getLoadingMessages({
  isViaLink,
  chatId,
  errorMessage,
  friendlyError = "",
}: GetLoadingMessagesProps) {
  if (errorMessage || friendlyError) {
    const isLoadingMessagesCopyEmpty = loadingMessagesCopy.length === 0;
    const loadingMessagesToClone = isLoadingMessagesCopyEmpty
      ? isViaLink
        ? loadingPdfLinkMessages
        : loadingPdfFileMessages
      : loadingMessagesCopy;
    const loadingMessagesNewCopy = structuredClone(loadingMessagesToClone);
    loadingMessagesNewCopy[currentActiveIndex]!.error = (errorMessage ||
      friendlyError) as string;
    loadingMessagesNewCopy[currentActiveIndex]!.friendlyError =
      friendlyError ||
      loadingMessagesNewCopy[currentActiveIndex]!.friendlyError;
    resetLoadingMessages();
    return loadingMessagesNewCopy;
  }

  currentActiveIndex = currentActiveIndex + 1;

  if (currentActiveIndex === 0) {
    loadingMessagesCopy = structuredClone(
      isViaLink ? loadingPdfLinkMessages : loadingPdfFileMessages,
    );
  }

  if (loadingMessagesCopy?.length === 0) return [];

  if (currentActiveIndex > 0) {
    loadingMessagesCopy[currentActiveIndex - 1]!.active = false;
    loadingMessagesCopy[currentActiveIndex - 1]!.completed = true;
  }

  if (currentActiveIndex === loadingMessagesCopy.length - 1) {
    const loadingMessagesNewCopy = structuredClone(loadingMessagesCopy);
    loadingMessagesNewCopy[currentActiveIndex]!.chatId = chatId as string;
    resetLoadingMessages();
    return loadingMessagesNewCopy;
  }

  loadingMessagesCopy[currentActiveIndex]!.active = true;
  return loadingMessagesCopy;
}


================================================
File: apps/chat-with-pdf/utils/get-pdf-metadata.ts
================================================
import { PDFDocument } from "pdf-lib";

type GetPdfMetadataProps = {
  documentFile?: File;
  documentUrl?: string;
};

export async function getPdfData({
  documentFile,
  documentUrl,
}: GetPdfMetadataProps) {
  if (!documentFile && !documentUrl) return null;

  let fileFetchResponse = null;

  fileFetchResponse = documentUrl
    ? await fetch(documentUrl)
    : fileFetchResponse;

  const pdfFile = fileFetchResponse
    ? await fileFetchResponse?.blob()
    : (documentFile as File);
  const pdfBytes = await pdfFile.arrayBuffer();

  const pdfDoc = await PDFDocument.load(pdfBytes, {
    updateMetadata: false,
    ignoreEncryption: true,
  });

  const title = pdfDoc.getTitle() || "Untitled";
  const numPages = pdfDoc.getPageCount();
  const size = pdfFile.size;
  const sizeInKB = +(size / 1024).toFixed(2);
  const sizeInMB = +(sizeInKB / 1024).toFixed(2);

  const metadata = {
    title,
    numPages,
    size: {
      kb: sizeInKB,
      mb: sizeInMB,
    },
  };

  const pdfData = {
    metadata,
    pdfBlob: pdfFile,
  };

  return pdfData;
}

async function getPdfDataFromLink(documentUrl: string) {
  const response = await fetch(documentUrl);
  const pdfBlob = await response.blob();
  const pdfBytes = await pdfBlob.arrayBuffer();

  const pdfDoc = await PDFDocument.load(pdfBytes, {
    updateMetadata: false,
    ignoreEncryption: true,
  });

  const title = pdfDoc.getTitle() || "Untitled";
  const numPages = pdfDoc.getPageCount();
  const size = pdfBlob.size;
  const sizeInKB = +(size / 1024).toFixed(2);
  const sizeInMB = +(sizeInKB / 1024).toFixed(2);

  const metadata = {
    title,
    numPages,
    size: {
      kb: sizeInKB,
      mb: sizeInMB,
    },
  };

  const pdfData = {
    metadata,
    pdfBlob,
  };

  return pdfData;
}

async function getPdfDataFromFile(file: File) {
  file.arrayBuffer();
  const reader = new FileReader();

  reader.onabort = () => console.log("file reading was aborted");
  reader.onerror = () => console.log("file reading has failed");

  return new Promise((resolve, reject) => {
    reader.onload = async () => {
      const binaryStr = reader.result;

      const pdfDoc = await PDFDocument.load(binaryStr as ArrayBuffer, {
        updateMetadata: false,
        ignoreEncryption: true,
      });

      const title = pdfDoc.getTitle() || "Untitled";
      const numPages = pdfDoc.getPageCount();
      const fileName = file.name;
      const size = file.size;
      const sizeInKB = +(size / 1024).toFixed(2);
      const sizeInMB = +(sizeInKB / 1024).toFixed(2);

      const metadata = {
        fileName,
        title,
        numPages,
        size: {
          kb: sizeInKB,
          mb: sizeInMB,
        },
      };

      const pdfData = {
        metadata,
        pdfBlob: file,
      };

      resolve(pdfData);
    };

    reader.readAsArrayBuffer(file);
  });
}


================================================
File: apps/chat-with-pdf/utils/oauth-redirect-url.ts
================================================
import { ReadonlyURLSearchParams } from "next/navigation";

export function getOAuthRedirectUrl(searchParams: ReadonlyURLSearchParams) {
  const protocol = "https";
  const host = process.env.SUPABASE_AUTH_REDIRECT_URL || process.env.VERCEL_URL;
  const path = "/api/auth/callback";
  const queryParams = new URLSearchParams(searchParams).toString();

  const redirectUrl = new URL(
    `${path}?${queryParams}`,
    `${protocol}://${host}`,
  ).toString();

  return redirectUrl;
}


================================================
File: apps/chat-with-pdf/utils/pinecone.client.ts
================================================
import { Pinecone } from '@pinecone-database/pinecone';

export async function getPineconeClient(namespace: string) {
    const pineconeInstance = new Pinecone({
        apiKey: process.env.PINECONE_API_KEY as string
    })

    const index = pineconeInstance.index(process.env.PINECONE_INDEX_NAME!)

    const pineconeClient = await index.namespace(namespace)

    return pineconeClient
}

================================================
File: apps/chat-with-pdf/utils/rate-limit-requests.ts
================================================
import { Ratelimit } from "@upstash/ratelimit";
import { kv } from "@vercel/kv";

type RateLimitResponse = {
  success: boolean;
  headers: {
    "X-RateLimit-Limit": string;
    "X-RateLimit-Remaining": string;
    "X-RateLimit-Reset": string;
  };
};

export async function rateLimitRequests(
  req: Request,
): Promise<RateLimitResponse> {
  if (process.env.KV_REST_API_URL && process.env.KV_REST_API_TOKEN) {
    const ip = req.headers.get("x-forwarded-for");
    const ratelimit = new Ratelimit({
      redis: kv,
      // rate limit to 5 requests per 10 seconds
      limiter: Ratelimit.slidingWindow(5, "10s"),
    });

    const { success, limit, reset, remaining } = await ratelimit.limit(
      `ratelimit_${ip}`,
    );

    const response = {
      success,
      headers: {
        "X-RateLimit-Limit": limit.toString(),
        "X-RateLimit-Remaining": remaining.toString(),
        "X-RateLimit-Reset": reset.toString(),
      },
    };
    return response;
  }

  console.log(
    "KV_REST_API_URL and KV_REST_API_TOKEN env vars not found, not rate limiting...",
  );
  const response = {} as RateLimitResponse;
  return response;
}


================================================
File: apps/chat-with-pdf/utils/truncate-string.ts
================================================
export function truncateStringByBytes(str: string, bytes: number) {
    const enc = new TextEncoder();
    return new TextDecoder("utf-8").decode(enc.encode(str).slice(0, bytes));
};

================================================
File: apps/chat-with-pdf/utils/vector-store.ts
================================================
/* eslint-disable @typescript-eslint/no-non-null-assertion */
import { TaskType } from "@google/generative-ai";
import { GoogleGenerativeAIEmbeddings } from "@langchain/google-genai";

export async function getEmbeddings(value: string) {
  try {
    // Embed the text using the Google Generative AI API
    const googleGenerativeAIEmbeddings = new GoogleGenerativeAIEmbeddings({
      model: "embedding-001",
      taskType: TaskType.RETRIEVAL_DOCUMENT,
      title: "Document title",
      apiKey: process.env.GOOGLE_GENERATIVE_AI_API_KEY,
    });

    const embedding = await googleGenerativeAIEmbeddings.embedQuery(value);

    return embedding;
  } catch (error) {
    console.log("Error in getEmbeddings", error);
    throw new Error(`Error in getEmbeddings: ${error}`);
  }
}


================================================
File: apps/text-tools/next.config.js
================================================
/** @type {import('next').NextConfig} */
const nextConfig = {
    webpack: function (config) {
        /**
         * Critical: prevents " ⨯ ./node_modules/canvas/build/Release/canvas.node
         * Module parse failed: Unexpected character '�' (1:0)" error
         */
        config.resolve.alias.canvas = false;

        // You may not need this, it's just to support moduleResolution: 'node16'
        config.resolve.extensionAlias = {
            '.js': ['.js', '.ts', '.tsx'],
        };
        return config;
    },
    transpilePackages: ['@makefy/ui', '@makefy/supabase'],
    reactStrictMode: false,
    swcMinify: true
};

module.exports = nextConfig


================================================
File: apps/text-tools/package.json
================================================
{
    "name": "@makefy/text-tools",
    "version": "0.1.0",
    "private": true,
    "scripts": {
        "dev": "next dev",
        "build": "next build",
        "start": "next start",
        "lint": "next lint"
    },
    "dependencies": {
        "@makefy/ui": "workspace:*",
        "@ai-sdk/anthropic": "1.0.0",
        "@ai-sdk/google": "1.0.0",
        "@ai-sdk/openai": "1.0.0",
        "ai": "4.0.0",
        "framer-motion": "11.3.2",
        "lucide-react": "0.344.0",
        "next": "14.2.5",
        "next-themes": "0.3.0",
        "react": "18.3.1",
        "react-dom": "18.3.1",
        "zod": "3.22.4"
    },
    "devDependencies": {
        "@tailwindcss/typography": "0.5.15",
        "@types/node": "^20.11.5",
        "@types/react": "18.2.61",
        "@types/react-dom": "18.2.19",
        "autoprefixer": "^10.0.1",
        "eslint": "^8",
        "eslint-config-next": "14.2.5",
        "postcss": "^8",
        "tailwindcss": "3.4.14",
        "typescript": "^5.3.3"
    }
}

================================================
File: apps/text-tools/postcss.config.js
================================================
module.exports = {
    plugins: {
        tailwindcss: {},
        autoprefixer: {},
    },
}; 

================================================
File: apps/text-tools/tailwind.config.ts
================================================
import path from "path";
import type { Config } from "tailwindcss";
import { default as uiTailwindConfig } from "@makefy/ui/tailwind.config";

const config: Config = {
  darkMode: ["class"],
  content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
    path.join(
      path.dirname(require.resolve("@makefy/ui")),
      "components/**/*.{ts,tsx}",
    ),
  ],
  presets: [uiTailwindConfig],
  theme: {
    extend: {
      typography: {
        DEFAULT: {
          css: {
            "code::before": {
              content: '""',
            },
            "code::after": {
              content: '""',
            },
          },
        },
      },
    },
  },
  plugins: [require("@tailwindcss/typography")],
};

export default config;


================================================
File: apps/text-tools/tsconfig.json
================================================
{
    "compilerOptions": {
        "target": "es5",
        "lib": [
            "dom",
            "dom.iterable",
            "esnext"
        ],
        "allowJs": true,
        "skipLibCheck": true,
        "strict": true,
        "noEmit": true,
        "esModuleInterop": true,
        "module": "esnext",
        "moduleResolution": "bundler",
        "resolveJsonModule": true,
        "isolatedModules": true,
        "jsx": "preserve",
        "incremental": true,
        "plugins": [
            {
                "name": "next"
            }
        ],
        "paths": {
            "@/*": [
                "./*"
            ]
        }
    },
    "include": [
        "next-env.d.ts",
        "**/*.ts",
        "**/*.tsx",
        ".next/types/**/*.ts"
    ],
    "exclude": [
        "node_modules"
    ]
}

================================================
File: apps/text-tools/.gitignore
================================================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts 

================================================
File: apps/text-tools/app/globals.css
================================================
@tailwind base;
@tailwind components;
@tailwind utilities;


================================================
File: apps/text-tools/app/layout.tsx
================================================
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import "@makefy/ui/globals.css";
import { cn } from "@makefy/ui/lib/utils";
import { ThemeProvider } from "./components/theme-provider";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Text Tools",
  description:
    "A collection of AI-powered tools for text generation and manipulation",
  icons: {
    icon: [
      {
        rel: "icon",
        url: "/icon1.svg",
        media: "(prefers-color-scheme: dark)",
        type: "image/svg+xml",
      },
      {
        rel: "icon",
        url: "/icon2.svg",
        media: "(prefers-color-scheme: light)",
        type: "image/svg+xml",
      },
      {
        rel: "apple-touch-icon",
        url: "/icon1.svg",
      },
    ],
  },
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body className={cn(inter.className, "h-screen")}>
        <ThemeProvider
          attribute="class"
          defaultTheme="system"
          enableSystem
          disableTransitionOnChange
        >
          {children}
        </ThemeProvider>
      </body>
    </html>
  );
}


================================================
File: apps/text-tools/app/page.tsx
================================================
import { ToolList } from "./components/tool-list";

export default function TextTools() {
  return (
    <div className="container mx-auto max-w-4xl p-4">
      <div className="mb-8 text-center">
        <h1 className="text-4xl font-bold tracking-tight">Text Tools</h1>
        <p className="text-muted-foreground mt-2">
          A collection of AI-powered tools for text generation and manipulation
        </p>
      </div>

      <ToolList />
    </div>
  );
}


================================================
File: apps/text-tools/app/(tools)/podcast-script-generator/page.tsx
================================================
"use client";

import { useCompletion } from "ai/react";
import { Button } from "@makefy/ui/components/button";
import { Card, CardContent } from "@makefy/ui/components/card";
import { Input } from "@makefy/ui/components/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@makefy/ui/components/select";
import { Textarea } from "@makefy/ui/components/textarea";
import { useState } from "react";
import { MarkdownViewer } from "@/app/components/markdown-viewer";
import { ToolHero } from "@/app/components/tool-hero";
import { MicIcon } from "lucide-react";

export default function PodcastScriptGenerator() {
  const [topic, setTopic] = useState("");
  const [duration, setDuration] = useState("15");
  const [style, setStyle] = useState("conversational");
  const [targetAudience, setTargetAudience] = useState("");
  const [keyPoints, setKeyPoints] = useState("");
  const [error, setError] = useState("");

  const { complete, completion, isLoading } = useCompletion({
    api: "/api/podcast-script-generator/generate",
  });

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");

    try {
      await complete("", {
        body: {
          topic,
          duration,
          style,
          targetAudience,
          keyPoints,
        },
      });
    } catch (err) {
      setError(err instanceof Error ? err.message : "An error occurred");
    }
  };

  return (
    <>
      <ToolHero
        title="Podcast Script Generator"
        description="Generate professional podcast scripts tailored to your topic, style, and audience. Create engaging content with proper structure and flow."
        icon={<MicIcon className="h-8 w-8" />}
      />
      <div className="container mx-auto max-w-2xl py-10">
        <Card>
          <CardContent className="pt-6">
            <form onSubmit={handleSubmit} className="space-y-4">
              <div className="space-y-2">
                <label className="text-sm font-medium">Podcast Topic</label>
                <Input
                  placeholder="Enter your podcast topic..."
                  value={topic}
                  onChange={(e) => setTopic(e.target.value)}
                  required
                />
              </div>

              <div className="space-y-2">
                <label className="text-sm font-medium">
                  Target Duration (minutes)
                </label>
                <Select value={duration} onValueChange={setDuration}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select duration" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="5">5 minutes</SelectItem>
                    <SelectItem value="15">15 minutes</SelectItem>
                    <SelectItem value="30">30 minutes</SelectItem>
                    <SelectItem value="45">45 minutes</SelectItem>
                    <SelectItem value="60">60 minutes</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <label className="text-sm font-medium">Script Style</label>
                <Select value={style} onValueChange={setStyle}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select style" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="conversational">
                      Conversational
                    </SelectItem>
                    <SelectItem value="educational">Educational</SelectItem>
                    <SelectItem value="interview">Interview Format</SelectItem>
                    <SelectItem value="storytelling">Storytelling</SelectItem>
                    <SelectItem value="debate">Debate Style</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <label className="text-sm font-medium">Target Audience</label>
                <Input
                  placeholder="Describe your target audience..."
                  value={targetAudience}
                  onChange={(e) => setTargetAudience(e.target.value)}
                  required
                />
              </div>

              <div className="space-y-2">
                <label className="text-sm font-medium">
                  Key Points (Optional)
                </label>
                <Textarea
                  placeholder="Enter key points to cover in the podcast..."
                  value={keyPoints}
                  onChange={(e) => setKeyPoints(e.target.value)}
                  rows={4}
                />
              </div>

              {error && <div className="text-sm text-red-500">{error}</div>}

              <Button type="submit" disabled={isLoading} className="w-full">
                {isLoading ? "Generating Script..." : "Generate Script"}
              </Button>
            </form>

            {completion && (
              <div className="mt-6 space-y-4">
                <h3 className="font-medium">Generated Script:</h3>
                <div className="bg-card rounded-lg border p-4">
                  <MarkdownViewer content={completion} />
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </>
  );
}


================================================
File: apps/text-tools/app/(tools)/qa-generator/page.tsx
================================================
"use client";

import { useCompletion } from "ai/react";
import { Button } from "@makefy/ui/components/button";
import { Card, CardContent } from "@makefy/ui/components/card";
import { Textarea } from "@makefy/ui/components/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@makefy/ui/components/select";
import { Input } from "@makefy/ui/components/input";
import { useState } from "react";
import { MarkdownViewer } from "@/app/components/markdown-viewer";
import { ToolHero } from "@/app/components/tool-hero";
import { HelpCircleIcon } from "lucide-react";

export default function QAGenerator() {
  const [content, setContent] = useState("");
  const [numberOfQuestions, setNumberOfQuestions] = useState("5");
  const [difficulty, setDifficulty] = useState("medium");
  const [topic, setTopic] = useState("");
  const [error, setError] = useState("");

  const { complete, completion, isLoading } = useCompletion({
    api: "/api/qa-generator/generate",
  });

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");

    try {
      await complete("", {
        body: {
          content,
          numberOfQuestions,
          difficulty,
          topic,
        },
      });
    } catch (err) {
      setError(err instanceof Error ? err.message : "An error occurred");
    }
  };

  return (
    <>
      <ToolHero
        title="Q&A Generator"
        description="Generate comprehensive questions and answers from any text or topic. Perfect for study materials, quizzes, and educational content."
        icon={<HelpCircleIcon className="h-8 w-8" />}
      />
      <div className="container mx-auto max-w-2xl py-10">
        <Card>
          <CardContent className="pt-6">
            <form onSubmit={handleSubmit} className="space-y-4">
              <div className="space-y-2">
                <label className="text-sm font-medium">Content</label>
                <Textarea
                  placeholder="Paste your text content here..."
                  value={content}
                  onChange={(e) => setContent(e.target.value)}
                  rows={6}
                  className="resize-none"
                />
              </div>

              <div className="space-y-2">
                <label className="text-sm font-medium">Topic (Optional)</label>
                <Input
                  placeholder="Specify a topic for focused Q&A..."
                  value={topic}
                  onChange={(e) => setTopic(e.target.value)}
                />
                <p className="text-muted-foreground text-xs">
                  If no content is provided, questions will be generated based
                  on this topic
                </p>
              </div>

              <div className="space-y-2">
                <label className="text-sm font-medium">
                  Number of Questions
                </label>
                <Select
                  value={numberOfQuestions}
                  onValueChange={setNumberOfQuestions}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select number of questions" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="3">3 Questions</SelectItem>
                    <SelectItem value="5">5 Questions</SelectItem>
                    <SelectItem value="10">10 Questions</SelectItem>
                    <SelectItem value="15">15 Questions</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <label className="text-sm font-medium">Difficulty Level</label>
                <Select value={difficulty} onValueChange={setDifficulty}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select difficulty" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="easy">Easy</SelectItem>
                    <SelectItem value="medium">Medium</SelectItem>
                    <SelectItem value="hard">Hard</SelectItem>
                    <SelectItem value="expert">Expert</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              {error && <div className="text-sm text-red-500">{error}</div>}

              <Button type="submit" disabled={isLoading} className="w-full">
                {isLoading ? "Generating Q&A..." : "Generate Q&A"}
              </Button>
            </form>

            {completion && (
              <div className="mt-6 space-y-4">
                <h3 className="font-medium">Generated Q&A:</h3>
                <div className="bg-card rounded-lg border p-4">
                  <MarkdownViewer content={completion} />
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </>
  );
}


================================================
File: apps/text-tools/app/(tools)/tiktok-hooks-generator/page.tsx
================================================
"use client";

import { useCompletion } from "ai/react";
import { Button } from "@makefy/ui/components/button";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@makefy/ui/components/card";
import { Input } from "@makefy/ui/components/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@makefy/ui/components/select";
import { useState } from "react";
import { MarkdownViewer } from "@/app/components/markdown-viewer";
import { ToolHero } from "@/app/components/tool-hero";
import { VideoIcon } from "lucide-react";

export default function TikTokHookGenerator() {
  const [topic, setTopic] = useState("");
  const [tone, setTone] = useState("casual");
  const [error, setError] = useState("");

  const { complete, completion, isLoading } = useCompletion({
    api: "/api/tiktok-hooks-generator/generate",
  });

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");

    try {
      await complete("", {
        body: {
          topic,
          tone,
        },
      });
    } catch (err) {
      setError(err instanceof Error ? err.message : "An error occurred");
    }
  };

  return (
    <>
      <ToolHero
        title="TikTok Hook Generator"
        description="Create attention-grabbing hooks for your TikTok videos using AI. Get the perfect first 3 seconds that make viewers want to keep watching."
        icon={<VideoIcon className="h-8 w-8" />}
      />
      <div className="container mx-auto max-w-2xl py-10">
        <Card>
          <CardContent className="pt-6">
            <form onSubmit={handleSubmit} className="space-y-4">
              <div className="space-y-2">
                <label className="text-sm font-medium">Video Topic</label>
                <Input
                  placeholder="Enter your video topic..."
                  value={topic}
                  onChange={(e) => setTopic(e.target.value)}
                  required
                />
              </div>

              <div className="space-y-2">
                <label className="text-sm font-medium">Tone</label>
                <Select value={tone} onValueChange={setTone}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select tone" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="casual">Casual</SelectItem>
                    <SelectItem value="professional">Professional</SelectItem>
                    <SelectItem value="funny">Funny</SelectItem>
                    <SelectItem value="dramatic">Dramatic</SelectItem>
                    <SelectItem value="educational">Educational</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              {error && <div className="text-sm text-red-500">{error}</div>}

              <Button type="submit" disabled={isLoading} className="w-full">
                {isLoading ? "Generating Hooks..." : "Generate Hooks"}
              </Button>
            </form>

            {completion && (
              <div className="mt-6 space-y-4">
                <h3 className="font-medium">Generated Hooks:</h3>
                <div className="bg-card rounded-lg border p-4">
                  <MarkdownViewer content={completion} />
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </>
  );
}


================================================
File: apps/text-tools/app/(tools)/youtube-summarizer/page.tsx
================================================
"use client";

import { useCompletion } from "ai/react";
import { Button } from "@makefy/ui/components/button";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@makefy/ui/components/card";
import { Input } from "@makefy/ui/components/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@makefy/ui/components/select";
import { useState } from "react";
import { MarkdownViewer } from "@/app/components/markdown-viewer";
import { ToolHero } from "@/app/components/tool-hero";
import { MessageSquareIcon } from "lucide-react";

export default function YouTubeSummarizer() {
  const [videoUrl, setVideoUrl] = useState("");
  const [style, setStyle] = useState("concise");
  const [error, setError] = useState("");

  const { complete, completion, isLoading } = useCompletion({
    api: "/api/youtube-summarizer/generate",
  });

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");

    try {
      await complete("", {
        body: {
          videoUrl,
          style,
        },
      });
    } catch (err) {
      setError(err instanceof Error ? err.message : "An error occurred");
    }
  };

  return (
    <>
      <ToolHero
        title="YouTube Video Summarizer"
        description="Get quick, accurate summaries of YouTube videos. Save time while capturing key points and main takeaways."
        icon={<MessageSquareIcon className="h-8 w-8" />}
      />
      <div className="container mx-auto max-w-2xl py-10">
        <Card>
          <CardContent className="pt-6">
            <form onSubmit={handleSubmit} className="space-y-4">
              <div className="space-y-2">
                <label className="text-sm font-medium">YouTube Video URL</label>
                <Input
                  placeholder="https://www.youtube.com/watch?v=..."
                  value={videoUrl}
                  onChange={(e) => setVideoUrl(e.target.value)}
                  type="url"
                  required
                />
              </div>

              <div className="space-y-2">
                <label className="text-sm font-medium">Summary Style</label>
                <Select value={style} onValueChange={setStyle}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select style" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="concise">Concise</SelectItem>
                    <SelectItem value="detailed">Detailed</SelectItem>
                    <SelectItem value="bullet-points">Bullet Points</SelectItem>
                    <SelectItem value="key-takeaways">Key Takeaways</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              {error && <div className="text-sm text-red-500">{error}</div>}

              <Button type="submit" disabled={isLoading} className="w-full">
                {isLoading ? "Generating Summary..." : "Generate Summary"}
              </Button>
            </form>

            {completion && (
              <div className="mt-6 space-y-4">
                <h3 className="font-medium">Summary:</h3>
                <div className="bg-muted whitespace-pre-wrap rounded-lg p-4 text-sm">
                  {completion}
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </>
  );
}


================================================
File: apps/text-tools/app/api/generate/route.ts
================================================
import { google } from "@ai-sdk/google";
import { openai } from "@ai-sdk/openai";
import { streamText } from "ai";
import { NextResponse } from "next/server";

export async function POST(req: Request) {
  const { topic, tone } = await req.json();

  const result = await streamText({
    model: google("gemini-1.5-flash-latest"),
    messages: [
      {
        role: "system",
        content:
          "You are an expert TikTok content creator who specializes in creating engaging hooks (first 3 seconds) for videos.",
      },
      {
        role: "user",
        content: `Generate 3 attention-grabbing TikTok hooks for a video about "${topic}". The tone should be ${tone}. Each hook should be short, punchy, and make viewers want to keep watching.`,
      },
    ],
  });

  return result.toDataStreamResponse();
}


================================================
File: apps/text-tools/app/api/podcast-script-generator/generate/route.ts
================================================
import { google } from "@ai-sdk/google";
import { streamText } from "ai";

export async function POST(req: Request) {
  const { topic, duration, style, targetAudience, keyPoints } =
    await req.json();

  const result = await streamText({
    model: google("gemini-1.5-flash-latest"),
    messages: [
      {
        role: "system",
        content: `You are an expert podcast script writer who creates engaging and well-structured scripts.
        Always include clear segment transitions, natural dialogue, and appropriate pacing.
        Format the script with clear speaker indicators, timing suggestions, and segment breaks.`,
      },
      {
        role: "user",
        content: `Create a ${duration}-minute podcast script about "${topic}" in a ${style} style.
        Target Audience: ${targetAudience}
        ${keyPoints ? `Key Points to Cover:\n${keyPoints}` : ""}
        
        Please include:
        1. Introduction with hook
        2. Clear segment structure
        3. Natural transitions
        4. Engaging questions/discussion points
        5. Clear conclusion
        6. Time markers for each segment
        
        Format the script with speaker indicators (HOST:, GUEST:, etc.) and include [SEGMENT] markers.`,
      },
    ],
  });

  return result.toDataStreamResponse();
}


================================================
File: apps/text-tools/app/api/qa-generator/generate/route.ts
================================================
import { google } from "@ai-sdk/google";
import { streamText } from "ai";

export const runtime = "edge";

export async function POST(req: Request) {
  const { content, numberOfQuestions, difficulty, topic } = await req.json();

  const result = await streamText({
    model: google("gemini-1.5-flash-latest"),
    messages: [
      {
        role: "system",
        content: `You are an expert at creating educational questions and answers. 
        Generate clear, engaging questions with detailed, accurate answers.
        Format each Q&A pair clearly with numbers and separate sections for questions and answers.`,
      },
      {
        role: "user",
        content: `Generate ${numberOfQuestions} ${difficulty}-level questions and answers ${
          content
            ? "based on the following content:\n\n" + content
            : "about the topic: " + topic
        }

        Requirements:
        1. Questions should be thought-provoking and appropriate for the ${difficulty} difficulty level
        2. Answers should be comprehensive and educational
        3. Include a mix of question types (e.g., conceptual, analytical, application-based)
        4. Format the output clearly with numbered questions and corresponding answers
        5. For each answer, provide a brief explanation of why it's correct
        
        Format example:
        Questions:
        1. [Question 1]
        2. [Question 2]
        ...

        Answers:
        1. [Answer 1]
        Explanation: [Why this is the correct answer]
        
        2. [Answer 2]
        Explanation: [Why this is the correct answer]
        ...`,
      },
    ],
  });

  return result.toDataStreamResponse();
}


================================================
File: apps/text-tools/app/api/tiktok-hooks-generator/generate/route.ts
================================================
import { google } from "@ai-sdk/google";
import { streamText } from "ai";

export async function POST(req: Request) {
  const { topic, tone } = await req.json();

  const result = await streamText({
    model: google("gemini-1.5-flash-latest"),
    messages: [
      {
        role: "system",
        content:
          "You are an expert TikTok content creator who specializes in creating engaging hooks (first 3 seconds) for videos.",
      },
      {
        role: "user",
        content: `Generate 3 attention-grabbing TikTok hooks for a video about "${topic}". The tone should be ${tone}. Each hook should be short, punchy, and make viewers want to keep watching.`,
      },
    ],
  });

  return result.toDataStreamResponse();
}


================================================
File: apps/text-tools/app/api/youtube-summarizer/generate/route.ts
================================================
import { google } from "@ai-sdk/google";
import { streamText } from "ai";
import { getYouTubeVideoInfo } from "@/lib/youtube";

export async function POST(req: Request) {
  const { videoUrl, style } = await req.json();

  try {
    const videoInfo = await getYouTubeVideoInfo(videoUrl);

    const result = await streamText({
      model: google("gemini-1.5-flash-latest"),
      messages: [
        {
          role: "system",
          content:
            "You are an expert at summarizing YouTube videos in different styles.",
        },
        {
          role: "user",
          content: `Summarize this YouTube video in a ${style} style:
          Title: ${videoInfo.title}
          Description: ${videoInfo.description}
          Duration: ${videoInfo.duration}
          
          ${style === "bullet-points" ? "Use bullet points for the summary." : ""}
          ${style === "key-takeaways" ? "Focus on the main takeaways and lessons." : ""}
          ${style === "concise" ? "Keep it brief and to the point." : ""}
          ${style === "detailed" ? "Provide a comprehensive summary." : ""}`,
        },
      ],
    });

    return result.toDataStreamResponse();
  } catch (error) {
    return new Response(
      JSON.stringify({ error: "Failed to process YouTube video" }),
      { status: 400 },
    );
  }
}


================================================
File: apps/text-tools/app/components/markdown-viewer.tsx
================================================
"use client";

import { cn } from "@makefy/ui/lib/utils";
import Markdown from "react-markdown";
import rehypeRaw from "rehype-raw";
import remarkGfm from "remark-gfm";

interface MarkdownViewerProps {
  content: string;
  className?: string;
}

export function MarkdownViewer({ content, className }: MarkdownViewerProps) {
  return (
    <Markdown
      remarkPlugins={[remarkGfm]}
      rehypePlugins={[rehypeRaw]}
      className={cn("prose dark:prose-invert max-w-none", className)}
      components={{
        // Text elements
        p: ({ children }) => <p className="mb-4 text-sm">{children}</p>,
        h1: ({ children }) => (
          <h1 className="mb-4 mt-6 text-2xl font-bold">{children}</h1>
        ),
        h2: ({ children }) => (
          <h2 className="mb-3 mt-5 text-xl font-bold">{children}</h2>
        ),
        h3: ({ children }) => (
          <h3 className="mb-3 mt-4 text-lg font-bold">{children}</h3>
        ),

        // Lists
        ul: ({ children }) => (
          <ul className="mb-4 list-disc space-y-2 pl-6">{children}</ul>
        ),
        ol: ({ children }) => (
          <ol className="mb-4 list-decimal space-y-2 pl-6">{children}</ol>
        ),
        li: ({ children }) => <li className="text-sm">{children}</li>,

        // Links and emphasis
        a: ({ children, href }) => (
          <a
            href={href}
            className="text-primary hover:underline"
            target="_blank"
            rel="noopener noreferrer"
          >
            {children}
          </a>
        ),
        strong: ({ children }) => (
          <strong className="font-bold">{children}</strong>
        ),
        em: ({ children }) => <em className="italic">{children}</em>,

        // Code blocks
        pre: ({ children }) => (
          <pre className="bg-muted mb-4 overflow-x-auto rounded-lg p-4">
            {children}
          </pre>
        ),
        code: ({ children }) => (
          <code className="bg-muted rounded-md px-1.5 py-0.5 text-sm">
            {children}
          </code>
        ),

        // Blockquotes
        blockquote: ({ children }) => (
          <blockquote className="border-primary mb-4 border-l-4 pl-4 italic">
            {children}
          </blockquote>
        ),

        // Tables
        table: ({ children }) => (
          <div className="mb-4 overflow-x-auto">
            <table className="divide-border min-w-full divide-y">
              {children}
            </table>
          </div>
        ),
        th: ({ children }) => (
          <th className="bg-muted px-4 py-2 text-left text-sm font-medium">
            {children}
          </th>
        ),
        td: ({ children }) => <td className="px-4 py-2 text-sm">{children}</td>,
      }}
    >
      {content}
    </Markdown>
  );
}


================================================
File: apps/text-tools/app/components/theme-provider.tsx
================================================
"use client";

import * as React from "react";
import { ThemeProvider as NextThemesProvider } from "next-themes";
import { type ThemeProviderProps } from "next-themes/dist/types";

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>;
}


================================================
File: apps/text-tools/app/components/tool-hero.tsx
================================================
"use client";

import { motion } from "framer-motion";
import { cn } from "@makefy/ui/lib/utils";

interface ToolHeroProps {
  title: string;
  description: string;
  icon: React.ReactNode;
  className?: string;
}

export function ToolHero({
  title,
  description,
  icon,
  className,
}: ToolHeroProps) {
  return (
    <div className={cn("relative overflow-hidden py-24", className)}>
      {/* Background Pattern */}
      <div className="absolute inset-0 -z-10">
        <div className="absolute inset-0" />
        <div className="from-background to-background/60 absolute inset-0 bg-gradient-to-t" />
      </div>

      <div className="container relative">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="flex flex-col items-center text-center"
        >
          {/* Icon */}
          <motion.div
            initial={{ scale: 0.5, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            transition={{ delay: 0.2, duration: 0.5 }}
            className="bg-primary/10 text-primary mb-6 flex h-16 w-16 items-center justify-center rounded-2xl"
          >
            {icon}
          </motion.div>

          {/* Title */}
          <motion.h1
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.3, duration: 0.5 }}
            className="text-foreground mb-4 text-4xl font-bold tracking-tight sm:text-5xl"
          >
            {title}
          </motion.h1>

          {/* Description */}
          <motion.p
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.4, duration: 0.5 }}
            className="text-muted-foreground max-w-2xl text-lg"
          >
            {description}
          </motion.p>
        </motion.div>
      </div>
    </div>
  );
}


================================================
File: apps/text-tools/app/components/tool-list.tsx
================================================
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
} from "@makefy/ui/components/card";
import Link from "next/link";
import {
  VideoIcon,
  MicIcon,
  MessageSquareIcon,
  HelpCircleIcon,
} from "lucide-react";

const tools = [
  {
    title: "TikTok Hooks Generator",
    description:
      "Create engaging hooks for your TikTok videos using AI. Get attention-grabbing first 3 seconds that make viewers want to keep watching.",
    icon: <VideoIcon className="h-6 w-6" />,
    href: "/tiktok-hooks-generator",
  },
  {
    title: "YouTube Video Summarizer",
    description:
      "Get quick, accurate summaries of YouTube videos. Save time while capturing key points and main takeaways.",
    icon: <MessageSquareIcon className="h-6 w-6" />,
    href: "/youtube-summarizer",
  },
  {
    title: "Podcast Script Generator",
    description:
      "Generate professional podcast scripts tailored to your topic, style, and audience. Create engaging content with proper structure and flow.",
    icon: <MicIcon className="h-6 w-6" />,
    href: "/podcast-script-generator",
  },
  {
    title: "Q&A Generator",
    description:
      "Generate comprehensive questions and answers from any text or topic. Perfect for study materials, quizzes, and educational content.",
    icon: <HelpCircleIcon className="h-6 w-6" />,
    href: "/qa-generator",
  },
];

export function ToolList() {
  return (
    <div className="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
      {tools.map((tool) => (
        <Link key={tool.href} href={tool.href} className="group">
          <Card className="hover:bg-muted/50 h-full transition-colors">
            <CardHeader>
              <div className="bg-primary/10 text-primary mb-2 flex h-10 w-10 items-center justify-center rounded-lg">
                {tool.icon}
              </div>
              <CardTitle className="group-hover:text-primary transition-colors">
                {tool.title}
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-muted-foreground text-sm">
                {tool.description}
              </p>
            </CardContent>
          </Card>
        </Link>
      ))}
    </div>
  );
}


================================================
File: apps/text-tools/lib/youtube.ts
================================================
export type YouTubeVideoInfo = {
  videoId: string;
  title: string;
  description: string;
  duration: string;
};

export async function getYouTubeVideoInfo(
  url: string,
): Promise<YouTubeVideoInfo> {
  try {
    // Extract video ID from YouTube URL
    const videoId = extractVideoId(url);
    if (!videoId) {
      throw new Error("Invalid YouTube URL");
    }

    // For now return mock data since we don't have YouTube API access
    // In production, you would want to use YouTube Data API to get real data
    return {
      videoId,
      title: "Sample YouTube Video",
      description: "This is a sample video description",
      duration: "10:00",
    };
  } catch (error) {
    throw new Error("Failed to get YouTube video information");
  }
}

function extractVideoId(url: string): string | null {
  const patterns = [
    /(?:youtube\.com\/watch\?v=|youtu\.be\/)([^&\n?#]+)/,
    /youtube\.com\/shorts\/([^&\n?#]+)/,
  ];

  for (const pattern of patterns) {
    const match = url.match(pattern);
    if (match) {
      return match[1];
    }
  }

  return null;
}


================================================
File: apps/web/README.md
================================================
<a href="https://precedent.dev">
  <img alt="Precedent – Building blocks for your Next project" src="https://precedent.dev/opengraph-image">
  <h1 align="center">Precedent</h1>
</a>

<p align="center">
  Building blocks for your Next project
</p>

<p align="center">
  <a href="https://twitter.com/steventey">
    <img src="https://img.shields.io/twitter/follow/steventey?style=flat&label=steventey&logo=twitter&color=0bf&logoColor=fff" alt="Steven Tey Twitter follower count" />
  </a>
  <a href="https://github.com/steven-tey/precedent">
    <img src="https://img.shields.io/github/stars/steven-tey/precedent?label=steven-tey%2Fprecedent" alt="Precedent repo star count" />
  </a>
</p>

<p align="center">
  <a href="#introduction"><strong>Introduction</strong></a> ·
  <a href="#one-click-deploy"><strong>One-click Deploy</strong></a> ·
  <a href="#tech-stack--features"><strong>Tech Stack + Features</strong></a> ·
  <a href="#author"><strong>Author</strong></a>
</p>
<br/>

## Introduction

Precedent is an opinionated collection of components, hooks, and utilities for your Next.js project.

## One-click Deploy

You can deploy this template to Vercel with the button below:

[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fsteven-tey%2Fprecedent&project-name=precedent&repository-name=precedent&demo-title=Precedent&demo-description=An%20opinionated%20collection%20of%20components%2C%20hooks%2C%20and%20utilities%20for%20your%20Next%20project.&demo-url=https%3A%2F%2Fprecedent.dev&demo-image=https%3A%2F%2Fprecedent.dev%2Fopengraph-image&env=GOOGLE_CLIENT_ID,GOOGLE_CLIENT_SECRET,NEXTAUTH_SECRET&envDescription=How%20to%20get%20these%20env%20variables%3A&envLink=https%3A%2F%2Fgithub.com%2Fsteven-tey%2Fprecedent%2Fblob%2Fmain%2F.env.example&stores=%5B%7B"type"%3A"postgres"%7D%5D)

You can also clone & create this repo locally with the following command:

```bash
npx create-next-app precedent --example "https://github.com/steven-tey/precedent"
```

Then, install the dependencies with your package manager of choice:

```bash
npm i
yarn
pnpm i
```

## Tech Stack + Features

https://user-images.githubusercontent.com/28986134/212368288-12f41e37-aa8c-4e0a-a542-cf6d23410a65.mp4

### Frameworks

- [Next.js](https://nextjs.org/) – React framework for building performant apps with the best developer experience
- [Auth.js](https://authjs.dev/) – Handle user authentication with ease with providers like Google, Twitter, GitHub, etc.
- [Prisma](https://www.prisma.io/) – Typescript-first ORM for Node.js

### Platforms

- [Vercel](https://vercel.com/) – Easily preview & deploy changes with git
- [Vercel Postgres](https://vercel.com/postgres) – Serverless Postgres at the Edge

### UI

- [Tailwind CSS](https://tailwindcss.com/) – Utility-first CSS framework for rapid UI development
- [Radix](https://www.radix-ui.com/) – Primitives like modal, popover, etc. to build a stellar user experience
- [Framer Motion](https://framer.com/motion) – Motion library for React to animate components with ease
- [Lucide](https://lucide.dev/) – Beautifully simple, pixel-perfect icons
- [`next/font`](https://nextjs.org/docs/basic-features/font-optimization) – Optimize custom fonts and remove external network requests for improved performance
- [`ImageResponse`](https://nextjs.org/docs/app/api-reference/functions/image-response) – Generate dynamic Open Graph images at the edge

### Hooks and Utilities

- `useIntersectionObserver` –  React hook to observe when an element enters or leaves the viewport
- `useLocalStorage` – Persist data in the browser's local storage
- `useScroll` – React hook to observe scroll position ([example](https://github.com/steven-tey/precedent/blob/main/components/layout/navbar.tsx#L12))
- `nFormatter` – Format numbers with suffixes like `1.2k` or `1.2M`
- `capitalize` – Capitalize the first letter of a string
- `truncate` – Truncate a string to a specified length
- [`use-debounce`](https://www.npmjs.com/package/use-debounce) – Debounce a function call / state update

### Code Quality

- [TypeScript](https://www.typescriptlang.org/) – Static type checker for end-to-end typesafety
- [Prettier](https://prettier.io/) – Opinionated code formatter for consistent code style
- [ESLint](https://eslint.org/) – Pluggable linter for Next.js and TypeScript

### Miscellaneous

- [Vercel Analytics](https://vercel.com/analytics) – Track unique visitors, pageviews, and more in a privacy-friendly way

## Author

- Steven Tey ([@steventey](https://twitter.com/steventey))


================================================
File: apps/web/LICENSE.md
================================================
MIT License

Copyright (c) 2023 Steven Tey

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


================================================
File: apps/web/components.json
================================================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "app/globals.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@makefy/ui/components",
    "utils": "@makefy/ui/src/lib/utils"
  }
}

================================================
File: apps/web/next.config.js
================================================
/** @type {import('next').NextConfig} */
const nextConfig = {
  webpack: function (config) {
    /**
     * Critical: prevents " ⨯ ./node_modules/canvas/build/Release/canvas.node
     * Module parse failed: Unexpected character '�' (1:0)" error
     */
    config.resolve.alias.canvas = false;

    // You may not need this, it's just to support moduleResolution: 'node16'
    config.resolve.extensionAlias = {
      '.js': ['.js', '.ts', '.tsx'],
    };

    config.module.rules.push({
      test: /\.svg$/,
      use: ['@svgr/webpack'],
    });

    return config;
  },
  experimental: {
    turbo: {
      loaders: {
        '.svg': ['@svgr/webpack'],
      }
    }
  },
  transpilePackages: ['@makefy/ui'],
  reactStrictMode: true,
  swcMinify: true,
};

module.exports = nextConfig;


================================================
File: apps/web/package.json
================================================
{
  "name": "@makefy/web",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "format:write": "prettier --write \"**/*.{css,js,json,jsx,ts,tsx}\"",
    "format": "prettier \"**/*.{css,js,json,jsx,ts,tsx}\"",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@makefy/ui": "workspace:*",
    "@upstash/ratelimit": "2.0.1",
    "@vercel/kv": "2.0.0",
    "framer-motion": "11.3.2",
    "lucide-react": "0.408.0",
    "react-hook-form": "7.52.1",
    "next": "14.2.5",
    "next-plausible": "3.12.2",
    "react": "18.3.1",
    "react-dom": "18.3.1",
    "resend": "4.0.0"
  },
  "devDependencies": {
    "@svgr/webpack": "^8.1.0",
    "@types/node": "20",
    "@types/react": "18.2.61",
    "@types/react-dom": "18.2.19",
    "autoprefixer": "10.4.16",
    "postcss": "8.4.31",
    "tailwindcss": "3.4.14",
    "tailwindcss-animate": "1.0.7",
    "zod": "3.23.8"
  }
}

================================================
File: apps/web/postcss.config.js
================================================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};


================================================
File: apps/web/robots.txt
================================================
Sitemap: https://precedent.dev/sitemap.xml

User-agent: *
Disallow: /api


================================================
File: apps/web/tailwind.config.ts
================================================
import path from "path";
import type { Config as TailwindConfig } from "tailwindcss";
import { default as uiTailwindConfig } from "@makefy/ui/tailwind.config";

const config: TailwindConfig = {
  darkMode: ["class"],
  content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
    // Makefy ui components
    path.join(
      path.dirname(require.resolve("@makefy/ui")),
      "components/**/*.{ts,tsx}",
    ),
  ],
  theme: {
    ...uiTailwindConfig.theme,
  },
  plugins: [...uiTailwindConfig.plugins],
};

export default config;


================================================
File: apps/web/tsconfig.json
================================================
{
  "extends": "@makefy/typescript-config/nextjs.json",
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "baseUrl": ".",
    "paths": {
      "@/components/*": [
        "app/components/*"
      ],
      "@/pages/*": [
        "pages/*"
      ],
      "@/app/*": [
        "app/*"
      ],
      "@/lib/*": [
        "lib/*"
      ],
      "@/styles/*": [
        "styles/*"
      ],
      "@/public/*": [
        "public/*"
      ]
    },
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ]
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts"
  ],
  "exclude": [
    "node_modules"
  ]
}

================================================
File: apps/web/turbo.json
================================================
{
    "extends": [
        "//"
    ],
    "tasks": {
        "build": {
            "outputs": [
                ".next/**",
                "!.next/cache/**"
            ]
        }
    }
}

================================================
File: apps/web/vercel.json
================================================
{
    "rewrites": [
        {
            "source": "/js/script.js",
            "destination": "https://plausible.io/js/script.js"
        },
        {
            "source": "/api/event",
            "destination": "https://plausible.io/api/event"
        }
    ]
}

================================================
File: apps/web/.gitignore
================================================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# local env files
.env*.local
.env

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

# misc
.vscode


================================================
File: apps/web/actions/resend-create-contact.ts
================================================
"use server";

import { Ratelimit } from "@upstash/ratelimit";
import { kv } from "@vercel/kv";
import { headers } from "next/headers";
import { Resend } from "resend";

const resend = new Resend(process.env.RESEND_API_KEY);

const ratelimit = new Ratelimit({
  redis: kv,
  // rate limit to 10 requests per 24 hours
  limiter: Ratelimit.slidingWindow(10, "24h"),
});

export async function resendCreateContact(email: string) {
  const ip = headers().get("x-forwarded-for") ?? "127.0.0.1";
  const { success } = await ratelimit.limit(ip);

  if (!success) {
    return {
      data: null,
      error: {
        message:
          "You already registered too many emails. Please try again later.",
      },
    };
  }

  const res = await resend.contacts.create({
    email,
    audienceId: process.env.RESEND_GENERAL_AUDIENCE_ID!,
  });
  return res;
}


================================================
File: apps/web/app/globals.css
================================================
@tailwind base;
@tailwind components;
@tailwind utilities;


================================================
File: apps/web/app/layout.tsx
================================================
import "./globals.css";
import "@makefy/ui/globals.css";
import { sfPro, inter } from "./fonts";
import Nav from "@/app/components/layout/nav";
import { BackgroundBeamsWithCollision } from "./components/shared/background-beams-with-collision.tsx";
import { cn } from "@makefy/ui/lib/utils";
import { Toaster } from "@makefy/ui";
import PlausibleProvider from "next-plausible";

export const metadata = {
  title: "Makefy - Tools that make your life easier",
  description:
    "Makefy is all you need to make your life easier. It includes such useful tools as a chat with your PDF app, a media file sharing app, and a QR code generator.",
  icons: {
    icon: [
      {
        rel: "icon",
        url: "/icon2.svg",
        media: "(prefers-color-scheme: dark)",
        type: "image/svg+xml",
      },
      {
        rel: "icon",
        url: "/icon2.svg",
        media: "(prefers-color-scheme: light)",
        type: "image/svg+xml",
      },
      {
        rel: "apple-touch-icon",
        url: "/icon2.svg",
      },
    ],
  },
};

export default async function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en" className="dark">
      <head>
        <PlausibleProvider domain="makefy.app" enabled />
      </head>
      <body className={cn(sfPro.variable, inter.variable)}>
        <Nav />
        <Toaster />
        <main className="bg-background flex min-h-screen w-full flex-col items-center justify-center py-32">
          <BackgroundBeamsWithCollision className="fixed top-0 h-screen">
            {children}
          </BackgroundBeamsWithCollision>
        </main>
      </body>
    </html>
  );
}


================================================
File: apps/web/app/page.tsx
================================================
import Hero from "@/components/hero";

export default function HomePage() {
  return <Hero />;
}


================================================
File: apps/web/app/components/hero.tsx
================================================
"use client";

import { TextRotate } from "@/components/shared/text-rotate";
import { WaitListForm } from "@/components/wait-list-form";
import LogoHorizontal from "@/public/logo-horizontal.svg";
import { useEffect, useState } from "react";

const dynamicTexts = ["optimize it", "simplify it", "accelerate it"];

export default function Hero() {
  const [currentDynamicText, setCurrentDynamicText] = useState<string>(
    dynamicTexts[0]!,
  );

  useEffect(handleTextChange, []);

  function handleTextChange() {
    const timeout = setTimeout(() => {
      // Change the text incrementally
      setCurrentDynamicText((_currentDynamicText) => {
        const currentIndex = dynamicTexts.indexOf(_currentDynamicText);
        const nextIndex =
          currentIndex + 1 >= dynamicTexts.length ? 0 : currentIndex + 1;
        return dynamicTexts[nextIndex]!;
      });
      handleTextChange();
    }, 5000);

    return () => clearTimeout(timeout);
  }

  return (
    <div className="flex w-full flex-col items-center justify-center">
      <div className="absolute top-0 z-[-2] h-screen w-screen bg-neutral-950 bg-[radial-gradient(ellipse_80%_80%_at_50%_-20%,rgba(120,119,198,0.3),rgba(255,255,255,0))]"></div>
      <div className="z-10 flex w-full max-w-3xl flex-col justify-center px-5 xl:px-0">
        <div className="animate-in fade-in slide-in-from-bottom-10 flex aspect-square h-10 items-center justify-center rounded-md transition-colors duration-1000">
          <LogoHorizontal className="fill-accent-foreground h-full w-auto" />
        </div>
        <h1 className="animate-in fade-in slide-in-from-bottom-10 mt-6 bg-gradient-to-br from-white to-gray-400 bg-clip-text text-center text-4xl font-bold tracking-tighter text-transparent drop-shadow-sm duration-1000 [text-wrap:balance] md:text-6xl md:leading-[5rem]">
          Let AI{" "}
          <div className="relative inline-block">
            <div className="relative">
              <TextRotate className="bg-gradient-to-r from-blue-500 via-purple-500 to-pink-500 bg-clip-text text-transparent [text-shadow:_0_1px_10px_rgb(59_130_246_/_30%)]">
                {currentDynamicText}
              </TextRotate>
            </div>
          </div>
        </h1>
        <p
          className="animate-in fade-in slide-in-from-bottom-10 delay-250 mt-6 text-center text-gray-500 duration-1000 [text-wrap:balance] md:text-xl"
          style={{ animationFillMode: "forwards" }}
        >
          Makefy is a collection of tools with AI to make your life easier than
          ever. Join the waitlist to get early access.
        </p>
        <div className="animate-in fade-in slide-in-from-bottom-10 fill-mode-forwards mx-auto mt-6 flex items-center justify-center space-x-5 delay-300 duration-1000">
          <WaitListForm />
        </div>
      </div>
    </div>
  );
}


================================================
File: apps/web/app/components/wait-list-form.tsx
================================================
import { Button, Form, FormField, Input, useToast } from "@makefy/ui";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { ArrowRight, Loader2 } from "lucide-react";
import { cn } from "@makefy/ui/lib/utils";
import { resendCreateContact } from "actions/resend-create-contact";

const waitListFormSchema = z.object({
  email: z.string().email(),
});

type WaitListFormProps = {
  className?: string;
};

export function WaitListForm({ className }: WaitListFormProps) {
  const waitListForm = useForm<z.infer<typeof waitListFormSchema>>({
    resolver: zodResolver(waitListFormSchema),
  });

  const { toast } = useToast();

  async function onSubmit(data: z.infer<typeof waitListFormSchema>) {
    const { data: resendData, error } = await resendCreateContact(data.email);
    toast({
      title: error
        ? "Ups something went wrong"
        : "We added you to the waitlist",
      description: error ? error?.message : "We'll be in touch soon",
    });

    if (resendData) {
      waitListForm.reset({ email: "" });
    }
  }

  return (
    <Form {...waitListForm}>
      <form
        className={cn("flex items-center gap-2", className)}
        onSubmit={waitListForm.handleSubmit(onSubmit)}
      >
        <FormField
          control={waitListForm.control}
          name="email"
          render={({ field }) => (
            <Input
              type="email"
              placeholder="Email"
              className="border-neutral-800 bg-neutral-900/50"
              {...field}
            />
          )}
        />
        <Button
          type="submit"
          className="relative transition-opacity hover:opacity-90"
          variant="outline"
          disabled={
            waitListForm.formState.isSubmitting ||
            !waitListForm.formState.isValid
          }
        >
          Subscribe{" "}
          {waitListForm.formState.isSubmitting && (
            <Loader2 className="ml-2 h-4 w-4 animate-spin" />
          )}
          {!waitListForm.formState.isSubmitting && (
            <ArrowRight className="ml-2 h-4 w-4" />
          )}
          <div className="absolute inset-0 rounded-md bg-gradient-to-r from-indigo-500/20 via-purple-500/20 to-pink-500/20 blur-xl"></div>
        </Button>
      </form>
    </Form>
  );
}


================================================
File: apps/web/app/components/layout/nav.tsx
================================================
import Navbar from "./navbar";

export default async function Nav() {
  return <Navbar />;
}


================================================
File: apps/web/app/components/layout/navbar.tsx
================================================
import { Button } from "@makefy/ui";
import Link from "next/link";

export default function NavBar() {
  return (
    <div
      className={`fixed top-0 z-30 flex w-full justify-center transition-all`}
    >
      <div className="mx-5 flex h-16 w-full max-w-screen-xl items-center justify-between">
        <div className="flex flex-row gap-8"></div>
        <div>
          <div className="flex items-center gap-4">
            <Button variant="ghost" size="icon" asChild>
              <Link
                href="https://x.com/intent/follow?screen_name=makefyapp"
                target="_blank"
                rel="noopener noreferrer"
                aria-label="X (Twitter)"
              >
                <svg
                  className="fill-muted-foreground h-5 w-5"
                  fill="currentColor"
                  viewBox="0 0 24 24"
                  aria-hidden="true"
                >
                  <path d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z" />
                </svg>
              </Link>
            </Button>
            <Button variant="ghost" size="icon" asChild>
              <Link
                href="https://www.linkedin.com/in/dartiles/"
                target="_blank"
                rel="noopener noreferrer"
                aria-label="LinkedIn"
              >
                <svg
                  className="fill-muted-foreground h-5 w-5"
                  fill="currentColor"
                  viewBox="0 0 24 24"
                  aria-hidden="true"
                >
                  <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z" />
                </svg>
              </Link>
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
}


================================================
File: apps/web/app/components/shared/background-beams-with-collision.tsx.tsx
================================================
"use client";

import { cn } from "@makefy/ui/lib/utils";
import { motion, AnimatePresence } from "framer-motion";
import React, { useRef, useState, useEffect } from "react";

export const BackgroundBeamsWithCollision = ({
  children,
  className,
}: {
  children: React.ReactNode;
  className?: string;
}) => {
  const containerRef = useRef<HTMLDivElement>(null);
  const parentRef = useRef<HTMLDivElement>(null);

  const beams = [
    {
      initialX: 10,
      translateX: 10,
      duration: 7,
      repeatDelay: 3,
      delay: 2,
    },
    {
      initialX: 600,
      translateX: 600,
      duration: 3,
      repeatDelay: 3,
      delay: 4,
    },
    {
      initialX: 100,
      translateX: 100,
      duration: 7,
      repeatDelay: 7,
      className: "h-6",
    },
    {
      initialX: 400,
      translateX: 400,
      duration: 5,
      repeatDelay: 14,
      delay: 4,
    },
    {
      initialX: 800,
      translateX: 800,
      duration: 11,
      repeatDelay: 2,
      className: "h-20",
    },
    {
      initialX: 1000,
      translateX: 1000,
      duration: 4,
      repeatDelay: 2,
      className: "h-12",
    },
    {
      initialX: 1200,
      translateX: 1200,
      duration: 6,
      repeatDelay: 4,
      delay: 2,
      className: "h-6",
    },
  ];

  return (
    <div
      ref={parentRef}
      className={cn(
        "relative flex h-96 w-full items-center justify-center overflow-hidden",
        // h-screen if you want bigger
        className,
      )}
    >
      {beams.map((beam) => (
        <CollisionMechanism
          key={beam.initialX + "beam-idx"}
          beamOptions={beam}
          containerRef={containerRef as React.RefObject<HTMLDivElement>}
          parentRef={parentRef as React.RefObject<HTMLDivElement>}
        />
      ))}

      {children}
      <div
        ref={containerRef}
        className="pointer-events-none absolute inset-x-0 bottom-0 w-full bg-neutral-100"
        style={{
          boxShadow:
            "0 0 24px rgba(34, 42, 53, 0.06), 0 1px 1px rgba(0, 0, 0, 0.05), 0 0 0 1px rgba(34, 42, 53, 0.04), 0 0 4px rgba(34, 42, 53, 0.08), 0 16px 68px rgba(47, 48, 55, 0.05), 0 1px 0 rgba(255, 255, 255, 0.1) inset",
        }}
      ></div>
    </div>
  );
};

const CollisionMechanism = React.forwardRef<
  HTMLDivElement,
  {
    containerRef: React.RefObject<HTMLDivElement>;
    parentRef: React.RefObject<HTMLDivElement>;
    beamOptions?: {
      initialX?: number;
      translateX?: number;
      initialY?: number;
      translateY?: number;
      rotate?: number;
      className?: string;
      duration?: number;
      delay?: number;
      repeatDelay?: number;
    };
  }
>(({ parentRef, containerRef, beamOptions = {} }, ref) => {
  const beamRef = useRef<HTMLDivElement>(null);
  const [collision, setCollision] = useState<{
    detected: boolean;
    coordinates: { x: number; y: number } | null;
  }>({
    detected: false,
    coordinates: null,
  });
  const [beamKey, setBeamKey] = useState(0);
  const [cycleCollisionDetected, setCycleCollisionDetected] = useState(false);

  useEffect(() => {
    const checkCollision = () => {
      if (
        beamRef.current &&
        containerRef.current &&
        parentRef.current &&
        !cycleCollisionDetected
      ) {
        const beamRect = beamRef.current.getBoundingClientRect();
        const containerRect = containerRef.current.getBoundingClientRect();
        const parentRect = parentRef.current.getBoundingClientRect();

        if (beamRect.bottom >= containerRect.top) {
          const relativeX =
            beamRect.left - parentRect.left + beamRect.width / 2;
          const relativeY = beamRect.bottom - parentRect.top;

          setCollision({
            detected: true,
            coordinates: {
              x: relativeX,
              y: relativeY,
            },
          });
          setCycleCollisionDetected(true);
        }
      }
    };

    const animationInterval = setInterval(checkCollision, 50);

    return () => clearInterval(animationInterval);
  }, [cycleCollisionDetected, containerRef]);

  useEffect(() => {
    if (collision.detected && collision.coordinates) {
      setTimeout(() => {
        setCollision({ detected: false, coordinates: null });
        setCycleCollisionDetected(false);
      }, 2000);

      setTimeout(() => {
        setBeamKey((prevKey) => prevKey + 1);
      }, 2000);
    }
  }, [collision]);

  return (
    <>
      <motion.div
        key={beamKey}
        ref={beamRef}
        animate="animate"
        initial={{
          translateY: beamOptions.initialY || "-200px",
          translateX: beamOptions.initialX || "0px",
          rotate: beamOptions.rotate || 0,
        }}
        variants={{
          animate: {
            translateY: beamOptions.translateY || "1800px",
            translateX: beamOptions.translateX || "0px",
            rotate: beamOptions.rotate || 0,
          },
        }}
        transition={{
          duration: beamOptions.duration || 8,
          repeat: Infinity,
          repeatType: "loop",
          ease: "linear",
          delay: beamOptions.delay || 0,
          repeatDelay: beamOptions.repeatDelay || 0,
        }}
        className={cn(
          "absolute left-0 top-20 m-auto h-14 w-px rounded-full bg-gradient-to-t from-indigo-500 via-purple-500 to-transparent",
          beamOptions.className!,
        )}
      />
      <AnimatePresence>
        {collision.detected && collision.coordinates && (
          <Explosion
            key={`${collision.coordinates.x}-${collision.coordinates.y}`}
            className=""
            style={{
              left: `${collision.coordinates.x}px`,
              top: `${collision.coordinates.y}px`,
              transform: "translate(-50%, -50%)",
            }}
          />
        )}
      </AnimatePresence>
    </>
  );
});

CollisionMechanism.displayName = "CollisionMechanism";

const Explosion = ({ ...props }: React.HTMLProps<HTMLDivElement>) => {
  const spans = Array.from({ length: 20 }, (_, index) => ({
    id: index,
    initialX: 0,
    initialY: 0,
    directionX: Math.floor(Math.random() * 80 - 40),
    directionY: Math.floor(Math.random() * -50 - 10),
  }));

  return (
    <div {...props} className={cn("absolute z-50 h-2 w-2", props.className)}>
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
        transition={{ duration: 1.5, ease: "easeOut" }}
        className="absolute -inset-x-10 top-0 m-auto h-2 w-10 rounded-full bg-gradient-to-r from-transparent via-indigo-500 to-transparent blur-sm"
      ></motion.div>
      {spans.map((span) => (
        <motion.span
          key={span.id}
          initial={{ x: span.initialX, y: span.initialY, opacity: 1 }}
          animate={{
            x: span.directionX,
            y: span.directionY,
            opacity: 0,
          }}
          transition={{ duration: Math.random() * 1.5 + 0.5, ease: "easeOut" }}
          className="absolute h-1 w-1 rounded-full bg-gradient-to-b from-indigo-500 to-purple-500"
        />
      ))}
    </div>
  );
};


================================================
File: apps/web/app/components/shared/text-morph.tsx
================================================
"use client";

import { cn } from "@makefy/ui/lib/utils";
import { AnimatePresence, motion } from "framer-motion";
import { useMemo, useId } from "react";

type TextMorphProps = {
  children: string;
  as?: React.ElementType;
  className?: string;
  style?: React.CSSProperties;
};

export function TextMorph({
  children,
  as: Component = "p",
  className,
  style,
}: TextMorphProps) {
  const uniqueId = useId();

  const characters = useMemo(() => {
    const charCounts: Record<string, number> = {};

    return children.split("").map((char, index) => {
      const lowerChar = char.toLowerCase();
      charCounts[lowerChar] = (charCounts[lowerChar] || 0) + 1;

      return {
        id: `${uniqueId}-${lowerChar}${charCounts[lowerChar]}`,
        label: index === 0 ? char.toUpperCase() : lowerChar,
      };
    });
  }, [children, uniqueId]);

  return (
    <Component className={cn(className)} aria-label={children} style={style}>
      <AnimatePresence mode="popLayout" initial={false}>
        {characters.map((character) => (
          <motion.span
            key={character.id}
            layoutId={character.id}
            className="inline-block"
            aria-hidden="true"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{
              type: "spring",
              stiffness: 280,
              damping: 18,
              mass: 0.3,
            }}
          >
            {character.label}
          </motion.span>
        ))}
      </AnimatePresence>
    </Component>
  );
}


================================================
File: apps/web/app/components/shared/text-rotate.tsx
================================================
import { cn } from "@makefy/ui/lib/utils";
import { AnimatePresence, motion } from "framer-motion";

type TextRotateProps = {
  children: string;
  as?: React.ElementType;
  className?: string;
  style?: React.CSSProperties;
};

export const TextRotate = ({
  children,
  as: Component = "span",
  className,
  style,
}: TextRotateProps) => {
  return (
    <Component className={cn(className, "relative")} style={style}>
      <AnimatePresence mode="popLayout">
        <span className="opacity-0">{children}</span>
        <motion.span
          className="absolute left-0 inline-block bg-inherit bg-gradient-to-br from-inherit to-inherit bg-clip-text text-inherit"
          key={children}
          initial={{ y: 20, opacity: 0, scale: 0.8 }}
          animate={{ y: 0, opacity: 1, scale: 1 }}
          exit={{ y: -20, opacity: 0, scale: 0.8 }}
          transition={{ ease: "easeInOut", duration: 0.5 }}
          whileHover={{ scale: 1.05 }}
        >
          {children}
        </motion.span>
      </AnimatePresence>
    </Component>
  );
};


================================================
File: apps/web/app/components/shared/text-scramble.tsx
================================================
import { cn } from "@makefy/ui/lib/utils";
import React, { useState, useEffect } from "react";

type TextScrambleProps = {
  children: string;
  as?: React.ElementType;
  className?: string;
  style?: React.CSSProperties;
};

export function TextScramble({
  children,
  as: Component = "p",
  className,
  style,
}: TextScrambleProps) {
  const [text, setText] = useState("");
  const finalText = children;
  const chars = "!<>-_\\/[]{}—=+*^?#________";

  useEffect(() => {
    let iteration = 0;
    const interval = setInterval(() => {
      setText((prevText) =>
        finalText
          .split("")
          .map((letter, index) => {
            if (index < iteration) {
              return finalText[index];
            }
            return chars[Math.floor(Math.random() * chars.length)];
          })
          .join(""),
      );

      if (iteration >= finalText.length) {
        clearInterval(interval);
      }

      iteration += 1 / 3;
    }, 30);

    return () => clearInterval(interval);
  }, [children]);

  return (
    <Component className={cn(className)} aria-label={children} style={style}>
      {text}
    </Component>
  );
}


================================================
File: apps/web/app/fonts/index.ts
================================================
import localFont from "next/font/local";
import { Inter } from "next/font/google";

export const sfPro = localFont({
  src: "./SF-Pro-Display-Medium.otf",
  variable: "--font-sf",
});

export const inter = Inter({
  variable: "--font-inter",
  subsets: ["latin"],
});


================================================
File: apps/web/lib/constants.ts
================================================
export const DEPLOY_URL = `https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fsteven-tey%2Fprecedent&project-name=precedent&repository-name=precedent&demo-title=Precedent&demo-description=An%20opinionated%20collection%20of%20components%2C%20hooks%2C%20and%20utilities%20for%20your%20Next%20project.&demo-url=https%3A%2F%2Fprecedent.dev&demo-image=https%3A%2F%2Fprecedent.dev%2Fopengraph-image&env=GOOGLE_CLIENT_ID,GOOGLE_CLIENT_SECRET,NEXTAUTH_SECRET&envDescription=How%20to%20get%20these%20env%20variables%3A&envLink=https%3A%2F%2Fgithub.com%2Fsteven-tey%2Fprecedent%2Fblob%2Fmain%2F.env.example&stores=%5B%7B"type"%3A"postgres"%7D%5D`;


================================================
File: apps/web/lib/hooks/use-intersection-observer.ts
================================================
import { RefObject, useEffect, useState } from "react";

interface Args extends IntersectionObserverInit {
  freezeOnceVisible?: boolean;
}

function useIntersectionObserver(
  elementRef: RefObject<Element | null>,
  {
    threshold = 0,
    root = null,
    rootMargin = "0%",
    freezeOnceVisible = false,
  }: Args,
): IntersectionObserverEntry | undefined {
  const [entry, setEntry] = useState<IntersectionObserverEntry>();

  const frozen = entry?.isIntersecting && freezeOnceVisible;

  const updateEntry = ([entry]: IntersectionObserverEntry[]): void => {
    setEntry(entry);
  };

  useEffect(() => {
    const node = elementRef?.current; // DOM Ref
    const hasIOSupport = !!window.IntersectionObserver;

    if (!hasIOSupport || frozen || !node) return;

    const observerParams = { threshold, root, rootMargin };
    const observer = new IntersectionObserver(updateEntry, observerParams);

    observer.observe(node);

    return () => observer.disconnect();

    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [threshold, root, rootMargin, frozen]);

  return entry;
}

export default useIntersectionObserver;


================================================
File: apps/web/lib/hooks/use-local-storage.ts
================================================
import { useEffect, useState } from "react";

const useLocalStorage = <T>(
  key: string,
  initialValue: T,
): [T, (value: T) => void] => {
  const [storedValue, setStoredValue] = useState(initialValue);

  useEffect(() => {
    // Retrieve from localStorage
    const item = window.localStorage.getItem(key);
    if (item) {
      setStoredValue(JSON.parse(item));
    }
  }, [key]);

  const setValue = (value: T) => {
    // Save state
    setStoredValue(value);
    // Save to localStorage
    window.localStorage.setItem(key, JSON.stringify(value));
  };
  return [storedValue, setValue];
};

export default useLocalStorage;


================================================
File: apps/web/lib/hooks/use-media-query.ts
================================================
import { useEffect, useState } from "react";

export default function useMediaQuery() {
  const [device, setDevice] = useState<"mobile" | "tablet" | "desktop" | null>(
    null,
  );
  const [dimensions, setDimensions] = useState<{
    width: number;
    height: number;
  } | null>(null);

  useEffect(() => {
    const checkDevice = () => {
      if (window.matchMedia("(max-width: 640px)").matches) {
        setDevice("mobile");
      } else if (
        window.matchMedia("(min-width: 641px) and (max-width: 1024px)").matches
      ) {
        setDevice("tablet");
      } else {
        setDevice("desktop");
      }
      setDimensions({ width: window.innerWidth, height: window.innerHeight });
    };

    // Initial detection
    checkDevice();

    // Listener for windows resize
    window.addEventListener("resize", checkDevice);

    // Cleanup listener
    return () => {
      window.removeEventListener("resize", checkDevice);
    };
  }, []);

  return {
    device,
    width: dimensions?.width,
    height: dimensions?.height,
    isMobile: device === "mobile",
    isTablet: device === "tablet",
    isDesktop: device === "desktop",
  };
}


================================================
File: apps/web/lib/hooks/use-scroll.ts
================================================
import { useCallback, useEffect, useState } from "react";

export default function useScroll(threshold: number) {
  const [scrolled, setScrolled] = useState(false);

  const onScroll = useCallback(() => {
    setScrolled(window.pageYOffset > threshold);
  }, [threshold]);

  useEffect(() => {
    window.addEventListener("scroll", onScroll);
    return () => window.removeEventListener("scroll", onScroll);
  }, [onScroll]);

  return scrolled;
}


================================================
File: packages/eslint-config/README.md
================================================
# `@turbo/eslint-config`

Collection of internal eslint configurations.


================================================
File: packages/eslint-config/library.js
================================================
const { resolve } = require("node:path");

const project = resolve(process.cwd(), "tsconfig.json");

/** @type {import("eslint").Linter.Config} */
module.exports = {
  extends: ["eslint:recommended", "prettier", "eslint-config-turbo"],
  plugins: ["only-warn"],
  globals: {
    React: true,
    JSX: true,
  },
  env: {
    node: true,
  },
  settings: {
    "import/resolver": {
      typescript: {
        project,
      },
    },
  },
  ignorePatterns: [
    // Ignore dotfiles
    ".*.js",
    "node_modules/",
    "dist/",
  ],
  overrides: [
    {
      files: ["*.js?(x)", "*.ts?(x)"],
    },
  ],
};


================================================
File: packages/eslint-config/next.js
================================================
const { resolve } = require('node:path');

const project = resolve(process.cwd(), 'tsconfig.json');

/*
 * This is a custom ESLint configuration for use with
 * Next.js apps.
 *
 * This config extends the Vercel Engineering Style Guide.
 * For more information, see https://github.com/vercel/style-guide
 *
 */

module.exports = {
  extends: [
    require.resolve('@vercel/style-guide/eslint/node'),
    require.resolve('@vercel/style-guide/eslint/typescript'),
    require.resolve('@vercel/style-guide/eslint/browser'),
    require.resolve('@vercel/style-guide/eslint/react'),
    require.resolve('@vercel/style-guide/eslint/next'),
    // Turborepo custom eslint configuration configures the following rules:
    //  - https://github.com/vercel/turborepo/blob/main/packages/eslint-plugin-turbo/docs/rules/no-undeclared-env-vars.md
    'eslint-config-turbo',
  ].map(require.resolve),
  parserOptions: {
    project,
  },
  globals: {
    React: true,
    JSX: true,
  },
  settings: {
    'import/resolver': {
      typescript: {
        project,
      },
    },
  },
  ignorePatterns: ['node_modules/', 'dist/'],
  // add rules configurations here
  rules: {
    'import/no-default-export': 'off',
  },
};

================================================
File: packages/eslint-config/package.json
================================================
{
  "name": "@makefy/eslint-config",
  "version": "0.0.0",
  "private": true,
  "files": [
    "library.js",
    "next.js",
    "react-internal.js"
  ],
  "devDependencies": {
    "@vercel/style-guide": "latest",
    "eslint-config-turbo": "latest",
    "eslint-config-prettier": "9.1.0",
    "eslint-plugin-only-warn": "1.1.0",
    "@typescript-eslint/parser": "7.1.0",
    "@typescript-eslint/eslint-plugin": "7.1.0",
    "typescript": "5.3.3"
  }
}

================================================
File: packages/eslint-config/react-internal.js
================================================
const { resolve } = require("node:path");

const project = resolve(process.cwd(), "tsconfig.json");

/*
 * This is a custom ESLint configuration for use with
 * internal (bundled by their consumer) libraries
 * that utilize React.
 *
 * This config extends the Vercel Engineering Style Guide.
 * For more information, see https://github.com/vercel/style-guide
 *
 */

/** @type {import("eslint").Linter.Config} */
module.exports = {
  extends: ["eslint:recommended", "prettier", "eslint-config-turbo"],
  plugins: ["only-warn"],
  globals: {
    React: true,
    JSX: true,
  },
  env: {
    browser: true,
  },
  settings: {
    "import/resolver": {
      typescript: {
        project,
      },
    },
  },
  ignorePatterns: [
    // Ignore dotfiles
    ".*.js",
    "node_modules/",
    "dist/",
  ],
  overrides: [
    // Force ESLint to detect .tsx files
    { files: ["*.js?(x)", "*.ts?(x)"] },
  ],
};


================================================
File: packages/supabase/package.json
================================================
{
    "name": "@makefy/supabase",
    "version": "0.0.1",
    "private": true,
    "type": "module",
    "main": "./dist/index.js",
    "module": "./dist/index.js",
    "types": "./dist/index.d.ts",
    "files": [
        "dist"
    ],
    "exports": {
        ".": {
            "types": "./dist/index.d.ts",
            "import": "./src/index.ts",
            "default": "./dist/index.js"
        },
        "./server": {
            "types": "./dist/client/server.d.ts",
            "import": "./src/client/server.ts",
            "default": "./dist/client/server.js"
        },
        "./client": {
            "types": "./dist/client/client.d.ts",
            "import": "./src/client/client.ts",
            "default": "./dist/client/client.js"
        },
        "./middleware": {
            "types": "./dist/middleware.d.ts",
            "import": "./src/middleware.ts",
            "default": "./dist/middleware.js"
        },
        "./admin": {
            "types": "./dist/client/admin.d.ts",
            "import": "./src/client/admin.ts",
            "default": "./dist/client/admin.js"
        },
        "./types": {
            "types": "./dist/types/index.d.ts",
            "import": "./src/types/index.ts",
            "default": "./dist/types/index.js"
        }
    },
    "typesVersions": {
        "*": {
            "server": [
                "./src/client/server.ts"
            ],
            "client": [
                "./src/client/client.ts"
            ],
            "middleware": [
                "./src/middleware.ts"
            ],
            "admin": [
                "./src/client/admin.ts"
            ],
            "types": [
                "./src/types/index.ts"
            ],
            "*": [
                "./src/index.ts"
            ]
        }
    },
    "scripts": {
        "build": "tsc --build",
        "clean": "rm -rf .turbo && rm -rf node_modules && rm -rf dist",
        "lint": "eslint src/",
        "type-check": "tsc --noEmit",
        "gen:types:local": "if [ -z ${VERCEL_ENV} ]; then dotenv -e ../../.env.development.local -- supabase gen types typescript --workdir ./src --local > src/types/database.ts; fi"
    },
    "dependencies": {
        "@supabase/ssr": "0.5.1",
        "supabase": "1.219.2"
    },
    "devDependencies": {
        "@supabase/supabase-js": "2.46.1",
        "@types/node": "20.0.0",
        "tsup": "8.0.0",
        "typescript": "5.3.3"
    }
}

================================================
File: packages/supabase/tsconfig.json
================================================
{
    "extends": "@makefy/typescript-config/react-library.json",
    "compilerOptions": {
        "lib": [
            "dom",
            "ES2015"
        ],
        "module": "ESNext",
        "target": "ES6",
        "rootDir": ".",
        "outDir": "dist",
        "moduleResolution": "bundler",
        "declaration": true,
        "declarationDir": "./dist",
        "sourceMap": true,
        "esModuleInterop": true,
        "skipLibCheck": true,
        "strict": true,
        "jsx": "react-jsx",
        "baseUrl": ".",
        "paths": {
            "@makefy/supabase/*": [
                "./src/*"
            ]
        }
    },
    "include": [
        "src",
    ],
    "exclude": [
        "node_modules",
        "dist"
    ]
}

================================================
File: packages/supabase/turbo.json
================================================
{
    "extends": [
        "//"
    ],
    "tasks": {
        "build": {
            "dependsOn": [
                "@makefy/supabase#gen:types:local"
            ]
        },
        "gen:types:local": {
            "cache": false,
            "env": [
                "VERCEL_ENV"
            ]
        }
    }
}

================================================
File: packages/supabase/src/index.ts
================================================
export * from "./client/client";
export * from "./client/server";
export * from "./client/admin";
export * from "./middleware";
export * from "./types";


================================================
File: packages/supabase/src/middleware.ts
================================================
import { createServerClient, type CookieOptions } from "@supabase/ssr";
import { NextResponse, type NextRequest } from "next/server";
import type { Database, SupabaseClient } from "@makefy/supabase/types";

type MiddlewareClient = {
  supabase: SupabaseClient;
  response: NextResponse;
};

export async function createMiddlewareClient(
  request: NextRequest,
): Promise<MiddlewareClient> {
  let response = NextResponse.next({
    request: {
      headers: request.headers,
    },
  });
  // TODO: add types for example: SupabaseClient<Database>.
  // NOTE: it was removed since it was causing issues with the types.
  const supabase = createServerClient<Database>(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        get(name: string) {
          return request.cookies.get(name)?.value;
        },
        set(name: string, value: string, options: CookieOptions) {
          request.cookies.set({
            name,
            value,
            ...options,
          });
          response = NextResponse.next({
            request: {
              headers: request.headers,
            },
          });
          response.cookies.set({
            name,
            value,
            ...options,
          });
        },
        remove(name: string, options: CookieOptions) {
          request.cookies.set({
            name,
            value: "",
            ...options,
          });
          response = NextResponse.next({
            request: {
              headers: request.headers,
            },
          });
          response.cookies.set({
            name,
            value: "",
            ...options,
          });
        },
      },
    },
  );

  return { supabase, response };
}


================================================
File: packages/supabase/src/client/admin.ts
================================================
import { createClient } from "@supabase/supabase-js";
import type { Database, SupabaseAdminClient } from "@makefy/supabase/types";

if (!process.env.NEXT_PUBLIC_SUPABASE_URL) {
  throw new Error("Missing env.NEXT_PUBLIC_SUPABASE_URL");
}

if (!process.env.SUPABASE_ADMIN) {
  throw new Error("Missing env.SUPABASE_ADMIN");
}

export function createSupabaseAdmin() {
  return createClient<Database>(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.SUPABASE_ADMIN!,
    {
      auth: {
        autoRefreshToken: false,
        persistSession: false,
      },
    },
  );
}


================================================
File: packages/supabase/src/client/client.ts
================================================
import { createBrowserClient } from "@supabase/ssr";
import type { Database, SupabaseClient } from "@makefy/supabase/types";

if (!process.env.NEXT_PUBLIC_SUPABASE_URL) {
  throw new Error("Missing env.NEXT_PUBLIC_SUPABASE_URL");
}

if (!process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {
  throw new Error("Missing env.NEXT_PUBLIC_SUPABASE_ANON_KEY");
}

export function createSupabaseClient(): SupabaseClient {
  return createBrowserClient<Database>(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
  );
}


================================================
File: packages/supabase/src/client/server.ts
================================================
import { createServerClient } from "@supabase/ssr";
import { cookies } from "next/headers";
import type { Database, SupabaseClient } from "@makefy/supabase/types";

if (!process.env.NEXT_PUBLIC_SUPABASE_URL) {
  throw new Error("Missing env.NEXT_PUBLIC_SUPABASE_URL");
}

if (!process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {
  throw new Error("Missing env.NEXT_PUBLIC_SUPABASE_ANON_KEY");
}

export function createSupabaseServer(): SupabaseClient {
  const cookieStore = cookies();

  // TODO: add types for example: SupabaseClient<Database>.
  // NOTE: it was removed since it was causing issues with the types.
  return createServerClient<Database>(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        get(name: string) {
          return cookieStore.get(name)?.value;
        },
        set(name: string, value: string, options: any) {
          try {
            cookieStore.set({ name, value, ...options });
          } catch (error) {
            // Handle cookie setting error
          }
        },
        remove(name: string, options: any) {
          try {
            cookieStore.set({ name, value: "", ...options });
          } catch (error) {
            // Handle cookie removal error
          }
        },
      },
    },
  );
}


================================================
File: packages/supabase/src/supabase/config.toml
================================================
# A string used to distinguish different Supabase projects on the same host. Defaults to the
# working directory name when running `supabase init`.
project_id = "chat-with-pdf"

[api]
enabled = true
# Port to use for the API URL.
port = 54321
# Schemas to expose in your API. Tables, views and stored procedures in this schema will get API
# endpoints. `public` is always included.
schemas = ["public", "graphql_public"]
# Extra schemas to add to the search_path of every request. `public` is always included.
extra_search_path = ["public", "extensions"]
# The maximum number of rows returns from a view, table, or stored procedure. Limits payload size
# for accidental or malicious requests.
max_rows = 1000

[api.tls]
enabled = false

[db]
# Port to use for the local database URL.
port = 54322
# Port used by db diff command to initialize the shadow database.
shadow_port = 54320
# The database major version to use. This has to be the same as your remote database's. Run `SHOW
# server_version;` on the remote database to check.
major_version = 15

[db.pooler]
enabled = false
# Port to use for the local connection pooler.
port = 54329
# Specifies when a server connection can be reused by other clients.
# Configure one of the supported pooler modes: `transaction`, `session`.
pool_mode = "transaction"
# How many server connections to allow per user/database pair.
default_pool_size = 20
# Maximum number of client connections allowed.
max_client_conn = 100

[realtime]
enabled = true
# Bind realtime via either IPv4 or IPv6. (default: IPv4)
# ip_version = "IPv6"
# The maximum length in bytes of HTTP request headers. (default: 4096)
# max_header_length = 4096

[studio]
enabled = true
# Port to use for Supabase Studio.
port = 54323
# External URL of the API server that frontend connects to.
api_url = "http://127.0.0.1"
# OpenAI API Key to use for Supabase AI in the Supabase Studio.
openai_api_key = "env(OPENAI_API_KEY)"

# Email testing server. Emails sent with the local dev setup are not actually sent - rather, they
# are monitored, and you can view the emails that would have been sent from the web interface.
[inbucket]
enabled = true
# Port to use for the email testing server web interface.
port = 54324
# Uncomment to expose additional ports for testing user applications that send emails.
# smtp_port = 54325
# pop3_port = 54326

[storage]
enabled = true
# The maximum file size allowed (e.g. "5MB", "500KB").
file_size_limit = "50MiB"

[storage.image_transformation]
enabled = true

# Uncomment to configure local storage buckets
# [storage.buckets.images]
# public = false
# file_size_limit = "50MiB"
# allowed_mime_types = ["image/png", "image/jpeg"]
# objects_path = "./images"

[auth]
enabled = true
# The base URL of your website. Used as an allow-list for redirects and for constructing URLs used
# in emails.
site_url = "https://localhost:3000/"
# A list of *exact* URLs that auth providers are permitted to redirect to post authentication.
additional_redirect_urls = ["https://localhost:3000/**"]
# How long tokens are valid for, in seconds. Defaults to 3600 (1 hour), maximum 604,800 (1 week).
jwt_expiry = 3600
# If disabled, the refresh token will never expire.
enable_refresh_token_rotation = true
# Allows refresh tokens to be reused after expiry, up to the specified interval in seconds.
# Requires enable_refresh_token_rotation = true.
refresh_token_reuse_interval = 10
# Allow/disallow new user signups to your project.
enable_signup = true
# Allow/disallow anonymous sign-ins to your project.
enable_anonymous_sign_ins = false
# Allow/disallow testing manual linking of accounts
enable_manual_linking = false

[auth.email]
# Allow/disallow new user signups via email to your project.
enable_signup = true
# If enabled, a user will be required to confirm any email change on both the old, and new email
# addresses. If disabled, only the new email is required to confirm.
double_confirm_changes = true
# If enabled, users need to confirm their email address before signing in.
enable_confirmations = true
# Controls the minimum amount of time that must pass before sending another signup confirmation or password reset email.
max_frequency = "1s"

# Use a production-ready SMTP server
# [auth.email.smtp]
# host = "smtp.sendgrid.net"
# port = 587
# user = "apikey"
# pass = "env(SENDGRID_API_KEY)"
# admin_email = "admin@email.com"
# sender_name = "Admin"

# Uncomment to customize email template
# [auth.email.template.invite]
# subject = "You have been invited"
# content_path = "./supabase/templates/invite.html"

[auth.sms]
# Allow/disallow new user signups via SMS to your project.
enable_signup = true
# If enabled, users need to confirm their phone number before signing in.
enable_confirmations = false
# Template for sending OTP to users
template = "Your code is {{ .Code }} ."
# Controls the minimum amount of time that must pass before sending another sms otp.
max_frequency = "5s"

[auth.external.github]
# Allow/disallow new user signups via GitHub to your project.
enabled = true
# Set the GitHub OAuth client ID and secret.
client_id = "env(SUPABASE_AUTH_GITHUB_CLIENT_ID)"
secret = "env(SUPABASE_AUTH_GITHUB_SECRET)"
redirect_uri = "http://127.0.0.1:54321/auth/v1/callback"

# Use pre-defined map of phone number to OTP for testing.
# [auth.sms.test_otp]
# 4152127777 = "123456"

# Configure logged in session timeouts.
# [auth.sessions]
# Force log out after the specified duration.
# timebox = "24h"
# Force log out if the user has been inactive longer than the specified duration.
# inactivity_timeout = "8h"

# This hook runs before a token is issued and allows you to add additional claims based on the authentication method used.
# [auth.hook.custom_access_token]
# enabled = true
# uri = "pg-functions://<database>/<schema>/<hook_name>"

# Configure one of the supported SMS providers: `twilio`, `twilio_verify`, `messagebird`, `textlocal`, `vonage`.
[auth.sms.twilio]
enabled = false
account_sid = ""
message_service_sid = ""
# DO NOT commit your Twilio auth token to git. Use environment variable substitution instead:
auth_token = "env(SUPABASE_AUTH_SMS_TWILIO_AUTH_TOKEN)"

[auth.mfa]
# Control how many MFA factors can be enrolled at once per user.
max_enrolled_factors = 10

# Control use of MFA via App Authenticator (TOTP)
[auth.mfa.totp]
enroll_enabled = true
verify_enabled = true

# Configure Multi-factor-authentication via Phone Messaging
# [auth.mfa.phone]
# enroll_enabled = true
# verify_enabled = true
# otp_length = 6
# template = "Your code is {{ .Code }} ."
# max_frequency = "10s"

# Use an external OAuth provider. The full list of providers are: `apple`, `azure`, `bitbucket`,
# `discord`, `facebook`, `github`, `gitlab`, `google`, `keycloak`, `linkedin_oidc`, `notion`, `twitch`,
# `twitter`, `slack`, `spotify`, `workos`, `zoom`.
[auth.external.apple]
enabled = false
client_id = ""
# DO NOT commit your OAuth provider secret to git. Use environment variable substitution instead:
secret = "env(SUPABASE_AUTH_EXTERNAL_APPLE_SECRET)"
# Overrides the default auth redirectUrl.
redirect_uri = ""
# Overrides the default auth provider URL. Used to support self-hosted gitlab, single-tenant Azure,
# or any other third-party OIDC providers.
url = ""
# If enabled, the nonce check will be skipped. Required for local sign in with Google auth.
skip_nonce_check = false

# Use Firebase Auth as a third-party provider alongside Supabase Auth.
[auth.third_party.firebase]
enabled = false
# project_id = "my-firebase-project"

# Use Auth0 as a third-party provider alongside Supabase Auth.
[auth.third_party.auth0]
enabled = false
# tenant = "my-auth0-tenant"
# tenant_region = "us"

# Use AWS Cognito (Amplify) as a third-party provider alongside Supabase Auth.
[auth.third_party.aws_cognito]
enabled = false
# user_pool_id = "my-user-pool-id"
# user_pool_region = "us-east-1"

[edge_runtime]
enabled = true
# Configure one of the supported request policies: `oneshot`, `per_worker`.
# Use `oneshot` for hot reload, or `per_worker` for load testing.
policy = "oneshot"
inspector_port = 8083

[analytics]
enabled = true
port = 54327
# Configure one of the supported backends: `postgres`, `bigquery`.
backend = "postgres"

# Experimental features may be deprecated any time
[experimental]
# Configures Postgres storage engine to use OrioleDB (S3)
orioledb_version = ""
# Configures S3 bucket URL, eg. <bucket_name>.s3-<region>.amazonaws.com
s3_host = "env(S3_HOST)"
# Configures S3 bucket region, eg. us-east-1
s3_region = "env(S3_REGION)"
# Configures AWS_ACCESS_KEY_ID for S3 bucket
s3_access_key = "env(S3_ACCESS_KEY)"
# Configures AWS_SECRET_ACCESS_KEY for S3 bucket
s3_secret_key = "env(S3_SECRET_KEY)"


================================================
File: packages/supabase/src/supabase/.gitignore
================================================
# Supabase
.branches
.temp
.env


================================================
File: packages/supabase/src/supabase/migrations/20240818213221_remote_schema.sql
================================================

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

COMMENT ON SCHEMA "public" IS 'standard public schema';

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."Chat" (
    "id" "text" NOT NULL,
    "documentMetadata" "jsonb",
    "documentUrl" "text",
    "createdAt" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    "updatedAt" timestamp(3) without time zone NOT NULL,
    "messages" "jsonb"
);

ALTER TABLE "public"."Chat" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."Feedback" (
    "id" "text" NOT NULL,
    "type" "text" NOT NULL,
    "message" "text" NOT NULL,
    "createdAt" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    "updatedAt" timestamp(3) without time zone NOT NULL
);

ALTER TABLE "public"."Feedback" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."_prisma_migrations" (
    "id" character varying(36) NOT NULL,
    "checksum" character varying(64) NOT NULL,
    "finished_at" timestamp with time zone,
    "migration_name" character varying(255) NOT NULL,
    "logs" "text",
    "rolled_back_at" timestamp with time zone,
    "started_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "applied_steps_count" integer DEFAULT 0 NOT NULL
);

ALTER TABLE "public"."_prisma_migrations" OWNER TO "postgres";

ALTER TABLE ONLY "public"."Chat"
    ADD CONSTRAINT "Chat_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."Feedback"
    ADD CONSTRAINT "Feedback_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."_prisma_migrations"
    ADD CONSTRAINT "_prisma_migrations_pkey" PRIMARY KEY ("id");

CREATE UNIQUE INDEX "Chat_id_key" ON "public"."Chat" USING "btree" ("id");

CREATE UNIQUE INDEX "Feedback_id_key" ON "public"."Feedback" USING "btree" ("id");

ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON TABLE "public"."Chat" TO "anon";
GRANT ALL ON TABLE "public"."Chat" TO "authenticated";
GRANT ALL ON TABLE "public"."Chat" TO "service_role";

GRANT ALL ON TABLE "public"."Feedback" TO "anon";
GRANT ALL ON TABLE "public"."Feedback" TO "authenticated";
GRANT ALL ON TABLE "public"."Feedback" TO "service_role";

GRANT ALL ON TABLE "public"."_prisma_migrations" TO "anon";
GRANT ALL ON TABLE "public"."_prisma_migrations" TO "authenticated";
GRANT ALL ON TABLE "public"."_prisma_migrations" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;


================================================
File: packages/supabase/src/supabase/migrations/20240818213851_remote_schema.sql
================================================
create policy "Allow all flreew_0"
on "storage"."objects"
as permissive
for select
to public
using ((bucket_id = 'documents'::text));


create policy "Allow all flreew_1"
on "storage"."objects"
as permissive
for delete
to public
using ((bucket_id = 'documents'::text));


create policy "Allow all flreew_2"
on "storage"."objects"
as permissive
for insert
to public
with check ((bucket_id = 'documents'::text));


create policy "Allow all flreew_3"
on "storage"."objects"
as permissive
for update
to public
using ((bucket_id = 'documents'::text));





================================================
File: packages/supabase/src/supabase/migrations/20240902160033_remote_schema.sql
================================================
create extension vector with schema extensions;

create table "public"."Document" (
    "id" text not null default gen_random_uuid(),
    "name" text,
    "url" text,
    "chatId" text,
    "createdAt" timestamp with time zone not null default now(),
    "updatedAt" timestamp with time zone not null default now(),
    "metadata" jsonb
);


create table "public"."DocumentSections" (
    "embedding" vector(768),
    "chatId" text,
    "text" text,
    "pageNumber" integer,
    "documentId" text,
    "textChunk" text,
    "id" uuid not null default extensions.gen_random_uuid()
);


alter table "public"."DocumentSections" enable row level security;

create table "public"."profiles" (
    "id" uuid not null,
    "firstName" text,
    "lastName" text,
    "email" text,
    "avatarUrl" text,
    "role" text
);


alter table "public"."profiles" enable row level security;

alter table "public"."Chat" alter column "createdAt" set default now();

alter table "public"."Chat" alter column "createdAt" set data type timestamp with time zone using "createdAt"::timestamp with time zone;

alter table "public"."Chat" alter column "id" set default gen_random_uuid();

alter table "public"."Chat" alter column "updatedAt" set default now();

alter table "public"."Chat" alter column "updatedAt" set data type timestamp with time zone using "updatedAt"::timestamp with time zone;

CREATE UNIQUE INDEX "DocumentSections_id_key" ON public."DocumentSections" USING btree (id);

CREATE UNIQUE INDEX "DocumentSections_pkey" ON public."DocumentSections" USING btree (id);

CREATE UNIQUE INDEX "Document_chatId_key" ON public."Document" USING btree ("chatId");

CREATE UNIQUE INDEX "Document_id_key" ON public."Document" USING btree (id);

CREATE UNIQUE INDEX "Document_pkey" ON public."Document" USING btree (id);

CREATE UNIQUE INDEX profiles_pkey ON public.profiles USING btree (id);

alter table "public"."Document" add constraint "Document_pkey" PRIMARY KEY using index "Document_pkey";

alter table "public"."DocumentSections" add constraint "DocumentSections_pkey" PRIMARY KEY using index "DocumentSections_pkey";

alter table "public"."profiles" add constraint "profiles_pkey" PRIMARY KEY using index "profiles_pkey";

alter table "public"."Document" add constraint "Document_chatId_fkey" FOREIGN KEY ("chatId") REFERENCES "Chat"(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."Document" validate constraint "Document_chatId_fkey";

alter table "public"."DocumentSections" add constraint "DocumentSections_chatId_fkey" FOREIGN KEY ("chatId") REFERENCES "Chat"(id) ON DELETE CASCADE not valid;

alter table "public"."DocumentSections" validate constraint "DocumentSections_chatId_fkey";

alter table "public"."DocumentSections" add constraint "DocumentSections_documentId_fkey" FOREIGN KEY ("documentId") REFERENCES "Document"(id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "public"."DocumentSections" validate constraint "DocumentSections_documentId_fkey";

alter table "public"."profiles" add constraint "profiles_id_fkey" FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."profiles" validate constraint "profiles_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO ''
AS $function$
BEGIN
  INSERT INTO public.profiles (id, email, role)
  VALUES (
    NEW.id,
    NEW.email,
    NEW.role
  );
  RETURN NEW;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.match_documents(query_embedding vector, match_threshold double precision, document_id uuid)
 RETURNS SETOF "DocumentSections"
 LANGUAGE sql
AS $function$
  select *
  from "DocumentSections"
  where "DocumentSections".embedding <#> query_embedding < -match_threshold 
  and "DocumentSections"."chatId"::text = document_id::text
  order by "DocumentSections"."pageNumber" asc
$function$
;

CREATE OR REPLACE FUNCTION public.match_documents(query_embedding vector, match_threshold double precision, match_count integer)
 RETURNS SETOF "DocumentSections"
 LANGUAGE sql
AS $function$
  select *
  from "DocumentSections"
  where "DocumentSections".embedding <#> query_embedding < -match_threshold
  order by "DocumentSections"."pageNumber" asc
  limit least(match_count, 200);
$function$
;

CREATE OR REPLACE FUNCTION public.match_documents(query_embedding vector, match_threshold double precision, match_count integer, document_id uuid)
 RETURNS SETOF "DocumentSections"
 LANGUAGE sql
AS $function$
  select *
  from "DocumentSections"
  where "DocumentSections".embedding <#> query_embedding < -match_threshold 
  and "DocumentSections"."chatId"::text = document_id::text
  order by "DocumentSections"."pageNumber" asc
  limit least(match_count, 200);
$function$
;

grant delete on table "public"."Document" to "anon";

grant insert on table "public"."Document" to "anon";

grant references on table "public"."Document" to "anon";

grant select on table "public"."Document" to "anon";

grant trigger on table "public"."Document" to "anon";

grant truncate on table "public"."Document" to "anon";

grant update on table "public"."Document" to "anon";

grant delete on table "public"."Document" to "authenticated";

grant insert on table "public"."Document" to "authenticated";

grant references on table "public"."Document" to "authenticated";

grant select on table "public"."Document" to "authenticated";

grant trigger on table "public"."Document" to "authenticated";

grant truncate on table "public"."Document" to "authenticated";

grant update on table "public"."Document" to "authenticated";

grant delete on table "public"."Document" to "service_role";

grant insert on table "public"."Document" to "service_role";

grant references on table "public"."Document" to "service_role";

grant select on table "public"."Document" to "service_role";

grant trigger on table "public"."Document" to "service_role";

grant truncate on table "public"."Document" to "service_role";

grant update on table "public"."Document" to "service_role";

grant delete on table "public"."DocumentSections" to "anon";

grant insert on table "public"."DocumentSections" to "anon";

grant references on table "public"."DocumentSections" to "anon";

grant select on table "public"."DocumentSections" to "anon";

grant trigger on table "public"."DocumentSections" to "anon";

grant truncate on table "public"."DocumentSections" to "anon";

grant update on table "public"."DocumentSections" to "anon";

grant delete on table "public"."DocumentSections" to "authenticated";

grant insert on table "public"."DocumentSections" to "authenticated";

grant references on table "public"."DocumentSections" to "authenticated";

grant select on table "public"."DocumentSections" to "authenticated";

grant trigger on table "public"."DocumentSections" to "authenticated";

grant truncate on table "public"."DocumentSections" to "authenticated";

grant update on table "public"."DocumentSections" to "authenticated";

grant delete on table "public"."DocumentSections" to "dashboard_user";

grant insert on table "public"."DocumentSections" to "dashboard_user";

grant references on table "public"."DocumentSections" to "dashboard_user";

grant select on table "public"."DocumentSections" to "dashboard_user";

grant trigger on table "public"."DocumentSections" to "dashboard_user";

grant truncate on table "public"."DocumentSections" to "dashboard_user";

grant update on table "public"."DocumentSections" to "dashboard_user";

grant delete on table "public"."DocumentSections" to "service_role";

grant insert on table "public"."DocumentSections" to "service_role";

grant references on table "public"."DocumentSections" to "service_role";

grant select on table "public"."DocumentSections" to "service_role";

grant trigger on table "public"."DocumentSections" to "service_role";

grant truncate on table "public"."DocumentSections" to "service_role";

grant update on table "public"."DocumentSections" to "service_role";

grant delete on table "public"."profiles" to "anon";

grant insert on table "public"."profiles" to "anon";

grant references on table "public"."profiles" to "anon";

grant select on table "public"."profiles" to "anon";

grant trigger on table "public"."profiles" to "anon";

grant truncate on table "public"."profiles" to "anon";

grant update on table "public"."profiles" to "anon";

grant delete on table "public"."profiles" to "authenticated";

grant insert on table "public"."profiles" to "authenticated";

grant references on table "public"."profiles" to "authenticated";

grant select on table "public"."profiles" to "authenticated";

grant trigger on table "public"."profiles" to "authenticated";

grant truncate on table "public"."profiles" to "authenticated";

grant update on table "public"."profiles" to "authenticated";

grant delete on table "public"."profiles" to "service_role";

grant insert on table "public"."profiles" to "service_role";

grant references on table "public"."profiles" to "service_role";

grant select on table "public"."profiles" to "service_role";

grant trigger on table "public"."profiles" to "service_role";

grant truncate on table "public"."profiles" to "service_role";

grant update on table "public"."profiles" to "service_role";

create policy "enabled for all"
on "public"."DocumentSections"
as permissive
for all
to public
using (true);





================================================
File: packages/supabase/src/supabase/migrations/20241102160258_authentication-and-roles.sql
================================================
create extension if not exists "moddatetime" with schema "extensions";


create extension if not exists "vector" with schema "public" version '0.7.0';

drop policy "enabled for all" on "public"."DocumentSections";

alter table "public"."Chat" add column "suggestedQuestions" text[];

alter table "public"."Chat" add column "userId" uuid;

update "public"."Chat" set "userId" = auth.uid();

alter table "public"."Chat" enable row level security;

alter table "public"."Document" add column "userId" uuid;

update "public"."Document" set "userId" = auth.uid();

alter table "public"."Document" enable row level security;

alter table "public"."DocumentSections" add column "userId" uuid;

update "public"."DocumentSections" set "userId" = auth.uid();

alter table "public"."DocumentSections" enable row level security;

alter table "public"."Feedback" add column "userId" uuid;

update "public"."Feedback" set "userId" = auth.uid();

alter table "public"."Feedback" enable row level security;

do $$
begin
  if exists (
    select 1 from pg_roles where rolname = 'supabase_functions_admin'
  ) then
    grant delete on table "public"."DocumentSections" to "supabase_functions_admin";
    grant insert on table "public"."DocumentSections" to "supabase_functions_admin";
    grant references on table "public"."DocumentSections" to "supabase_functions_admin";
    grant select on table "public"."DocumentSections" to "supabase_functions_admin";
    grant trigger on table "public"."DocumentSections" to "supabase_functions_admin";
    grant truncate on table "public"."DocumentSections" to "supabase_functions_admin";
    grant update on table "public"."DocumentSections" to "supabase_functions_admin";
  end if;
end $$;

create policy "Authenticated users can delete a chat."
on "public"."Chat"
as permissive
for delete
to authenticated
using ((( SELECT auth.uid() AS uid) = "userId"));


create policy "Authenticated users can insert a chat."
on "public"."Chat"
as permissive
for insert
to authenticated
with check ((( SELECT auth.uid() AS uid) = "userId"));


create policy "Authenticated users can update a chat."
on "public"."Chat"
as permissive
for update
to authenticated
using ((( SELECT auth.uid() AS uid) = "userId"))
with check ((( SELECT auth.uid() AS uid) = "userId"));


create policy "Authenticated users can view their own chats."
on "public"."Chat"
as permissive
for select
to public
using ((( SELECT auth.uid() AS uid) = "userId"));


create policy "Authenticated users can delete a chat."
on "public"."Document"
as permissive
for delete
to authenticated
using ((( SELECT auth.uid() AS uid) = "userId"));


create policy "Authenticated users can insert a chat."
on "public"."Document"
as permissive
for insert
to authenticated
with check ((( SELECT auth.uid() AS uid) = "userId"));


create policy "Authenticated users can update a chat."
on "public"."Document"
as permissive
for update
to authenticated
using ((( SELECT auth.uid() AS uid) = "userId"))
with check ((( SELECT auth.uid() AS uid) = "userId"));


create policy "Authenticated users can view their own chats."
on "public"."Document"
as permissive
for select
to public
using ((( SELECT auth.uid() AS uid) = "userId"));


create policy "Authenticated users can delete a chat."
on "public"."DocumentSections"
as permissive
for delete
to authenticated
using ((( SELECT auth.uid() AS uid) = "userId"));


create policy "Authenticated users can insert a chat."
on "public"."DocumentSections"
as permissive
for insert
to authenticated
with check ((( SELECT auth.uid() AS uid) = "userId"));


create policy "Authenticated users can update a chat."
on "public"."DocumentSections"
as permissive
for update
to authenticated
using ((( SELECT auth.uid() AS uid) = "userId"))
with check ((( SELECT auth.uid() AS uid) = "userId"));


create policy "Authenticated users can view their own chats."
on "public"."DocumentSections"
as permissive
for select
to public
using ((( SELECT auth.uid() AS uid) = "userId"));


CREATE TRIGGER handle_updated_at BEFORE UPDATE ON public."Chat" FOR EACH ROW EXECUTE FUNCTION moddatetime('updatedAt');

CREATE TRIGGER handle_updated_at BEFORE UPDATE ON public."Document" FOR EACH ROW EXECUTE FUNCTION moddatetime('updatedAt');

CREATE TRIGGER handle_updated_at BEFORE UPDATE ON public."DocumentSections" FOR EACH ROW EXECUTE FUNCTION moddatetime('updatedAt');




================================================
File: packages/supabase/src/supabase/migrations/20241102160420_set-userid-default-uuid.sql
================================================
-- add the createdAt and updatedAt columns to the DocumentSections table
alter table "public"."DocumentSections" add column "createdAt" timestamp with time zone not null default now();
alter table "public"."DocumentSections" add column "updatedAt" timestamp with time zone not null default now();

-- Update existing null records with a default UUID to replace it with the auth.uid()
UPDATE "public"."Chat" SET "userId" = '00000000-0000-0000-0000-000000000000' WHERE "userId" IS NULL;
UPDATE "public"."Document" SET "userId" = '00000000-0000-0000-0000-000000000000' WHERE "userId" IS NULL;
UPDATE "public"."DocumentSections" SET "userId" = '00000000-0000-0000-0000-000000000000' WHERE "userId" IS NULL;
UPDATE "public"."Feedback" SET "userId" = '00000000-0000-0000-0000-000000000000' WHERE "userId" IS NULL;

-- Set the default value and make it not null
alter table "public"."Chat" alter column "userId" set default auth.uid();
alter table "public"."Chat" alter column "userId" set not null;

alter table "public"."Document" alter column "userId" set default auth.uid();
alter table "public"."Document" alter column "userId" set not null;

alter table "public"."DocumentSections" alter column "userId" set default auth.uid();
alter table "public"."DocumentSections" alter column "userId" set not null;

alter table "public"."Feedback" alter column "userId" set default auth.uid();
alter table "public"."Feedback" alter column "userId" set not null;

================================================
File: packages/supabase/src/supabase/migrations/20241109155454_auto-remove-document-file.sql
================================================
create extension if not exists "vector" with schema "public" version '0.7.0';

set check_function_bodies = off;

INSERT INTO storage.buckets (id, name, public)
SELECT 'documents', 'documents', TRUE
WHERE NOT EXISTS (
    SELECT 1 FROM storage.buckets WHERE id = 'documents'
);

DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_policies 
        WHERE schemaname = 'storage' 
        AND tablename = 'objects' 
        AND policyname = 'Public Access'
    ) THEN
        create policy "Public Access"
            on storage.objects for select
            using ( bucket_id = 'documents' );
    END IF;
END
$$;


CREATE OR REPLACE FUNCTION public.remove_document_file_after_removing_chats()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$BEGIN
    DELETE FROM storage.objects 
    WHERE bucket_id = 'documents' AND name = OLD.id || '.pdf';
    
    RETURN OLD;
END;$function$
;

CREATE TRIGGER remove_document_file_after_chat_delete
AFTER DELETE ON public."Chat" FOR EACH ROW
EXECUTE FUNCTION public.remove_document_file_after_removing_chats ();



================================================
File: packages/supabase/src/supabase/migrations/20241121030700_remote_schema.sql
================================================
alter table "public"."Feedback" alter column "id" set default gen_random_uuid();

alter table "public"."Feedback" alter column "id" set data type uuid using "id"::uuid;

alter table "public"."Feedback" alter column "updatedAt" set default now();

alter table "public"."Feedback" alter column "updatedAt" set data type timestamp with time zone using "updatedAt"::timestamp with time zone;

create policy "Authenticated users can insert a feedback."
on "public"."Feedback"
as permissive
for insert
to authenticated
with check ((( SELECT auth.uid() AS uid) = "userId"));


================================================
File: packages/supabase/src/types/database.ts
================================================
export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export type Database = {
  graphql_public: {
    Tables: {
      [_ in never]: never
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      graphql: {
        Args: {
          operationName?: string
          query?: string
          variables?: Json
          extensions?: Json
        }
        Returns: Json
      }
    }
    Enums: {
      [_ in never]: never
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
  public: {
    Tables: {
      _prisma_migrations: {
        Row: {
          applied_steps_count: number
          checksum: string
          finished_at: string | null
          id: string
          logs: string | null
          migration_name: string
          rolled_back_at: string | null
          started_at: string
        }
        Insert: {
          applied_steps_count?: number
          checksum: string
          finished_at?: string | null
          id: string
          logs?: string | null
          migration_name: string
          rolled_back_at?: string | null
          started_at?: string
        }
        Update: {
          applied_steps_count?: number
          checksum?: string
          finished_at?: string | null
          id?: string
          logs?: string | null
          migration_name?: string
          rolled_back_at?: string | null
          started_at?: string
        }
        Relationships: []
      }
      Chat: {
        Row: {
          createdAt: string
          documentMetadata: Json | null
          documentUrl: string | null
          id: string
          messages: Json | null
          suggestedQuestions: string[] | null
          updatedAt: string
          userId: string
        }
        Insert: {
          createdAt?: string
          documentMetadata?: Json | null
          documentUrl?: string | null
          id?: string
          messages?: Json | null
          suggestedQuestions?: string[] | null
          updatedAt?: string
          userId?: string
        }
        Update: {
          createdAt?: string
          documentMetadata?: Json | null
          documentUrl?: string | null
          id?: string
          messages?: Json | null
          suggestedQuestions?: string[] | null
          updatedAt?: string
          userId?: string
        }
        Relationships: []
      }
      Document: {
        Row: {
          chatId: string | null
          createdAt: string
          id: string
          metadata: Json | null
          name: string | null
          updatedAt: string
          url: string | null
          userId: string
        }
        Insert: {
          chatId?: string | null
          createdAt?: string
          id?: string
          metadata?: Json | null
          name?: string | null
          updatedAt?: string
          url?: string | null
          userId?: string
        }
        Update: {
          chatId?: string | null
          createdAt?: string
          id?: string
          metadata?: Json | null
          name?: string | null
          updatedAt?: string
          url?: string | null
          userId?: string
        }
        Relationships: [
          {
            foreignKeyName: "Document_chatId_fkey"
            columns: ["chatId"]
            isOneToOne: false
            referencedRelation: "Chat"
            referencedColumns: ["id"]
          },
        ]
      }
      DocumentSections: {
        Row: {
          chatId: string | null
          createdAt: string
          documentId: string | null
          embedding: string | null
          id: string
          pageNumber: number | null
          text: string | null
          textChunk: string | null
          updatedAt: string
          userId: string
        }
        Insert: {
          chatId?: string | null
          createdAt?: string
          documentId?: string | null
          embedding?: string | null
          id?: string
          pageNumber?: number | null
          text?: string | null
          textChunk?: string | null
          updatedAt?: string
          userId?: string
        }
        Update: {
          chatId?: string | null
          createdAt?: string
          documentId?: string | null
          embedding?: string | null
          id?: string
          pageNumber?: number | null
          text?: string | null
          textChunk?: string | null
          updatedAt?: string
          userId?: string
        }
        Relationships: [
          {
            foreignKeyName: "DocumentSections_chatId_fkey"
            columns: ["chatId"]
            isOneToOne: false
            referencedRelation: "Chat"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "DocumentSections_documentId_fkey"
            columns: ["documentId"]
            isOneToOne: false
            referencedRelation: "Document"
            referencedColumns: ["id"]
          },
        ]
      }
      Feedback: {
        Row: {
          createdAt: string
          id: string
          message: string
          type: string
          updatedAt: string
          userId: string
        }
        Insert: {
          createdAt?: string
          id?: string
          message: string
          type: string
          updatedAt?: string
          userId?: string
        }
        Update: {
          createdAt?: string
          id?: string
          message?: string
          type?: string
          updatedAt?: string
          userId?: string
        }
        Relationships: []
      }
      profiles: {
        Row: {
          avatarUrl: string | null
          email: string | null
          firstName: string | null
          id: string
          lastName: string | null
          role: string | null
        }
        Insert: {
          avatarUrl?: string | null
          email?: string | null
          firstName?: string | null
          id: string
          lastName?: string | null
          role?: string | null
        }
        Update: {
          avatarUrl?: string | null
          email?: string | null
          firstName?: string | null
          id?: string
          lastName?: string | null
          role?: string | null
        }
        Relationships: []
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      match_documents:
        | {
            Args: {
              query_embedding: string
              match_threshold: number
              document_id: string
            }
            Returns: {
              chatId: string | null
              createdAt: string
              documentId: string | null
              embedding: string | null
              id: string
              pageNumber: number | null
              text: string | null
              textChunk: string | null
              updatedAt: string
              userId: string
            }[]
          }
        | {
            Args: {
              query_embedding: string
              match_threshold: number
              match_count: number
            }
            Returns: {
              chatId: string | null
              createdAt: string
              documentId: string | null
              embedding: string | null
              id: string
              pageNumber: number | null
              text: string | null
              textChunk: string | null
              updatedAt: string
              userId: string
            }[]
          }
        | {
            Args: {
              query_embedding: string
              match_threshold: number
              match_count: number
              document_id: string
            }
            Returns: {
              chatId: string | null
              createdAt: string
              documentId: string | null
              embedding: string | null
              id: string
              pageNumber: number | null
              text: string | null
              textChunk: string | null
              updatedAt: string
              userId: string
            }[]
          }
    }
    Enums: {
      [_ in never]: never
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}

type PublicSchema = Database[Extract<keyof Database, "public">]

export type Tables<
  PublicTableNameOrOptions extends
    | keyof (PublicSchema["Tables"] & PublicSchema["Views"])
    | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof (Database[PublicTableNameOrOptions["schema"]]["Tables"] &
        Database[PublicTableNameOrOptions["schema"]]["Views"])
    : never = never,
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? (Database[PublicTableNameOrOptions["schema"]]["Tables"] &
      Database[PublicTableNameOrOptions["schema"]]["Views"])[TableName] extends {
      Row: infer R
    }
    ? R
    : never
  : PublicTableNameOrOptions extends keyof (PublicSchema["Tables"] &
        PublicSchema["Views"])
    ? (PublicSchema["Tables"] &
        PublicSchema["Views"])[PublicTableNameOrOptions] extends {
        Row: infer R
      }
      ? R
      : never
    : never

export type TablesInsert<
  PublicTableNameOrOptions extends
    | keyof PublicSchema["Tables"]
    | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? Database[PublicTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Insert: infer I
    }
    ? I
    : never
  : PublicTableNameOrOptions extends keyof PublicSchema["Tables"]
    ? PublicSchema["Tables"][PublicTableNameOrOptions] extends {
        Insert: infer I
      }
      ? I
      : never
    : never

export type TablesUpdate<
  PublicTableNameOrOptions extends
    | keyof PublicSchema["Tables"]
    | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? Database[PublicTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Update: infer U
    }
    ? U
    : never
  : PublicTableNameOrOptions extends keyof PublicSchema["Tables"]
    ? PublicSchema["Tables"][PublicTableNameOrOptions] extends {
        Update: infer U
      }
      ? U
      : never
    : never

export type Enums<
  PublicEnumNameOrOptions extends
    | keyof PublicSchema["Enums"]
    | { schema: keyof Database },
  EnumName extends PublicEnumNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicEnumNameOrOptions["schema"]]["Enums"]
    : never = never,
> = PublicEnumNameOrOptions extends { schema: keyof Database }
  ? Database[PublicEnumNameOrOptions["schema"]]["Enums"][EnumName]
  : PublicEnumNameOrOptions extends keyof PublicSchema["Enums"]
    ? PublicSchema["Enums"][PublicEnumNameOrOptions]
    : never

export type CompositeTypes<
  PublicCompositeTypeNameOrOptions extends
    | keyof PublicSchema["CompositeTypes"]
    | { schema: keyof Database },
  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {
    schema: keyof Database
  }
    ? keyof Database[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"]
    : never = never,
> = PublicCompositeTypeNameOrOptions extends { schema: keyof Database }
  ? Database[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"][CompositeTypeName]
  : PublicCompositeTypeNameOrOptions extends keyof PublicSchema["CompositeTypes"]
    ? PublicSchema["CompositeTypes"][PublicCompositeTypeNameOrOptions]
    : never



================================================
File: packages/supabase/src/types/index.ts
================================================
export * from "./database";
export type { Database } from "./database";
export type { Tables, TablesInsert, TablesUpdate } from "./database";
export * from "./supabase";


================================================
File: packages/supabase/src/types/supabase.ts
================================================
import { createServerClient } from "@supabase/ssr";
import type { Database } from "@makefy/supabase/types/database";
import { createClient } from "@supabase/supabase-js";

export type * from "@supabase/supabase-js";
export type SupabaseClient<T extends Database = Database> = ReturnType<
  typeof createServerClient<T>
>;

export type SupabaseAdminClient<T extends Database = Database> = ReturnType<
  typeof createClient<T>
>;


================================================
File: packages/typescript-config/base.json
================================================
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "display": "Default",
  "compilerOptions": {
    "esModuleInterop": true,
    "incremental": false,
    "isolatedModules": true,
    "lib": [
      "es2022",
      "DOM",
      "DOM.Iterable"
    ],
    "module": "NodeNext",
    "moduleDetection": "force",
    "moduleResolution": "NodeNext",
    "noUncheckedIndexedAccess": true,
    "resolveJsonModule": true,
    "skipLibCheck": true,
    "strict": true,
    "target": "ES2022"
  }
}

================================================
File: packages/typescript-config/nextjs.json
================================================
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "display": "Next.js",
  "extends": "./base.json",
  "compilerOptions": {
    "plugins": [{ "name": "next" }],
    "module": "ESNext",
    "moduleResolution": "Bundler",
    "allowJs": true,
    "jsx": "preserve",
    "noEmit": true
  }
}


================================================
File: packages/typescript-config/package.json
================================================
{
  "name": "@makefy/typescript-config",
  "version": "0.0.0",
  "private": true,
  "license": "MIT",
  "publishConfig": {
    "access": "public"
  }
}

================================================
File: packages/typescript-config/react-library.json
================================================
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "display": "React Library",
  "extends": "./base.json",
  "compilerOptions": {
    "jsx": "react-jsx"
  }
}


================================================
File: packages/ui/components.json
================================================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "globals.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@makefy/ui/components",
    "utils": "@makefy/ui/lib/utils"
  }
}

================================================
File: packages/ui/globals.css
================================================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 222 88% 58%;
    --primary-foreground: 0 0% 100%;
    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 221.2 83.2% 53.3%;
    --radius: 1rem;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --sidebar-background: 0 0% 100%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 222 88% 58%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }

  .dark {
    --background: 222 50% 10%;
    --foreground: 210 40% 98%;
    --card: 222 50% 10%;
    --card-foreground: 210 40% 98%;
    --popover: 222 50% 10%;
    --popover-foreground: 210 40% 98%;
    --primary: 222 88% 58%;
    --primary-foreground: 0 0% 100%;
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 100% 50%;
    --destructive-foreground: 222 5% 100%;
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 224.3 76.3% 48%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
    --sidebar-background: 222 50% 10%;
    --sidebar-foreground: 210 40% 98%;
    --sidebar-primary: 222 88% 58%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 217.2 32.6% 17.5%;
    --sidebar-accent-foreground: 210 40% 98%;
    --sidebar-border: 217.2 32.6% 17.5%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}


================================================
File: packages/ui/index.ts
================================================
export * from "./components/index";


================================================
File: packages/ui/package.json
================================================
{
  "name": "@makefy/ui",
  "version": "0.0.0",
  "private": true,
  "exports": {
    "./globals.css": "./globals.css",
    "./postcss.config": "./postcss.config.js",
    "./tailwind.config": "./tailwind.config.ts",
    "./lib/*": "./lib/*.ts",
    "./components/*": "./components/*.tsx",
    ".": "./index.ts"
  },
  "scripts": {
    "lint": "eslint . --max-warnings 0",
    "generate:component": "turbo gen react-component"
  },
  "devDependencies": {
    "@makefy/eslint-config": "workspace:*",
    "@makefy/typescript-config": "workspace:*",
    "@turbo/gen": "1.12.4",
    "@types/eslint": "8.56.5",
    "@types/node": "20.11.24",
    "@types/react": "18.2.61",
    "@types/react-dom": "18.2.19",
    "eslint": "8.57.0",
    "react": "18.3.1",
    "tailwindcss": "3.4.14",
    "typescript": "5.3.3"
  },
  "dependencies": {
    "@hookform/resolvers": "3.9.0",
    "@radix-ui/react-avatar": "1.0.4",
    "@radix-ui/react-collapsible": "^1.1.1",
    "@radix-ui/react-dialog": "^1.1.2",
    "@radix-ui/react-dropdown-menu": "2.1.1",
    "@radix-ui/react-icons": "1.3.0",
    "@radix-ui/react-label": "2.1.0",
    "@radix-ui/react-navigation-menu": "1.2.1",
    "@radix-ui/react-popover": "1.1.1",
    "@radix-ui/react-scroll-area": "^1.1.0",
    "@radix-ui/react-select": "2.1.1",
    "@radix-ui/react-separator": "^1.1.0",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-switch": "1.1.0",
    "@radix-ui/react-tabs": "1.1.0",
    "@radix-ui/react-toast": "1.2.1",
    "@radix-ui/react-toggle": "1.1.0",
    "@radix-ui/react-toggle-group": "1.1.0",
    "@radix-ui/react-tooltip": "^1.1.3",
    "class-variance-authority": "^0.7.0",
    "clsx": "2.1.0",
    "cmdk": "1.0.0",
    "embla-carousel-react": "^8.2.0",
    "input-otp": "1.2.5",
    "lucide-react": "^0.453.0",
    "react-hook-form": "7.52.1",
    "react-resizable-panels": "2.0.22",
    "tailwind-merge": "2.2.2",
    "tailwindcss-animate": "1.0.7",
    "vaul": "1.1.1",
    "zod": "3.23.8"
  }
}

================================================
File: packages/ui/tailwind.config.ts
================================================
import type { Config } from "tailwindcss";
import tailwindcssAnimate from "tailwindcss-animate";

const config = {
  darkMode: ["class"],
  content: [
    "./pages/**/*.{ts,tsx}",
    "./components/**/*.{ts,tsx}",
    "./app/**/*.{ts,tsx}",
    "./src/**/*.{ts,tsx}",
  ],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
        sidebar: {
          DEFAULT: "hsl(var(--sidebar-background))",
          foreground: "hsl(var(--sidebar-foreground))",
          primary: "hsl(var(--sidebar-primary))",
          "primary-foreground": "hsl(var(--sidebar-primary-foreground))",
          accent: "hsl(var(--sidebar-accent))",
          "accent-foreground": "hsl(var(--sidebar-accent-foreground))",
          border: "hsl(var(--sidebar-border))",
          ring: "hsl(var(--sidebar-ring))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: {
            height: "0",
          },
          to: {
            height: "var(--radix-accordion-content-height)",
          },
        },
        "accordion-up": {
          from: {
            height: "var(--radix-accordion-content-height)",
          },
          to: {
            height: "0",
          },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [tailwindcssAnimate],
} satisfies Config;

export default config;


================================================
File: packages/ui/tsconfig.json
================================================
{
  "extends": "@makefy/typescript-config/react-library.json",
  "compilerOptions": {
    "jsx": "react-jsx",
    "rootDir": ".",
    "outDir": "dist",
    "baseUrl": ".",
    "paths": {
      "@makefy/ui/*": [
        "./*"
      ],
    },
  },
  "include": [
    "index.ts",
    "tailwind.config.ts",
    "components",
    "lib"
  ],
  "exclude": [
    "node_modules",
    "dist"
  ]
}

================================================
File: packages/ui/tsconfig.lint.json
================================================
{
  "extends": "@makefy/typescript-config/react-library.json",
  "compilerOptions": {
    "outDir": "dist",
    "baseUrl": ".",
    "paths": {
      "@/lib/*": [
        "lib/*"
      ],
    },
  },
  "include": [
    "index.ts",
    "tailwind.config.ts",
    "components",
    "lib",
    "turbo"
  ],
  "exclude": [
    "node_modules",
    "dist"
  ]
}

================================================
File: packages/ui/components/alert.tsx
================================================
import * as React from "react";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@makefy/ui/lib/utils";

const alertVariants = cva(
  "relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  },
);

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
));
Alert.displayName = "Alert";

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
));
AlertTitle.displayName = "AlertTitle";

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
));
AlertDescription.displayName = "AlertDescription";

export { Alert, AlertTitle, AlertDescription };


================================================
File: packages/ui/components/avatar.tsx
================================================
"use client";

import * as React from "react";
import * as AvatarPrimitive from "@radix-ui/react-avatar";

import { cn } from "@makefy/ui/lib/utils";

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className,
    )}
    {...props}
  />
));
Avatar.displayName = AvatarPrimitive.Root.displayName;

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
));
AvatarImage.displayName = AvatarPrimitive.Image.displayName;

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "bg-muted flex h-full w-full items-center justify-center rounded-full",
      className,
    )}
    {...props}
  />
));
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName;

export { Avatar, AvatarImage, AvatarFallback };


================================================
File: packages/ui/components/breadcrumb.tsx
================================================
import * as React from "react";
import { ChevronRightIcon, DotsHorizontalIcon } from "@radix-ui/react-icons";
import { Slot } from "@radix-ui/react-slot";

import { cn } from "@makefy/ui/lib/utils";

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode;
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />);
Breadcrumb.displayName = "Breadcrumb";

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "text-muted-foreground flex flex-wrap items-center gap-1.5 break-words text-sm sm:gap-2.5",
      className,
    )}
    {...props}
  />
));
BreadcrumbList.displayName = "BreadcrumbList";

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
));
BreadcrumbItem.displayName = "BreadcrumbItem";

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean;
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a";

  return (
    <Comp
      ref={ref}
      className={cn("hover:text-foreground transition-colors", className)}
      {...props}
    />
  );
});
BreadcrumbLink.displayName = "BreadcrumbLink";

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("text-foreground font-normal", className)}
    {...props}
  />
));
BreadcrumbPage.displayName = "BreadcrumbPage";

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:size-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRightIcon />}
  </li>
);
BreadcrumbSeparator.displayName = "BreadcrumbSeparator";

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <DotsHorizontalIcon className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
);
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis";

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
};


================================================
File: packages/ui/components/button.tsx
================================================
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@makefy/ui/lib/utils";

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-primary-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button";
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    );
  },
);
Button.displayName = "Button";

export { Button, buttonVariants };


================================================
File: packages/ui/components/card.tsx
================================================
import * as React from "react";

import { cn } from "@makefy/ui/lib/utils";
import { VariantProps, cva } from "class-variance-authority";

const cardVariants = cva("rounded-xl border", {
  variants: {
    variant: {
      default: "bg-card backdrop-blur-lg transition-all hover:shadow-sm",
      blurry:
        "bg-card/10 shadow-[inset_10px_-50px_94px_0_rgb(199,199,199,0.2)] backdrop-blur",
    },
  },
  defaultVariants: {
    variant: "default",
  },
});

export interface CardProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof cardVariants> {}

const Card = React.forwardRef<HTMLDivElement, CardProps>(
  ({ className, variant, ...props }, ref) => (
    <div
      ref={ref}
      className={cn(cardVariants({ className, variant }))}
      {...props}
    />
  ),
);
Card.displayName = "Card";

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
));
CardHeader.displayName = "CardHeader";

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
));
CardTitle.displayName = "CardTitle";

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-muted-foreground text-sm", className)}
    {...props}
  />
));
CardDescription.displayName = "CardDescription";

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
));
CardContent.displayName = "CardContent";

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
));
CardFooter.displayName = "CardFooter";

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardDescription,
  CardContent,
};


================================================
File: packages/ui/components/carousel.tsx
================================================
"use client";

import * as React from "react";
import { ArrowLeftIcon, ArrowRightIcon } from "@radix-ui/react-icons";
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react";

import { cn } from "@makefy/ui/lib/utils";
import { Button } from "@makefy/ui/components/button";
import { Slot } from "@radix-ui/react-slot";

type CarouselApi = UseEmblaCarouselType[1];
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>;
type CarouselOptions = UseCarouselParameters[0];
type CarouselPlugin = UseCarouselParameters[1];

type CarouselProps = {
  opts?: CarouselOptions;
  plugins?: CarouselPlugin;
  orientation?: "horizontal" | "vertical";
  setApi?: (api: CarouselApi) => void;
};

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0];
  api: ReturnType<typeof useEmblaCarousel>[1];
  scrollPrev: () => void;
  scrollNext: () => void;
  canScrollPrev: boolean;
  canScrollNext: boolean;
} & CarouselProps;

const CarouselContext = React.createContext<CarouselContextProps | null>(null);

function useCarousel() {
  const context = React.useContext(CarouselContext);

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />");
  }

  return context;
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref,
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins,
    );
    const [canScrollPrev, setCanScrollPrev] = React.useState(false);
    const [canScrollNext, setCanScrollNext] = React.useState(false);

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return;
      }

      setCanScrollPrev(api.canScrollPrev());
      setCanScrollNext(api.canScrollNext());
    }, []);

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev();
    }, [api]);

    const scrollNext = React.useCallback(() => {
      api?.scrollNext();
    }, [api]);

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault();
          scrollPrev();
        } else if (event.key === "ArrowRight") {
          event.preventDefault();
          scrollNext();
        }
      },
      [scrollPrev, scrollNext],
    );

    React.useEffect(() => {
      if (!api || !setApi) {
        return;
      }

      setApi(api);
    }, [api, setApi]);

    React.useEffect(() => {
      if (!api) {
        return;
      }

      onSelect(api);
      api.on("reInit", onSelect);
      api.on("select", onSelect);

      return () => {
        api?.off("select", onSelect);
      };
    }, [api, onSelect]);

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    );
  },
);
Carousel.displayName = "Carousel";

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel();

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className,
        )}
        {...props}
      />
    </div>
  );
});
CarouselContent.displayName = "CarouselContent";

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel();

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className,
      )}
      {...props}
    />
  );
});
CarouselItem.displayName = "CarouselItem";

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(
  (
    {
      className,
      variant = "outline",
      size = "icon",
      asChild,
      children,
      ...props
    },
    ref,
  ) => {
    const { orientation, scrollPrev, canScrollPrev } = useCarousel();

    const Comp = asChild ? Slot : Button;

    return (
      <Comp
        ref={ref}
        variant={!asChild ? variant : undefined}
        size={!asChild ? size : undefined}
        className={cn(
          {
            "absolute h-8 w-8 rounded-full": !asChild,
            "-left-12 top-1/2 -translate-y-1/2":
              !asChild && orientation === "horizontal",
            "-top-12 left-1/2 -translate-x-1/2 rotate-90":
              !asChild && orientation !== "horizontal",
          },
          className,
        )}
        disabled={!canScrollPrev}
        onClick={scrollPrev}
        {...props}
      >
        {asChild ? (
          children
        ) : (
          <span>
            {children ? (
              children
            ) : (
              <>
                <ArrowLeftIcon className="h-4 w-4" />
                <span className="sr-only">Previous slide</span>
              </>
            )}
          </span>
        )}
      </Comp>
    );
  },
);
CarouselPrevious.displayName = "CarouselPrevious";

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(
  (
    {
      className,
      variant = "outline",
      size = "icon",
      asChild,
      children,
      ...props
    },
    ref,
  ) => {
    const { orientation, scrollNext, canScrollNext } = useCarousel();

    const Comp = asChild ? Slot : Button;

    return (
      <Comp
        ref={ref}
        variant={!asChild ? variant : undefined}
        size={!asChild ? size : undefined}
        className={cn(
          {
            "absolute h-8 w-8 rounded-full": !asChild,
            "-right-12 top-1/2 -translate-y-1/2":
              !asChild && orientation === "horizontal",
            "-bottom-12 left-1/2 -translate-x-1/2 rotate-90":
              !asChild && orientation !== "horizontal",
          },
          className,
        )}
        disabled={!canScrollNext}
        onClick={scrollNext}
        {...props}
      >
        {asChild ? (
          children
        ) : (
          <span>
            {children ? (
              children
            ) : (
              <>
                <ArrowRightIcon className="h-4 w-4" />
                <span className="sr-only">Next slide</span>
              </>
            )}
          </span>
        )}
      </Comp>
    );
  },
);
CarouselNext.displayName = "CarouselNext";

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
};


================================================
File: packages/ui/components/collapsible.tsx
================================================
"use client"

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }


================================================
File: packages/ui/components/command.tsx
================================================
"use client";

import * as React from "react";
import { type DialogProps } from "@radix-ui/react-dialog";
import { MagnifyingGlassIcon } from "@radix-ui/react-icons";
import { Command as CommandPrimitive } from "cmdk";

import { cn } from "@makefy/ui/lib/utils";
import { Dialog, DialogContent } from "./dialog";

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "bg-popover text-popover-foreground flex h-full w-full flex-col overflow-hidden rounded-md",
      className,
    )}
    {...props}
  />
));
Command.displayName = CommandPrimitive.displayName;

interface CommandDialogProps extends DialogProps {}

const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0">
        <Command className="[&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  );
};

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <MagnifyingGlassIcon className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "placeholder:text-muted-foreground flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none disabled:cursor-not-allowed disabled:opacity-50",
        className,
      )}
      {...props}
    />
  </div>
));

CommandInput.displayName = CommandPrimitive.Input.displayName;

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
));

CommandList.displayName = CommandPrimitive.List.displayName;

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
));

CommandEmpty.displayName = CommandPrimitive.Empty.displayName;

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "text-foreground [&_[cmdk-group-heading]]:text-muted-foreground overflow-hidden p-1 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium",
      className,
    )}
    {...props}
  />
));

CommandGroup.displayName = CommandPrimitive.Group.displayName;

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("bg-border -mx-1 h-px", className)}
    {...props}
  />
));
CommandSeparator.displayName = CommandPrimitive.Separator.displayName;

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "aria-selected:bg-accent aria-selected:text-accent-foreground relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50",
      className,
    )}
    {...props}
  />
));

CommandItem.displayName = CommandPrimitive.Item.displayName;

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "text-muted-foreground ml-auto text-xs tracking-widest",
        className,
      )}
      {...props}
    />
  );
};
CommandShortcut.displayName = "CommandShortcut";

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
};


================================================
File: packages/ui/components/dialog.tsx
================================================
"use client";

import * as React from "react";
import * as DialogPrimitive from "@radix-ui/react-dialog";
import { Cross2Icon } from "@radix-ui/react-icons";

import { cn } from "@makefy/ui/lib/utils";

const Dialog = DialogPrimitive.Root;

const DialogTrigger = DialogPrimitive.Trigger;

const DialogPortal = DialogPrimitive.Portal;

const DialogClose = DialogPrimitive.Close;

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0  fixed inset-0 z-50 bg-black/80",
      className,
    )}
    {...props}
  />
));
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName;

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border p-6 shadow-lg duration-200 sm:rounded-lg",
        className,
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute right-4 top-4 rounded-sm opacity-70 transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:pointer-events-none">
        <Cross2Icon className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
));
DialogContent.displayName = DialogPrimitive.Content.displayName;

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className,
    )}
    {...props}
  />
);
DialogHeader.displayName = "DialogHeader";

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className,
    )}
    {...props}
  />
);
DialogFooter.displayName = "DialogFooter";

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className,
    )}
    {...props}
  />
));
DialogTitle.displayName = DialogPrimitive.Title.displayName;

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-muted-foreground text-sm", className)}
    {...props}
  />
));
DialogDescription.displayName = DialogPrimitive.Description.displayName;

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogTrigger,
  DialogClose,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
};


================================================
File: packages/ui/components/drawer.tsx
================================================
"use client";

import * as React from "react";
import { Drawer as DrawerPrimitive } from "vaul";

import { cn } from "@makefy/ui/lib/utils";

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
);
Drawer.displayName = "Drawer";

const DrawerTrigger = DrawerPrimitive.Trigger;

const DrawerPortal = DrawerPrimitive.Portal;

const DrawerClose = DrawerPrimitive.Close;

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
));
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName;

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "bg-background fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border",
        className,
      )}
      {...props}
    >
      <div className="bg-muted mx-auto mt-4 h-2 w-[100px] rounded-full" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
));
DrawerContent.displayName = "DrawerContent";

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
);
DrawerHeader.displayName = "DrawerHeader";

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
);
DrawerFooter.displayName = "DrawerFooter";

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className,
    )}
    {...props}
  />
));
DrawerTitle.displayName = DrawerPrimitive.Title.displayName;

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-muted-foreground text-sm", className)}
    {...props}
  />
));
DrawerDescription.displayName = DrawerPrimitive.Description.displayName;

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
};


================================================
File: packages/ui/components/dropdown-menu.tsx
================================================
"use client";

import * as React from "react";
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu";
import {
  CheckIcon,
  ChevronRightIcon,
  DotFilledIcon,
} from "@radix-ui/react-icons";

import { cn } from "@makefy/ui/lib/utils";

const DropdownMenu = DropdownMenuPrimitive.Root;

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger;

const DropdownMenuGroup = DropdownMenuPrimitive.Group;

const DropdownMenuPortal = DropdownMenuPrimitive.Portal;

const DropdownMenuSub = DropdownMenuPrimitive.Sub;

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup;

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean;
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "focus:bg-accent data-[state=open]:bg-accent flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none",
      inset && "pl-8",
      className,
    )}
    {...props}
  >
    {children}
    <ChevronRightIcon className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
));
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName;

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] overflow-hidden rounded-md border p-1 shadow-lg",
      className,
    )}
    {...props}
  />
));
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName;

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "bg-popover text-popover-foreground z-50 min-w-[8rem] overflow-hidden rounded-md border p-1 shadow-md",
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className,
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
));
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName;

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "focus:bg-accent focus:text-accent-foreground relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className,
    )}
    {...props}
  />
));
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName;

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "focus:bg-accent focus:text-accent-foreground relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className,
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <CheckIcon className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
));
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName;

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "focus:bg-accent focus:text-accent-foreground relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className,
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <DotFilledIcon className="h-4 w-4 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
));
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName;

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className,
    )}
    {...props}
  />
));
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName;

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("bg-muted -mx-1 my-1 h-px", className)}
    {...props}
  />
));
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName;

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  );
};
DropdownMenuShortcut.displayName = "DropdownMenuShortcut";

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
};


================================================
File: packages/ui/components/form.tsx
================================================
"use client";

import * as React from "react";
import * as LabelPrimitive from "@radix-ui/react-label";
import { Slot } from "@radix-ui/react-slot";
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form";

import { cn } from "@makefy/ui/lib/utils";
import { Label } from "@makefy/ui/components/label";

const Form = FormProvider;

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
> = {
  name: TName;
};

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue,
);

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  );
};

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext);
  const itemContext = React.useContext(FormItemContext);
  const { getFieldState, formState } = useFormContext();

  const fieldState = getFieldState(fieldContext.name, formState);

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>");
  }

  const { id } = itemContext;

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  };
};

type FormItemContextValue = {
  id: string;
};

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue,
);

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId();

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  );
});
FormItem.displayName = "FormItem";

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField();

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  );
});
FormLabel.displayName = "FormLabel";

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } =
    useFormField();
  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
      className={cn(props.className, {
        "border-destructive ring-destructive text-destructive focus-visible:ring-destructive":
          Boolean(error),
      })}
    />
  );
});
FormControl.displayName = "FormControl";

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField();

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-muted-foreground text-[0.8rem]", className)}
      {...props}
    />
  );
});
FormDescription.displayName = "FormDescription";

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField();
  const body = error ? String(error?.message) : children;

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn(
        "text-destructive min-h-5 text-[0.8rem] font-medium",
        className,
      )}
      {...props}
    >
      {body}
    </p>
  );
});
FormMessage.displayName = "FormMessage";

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
};


================================================
File: packages/ui/components/index.ts
================================================
export * from "./alert";
export * from "./breadcrumb";
export * from "./button";
export * from "./card";
export * from "./carousel";
export * from "./collapsible";
export * from "./command";
export * from "./dialog";
export * from "./dropdown-menu";
export * from "./drawer";
export * from "./navigation-menu";
export * from "./input";
export * from "./form";
export * from "./avatar";
export * from "./label";
export * from "./skeleton";
export * from "./input-otp";
export * from "./pagination";
export * from "./popover";
export * from "./resizable";
export * from "./separator";
export * from "./scroll-area";
export * from "./sheet";
export * from "./select";
export * from "./sidebar";
export * from "./switch";
export * from "./tabs";
export * from "./textarea";
export * from "./toast";
export * from "./toaster";
export * from "./toggle";
export * from "./toggle-group";
export * from "./tooltip";
export * from "./use-toast";


================================================
File: packages/ui/components/input-otp.tsx
================================================
"use client";

import * as React from "react";
import { DashIcon } from "@radix-ui/react-icons";
import { OTPInput, OTPInputContext } from "input-otp";

import { cn } from "@makefy/ui/lib/utils";

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName,
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
));
InputOTP.displayName = "InputOTP";

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
));
InputOTPGroup.displayName = "InputOTPGroup";

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext);
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index] || {};

  return (
    <div
      ref={ref}
      className={cn(
        "border-input relative flex h-9 w-9 items-center justify-center border-y border-r text-sm shadow-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "ring-ring z-10 ring-1",
        className,
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="animate-caret-blink bg-foreground h-4 w-px duration-1000" />
        </div>
      )}
    </div>
  );
});
InputOTPSlot.displayName = "InputOTPSlot";

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <DashIcon />
  </div>
));
InputOTPSeparator.displayName = "InputOTPSeparator";

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator };


================================================
File: packages/ui/components/input.tsx
================================================
import * as React from "react";

import { cn } from "@makefy/ui/lib/utils";

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "border-input file:text-foreground placeholder:text-muted-foreground focus-visible:ring-ring flex h-9 w-full rounded-md border bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium focus-visible:outline-none focus-visible:ring-1 disabled:cursor-not-allowed disabled:opacity-50",
          // Invalid styles
          "invalid:border-destructive invalid:ring-destructive invalid:text-destructive invalid:focus-visible:ring-destructive",
          className,
        )}
        ref={ref}
        {...props}
      />
    );
  },
);
Input.displayName = "Input";

export { Input };


================================================
File: packages/ui/components/label.tsx
================================================
"use client";

import * as React from "react";
import * as LabelPrimitive from "@radix-ui/react-label";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@makefy/ui/lib/utils";

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70",
);

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
));
Label.displayName = LabelPrimitive.Root.displayName;

export { Label };


================================================
File: packages/ui/components/navigation-menu.tsx
================================================
"use client";

import * as React from "react";
import { ChevronDownIcon } from "@radix-ui/react-icons";
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu";
import { cva } from "class-variance-authority";

import { cn } from "@makefy/ui/lib/utils";

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className,
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
));
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName;

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className,
    )}
    {...props}
  />
));
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName;

const NavigationMenuItem = NavigationMenuPrimitive.Item;

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50",
);

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDownIcon
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-300 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
));
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName;

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 left-0 top-0 w-full md:absolute md:w-auto ",
      className,
    )}
    {...props}
  />
));
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName;

const NavigationMenuLink = NavigationMenuPrimitive.Link;

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border shadow md:w-[var(--radix-navigation-menu-viewport-width)]",
        className,
      )}
      ref={ref}
      {...props}
    />
  </div>
));
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName;

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden",
      className,
    )}
    {...props}
  >
    <div className="bg-border relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm shadow-md" />
  </NavigationMenuPrimitive.Indicator>
));
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName;

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
};


================================================
File: packages/ui/components/pagination.tsx
================================================
import * as React from "react";
import {
  ChevronLeftIcon,
  ChevronRightIcon,
  DotsHorizontalIcon,
} from "@radix-ui/react-icons";

import { cn } from "@makefy/ui/lib/utils";
import { ButtonProps, buttonVariants } from "@makefy/ui/components/button";

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
);
Pagination.displayName = "Pagination";

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
));
PaginationContent.displayName = "PaginationContent";

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
));
PaginationItem.displayName = "PaginationItem";

type PaginationLinkProps = {
  isActive?: boolean;
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">;

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className,
    )}
    {...props}
  />
);
PaginationLink.displayName = "PaginationLink";

const PaginationPrevious = ({
  className,
  text = "Previous",
  ...props
}: React.ComponentProps<typeof PaginationLink> & { text?: string | null }) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1", text && "pl-2.5", className)}
    {...props}
  >
    <ChevronLeftIcon className="h-4 w-4" />
    {text && <span>{text}</span>}
  </PaginationLink>
);
PaginationPrevious.displayName = "PaginationPrevious";

const PaginationNext = ({
  className,
  text = "Next",
  ...props
}: React.ComponentProps<typeof PaginationLink> & { text?: string | null }) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1", text && "pr-2.5", className)}
    {...props}
  >
    {text && <span>{text}</span>}
    <ChevronRightIcon className="h-4 w-4" />
  </PaginationLink>
);
PaginationNext.displayName = "PaginationNext";

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <DotsHorizontalIcon className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
);
PaginationEllipsis.displayName = "PaginationEllipsis";

export {
  Pagination,
  PaginationContent,
  PaginationLink,
  PaginationItem,
  PaginationPrevious,
  PaginationNext,
  PaginationEllipsis,
};


================================================
File: packages/ui/components/popover.tsx
================================================
"use client";

import * as React from "react";
import * as PopoverPrimitive from "@radix-ui/react-popover";

import { cn } from "@makefy/ui/lib/utils";

const Popover = PopoverPrimitive.Root;

const PopoverTrigger = PopoverPrimitive.Trigger;

const PopoverPortal = PopoverPrimitive.Portal;

const PopoverAnchor = PopoverPrimitive.Anchor;

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 rounded-md border p-4 shadow-md outline-none",
        className,
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
));
PopoverContent.displayName = PopoverPrimitive.Content.displayName;

export {
  Popover,
  PopoverTrigger,
  PopoverContent,
  PopoverAnchor,
  PopoverPortal,
};


================================================
File: packages/ui/components/resizable.tsx
================================================
"use client";

import { DragHandleDots2Icon } from "@radix-ui/react-icons";
import * as ResizablePrimitive from "react-resizable-panels";

import { cn } from "@makefy/ui/lib/utils";

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className,
    )}
    {...props}
  />
);

const ResizablePanel = ResizablePrimitive.Panel;

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean;
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "bg-border focus-visible:ring-ring relative flex w-px items-center justify-center after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className,
    )}
    {...props}
  >
    {withHandle && (
      <div className="bg-border z-10 flex h-4 w-3 items-center justify-center rounded-sm border">
        <DragHandleDots2Icon className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
);

export { ResizablePanelGroup, ResizablePanel, ResizableHandle };


================================================
File: packages/ui/components/scroll-area.tsx
================================================
"use client";

import * as React from "react";
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area";

import { cn } from "@makefy/ui/lib/utils";

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
));
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName;

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className,
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="bg-border relative flex-1 rounded-full" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
));
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName;

export { ScrollArea, ScrollBar };


================================================
File: packages/ui/components/select.tsx
================================================
"use client";

import * as React from "react";
import {
  CaretSortIcon,
  CheckIcon,
  ChevronDownIcon,
  ChevronUpIcon,
} from "@radix-ui/react-icons";
import * as SelectPrimitive from "@radix-ui/react-select";

import { cn } from "@makefy/ui/lib/utils";

const Select = SelectPrimitive.Root;

const SelectGroup = SelectPrimitive.Group;

const SelectValue = SelectPrimitive.Value;

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "border-input ring-offset-background placeholder:text-muted-foreground focus:ring-ring flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border bg-transparent px-3 py-2 text-sm shadow-sm focus:outline-none focus:ring-1 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className,
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <CaretSortIcon className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
));
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName;

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className,
    )}
    {...props}
  >
    <ChevronUpIcon />
  </SelectPrimitive.ScrollUpButton>
));
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName;

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className,
    )}
    {...props}
  >
    <ChevronDownIcon />
  </SelectPrimitive.ScrollDownButton>
));
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName;

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border shadow-md",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className,
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]",
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
));
SelectContent.displayName = SelectPrimitive.Content.displayName;

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", className)}
    {...props}
  />
));
SelectLabel.displayName = SelectPrimitive.Label.displayName;

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "focus:bg-accent focus:text-accent-foreground relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className,
    )}
    {...props}
  >
    <span className="absolute right-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <CheckIcon className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>
    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
));
SelectItem.displayName = SelectPrimitive.Item.displayName;

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("bg-muted -mx-1 my-1 h-px", className)}
    {...props}
  />
));
SelectSeparator.displayName = SelectPrimitive.Separator.displayName;

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
};


================================================
File: packages/ui/components/separator.tsx
================================================
"use client";

import * as React from "react";
import * as SeparatorPrimitive from "@radix-ui/react-separator";

import { cn } from "@makefy/ui/lib/utils";

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref,
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "bg-border shrink-0",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className,
      )}
      {...props}
    />
  ),
);
Separator.displayName = SeparatorPrimitive.Root.displayName;

export { Separator };


================================================
File: packages/ui/components/sheet.tsx
================================================
"use client";

import * as React from "react";
import * as SheetPrimitive from "@radix-ui/react-dialog";
import { Cross2Icon } from "@radix-ui/react-icons";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@makefy/ui/lib/utils";

const Sheet = SheetPrimitive.Root;

const SheetTrigger = SheetPrimitive.Trigger;

const SheetClose = SheetPrimitive.Close;

const SheetPortal = SheetPrimitive.Portal;

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0  fixed inset-0 z-50 bg-black/80",
      className,
    )}
    {...props}
    ref={ref}
  />
));
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName;

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  },
);

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {
  hideCloseIcon?: boolean;
}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(
  (
    { side = "right", className, hideCloseIcon = false, children, ...props },
    ref,
  ) => (
    <SheetPortal>
      <SheetOverlay />
      <SheetPrimitive.Content
        ref={ref}
        className={cn(sheetVariants({ side }), className)}
        {...props}
      >
        {!hideCloseIcon && (
          <SheetPrimitive.Close className="ring-offset-background focus:ring-ring data-[state=open]:bg-secondary absolute right-4 top-4 rounded-sm opacity-70 transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:pointer-events-none">
            <Cross2Icon className="h-4 w-4" />
            <span className="sr-only">Close</span>
          </SheetPrimitive.Close>
        )}
        {children}
      </SheetPrimitive.Content>
    </SheetPortal>
  ),
);
SheetContent.displayName = SheetPrimitive.Content.displayName;

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className,
    )}
    {...props}
  />
);
SheetHeader.displayName = "SheetHeader";

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className,
    )}
    {...props}
  />
);
SheetFooter.displayName = "SheetFooter";

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-foreground text-lg font-semibold", className)}
    {...props}
  />
));
SheetTitle.displayName = SheetPrimitive.Title.displayName;

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-muted-foreground text-sm", className)}
    {...props}
  />
));
SheetDescription.displayName = SheetPrimitive.Description.displayName;

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
};


================================================
File: packages/ui/components/sidebar.tsx
================================================
"use client";

import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { VariantProps, cva } from "class-variance-authority";
import { PanelLeft } from "lucide-react";

import { useIsMobile } from "../hooks/use-mobile";
import { cn } from "@makefy/ui/lib/utils";
import { Button } from "@makefy/ui/components/button";
import { Input } from "@makefy/ui/components/input";
import { Separator } from "@makefy/ui/components/separator";
import { Sheet, SheetContent } from "@makefy/ui/components/sheet";
import { Skeleton } from "@makefy/ui/components/skeleton";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@makefy/ui/components/tooltip";

const SIDEBAR_COOKIE_NAME = "sidebar:state";
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;
const SIDEBAR_WIDTH = "16rem";
const SIDEBAR_WIDTH_MOBILE = "18rem";
const SIDEBAR_WIDTH_ICON = "3rem";
const SIDEBAR_KEYBOARD_SHORTCUT = "b";

type SidebarContext = {
  state: "expanded" | "collapsed";
  open: boolean;
  setOpen: (open: boolean) => void;
  openMobile: boolean;
  setOpenMobile: (open: boolean) => void;
  isMobile: boolean;
  toggleSidebar: () => void;
};

const SidebarContext = React.createContext<SidebarContext | null>(null);

function useSidebar() {
  const context = React.useContext(SidebarContext);
  if (!context) {
    throw new Error("useSidebar must be used within a Sidebar.");
  }

  return context;
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean;
    open?: boolean;
    onOpenChange?: (open: boolean) => void;
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref,
  ) => {
    const isMobile = useIsMobile();
    const [openMobile, setOpenMobile] = React.useState(false);

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen);
    const open = openProp ?? _open;
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        if (setOpenProp) {
          return setOpenProp?.(
            typeof value === "function" ? value(open) : value,
          );
        }

        _setOpen(value);

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${open}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`;
      },
      [setOpenProp, open],
    );

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open);
    }, [isMobile, setOpen, setOpenMobile]);

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault();
          toggleSidebar();
        }
      };

      window.addEventListener("keydown", handleKeyDown);
      return () => window.removeEventListener("keydown", handleKeyDown);
    }, [toggleSidebar]);

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed";

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      ],
    );

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper text-sidebar-foreground has-[[data-variant=inset]]:bg-sidebar flex min-h-svh w-full",
              className,
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    );
  },
);
SidebarProvider.displayName = "SidebarProvider";

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right";
    variant?: "sidebar" | "floating" | "inset";
    collapsible?: "offcanvas" | "icon" | "none";
    containerClassName?: string;
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      containerClassName,
      children,
      ...props
    },
    ref,
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar();

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "bg-sidebar text-sidebar-foreground flex h-full w-[--sidebar-width] flex-col",
            containerClassName,
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      );
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className={cn(
              "bg-sidebar text-sidebar-foreground w-[--sidebar-width] p-0 [&>button]:hidden",
              containerClassName,
            )}
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      );
    }

    return (
      <div
        ref={ref}
        className={cn("group peer hidden md:block", containerClassName)}
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "relative h-svh w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]",
          )}
        />
        <div
          className={cn(
            "fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className,
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    );
  },
);
Sidebar.displayName = "Sidebar";

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar();

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event);
        toggleSidebar();
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  );
});
SidebarTrigger.displayName = "SidebarTrigger";

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar();

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:hover:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className,
      )}
      {...props}
    />
  );
});
SidebarRail.displayName = "SidebarRail";

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "bg-background relative flex min-h-svh flex-1 flex-col",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className,
      )}
      {...props}
    />
  );
});
SidebarInset.displayName = "SidebarInset";

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "bg-background focus-visible:ring-sidebar-ring h-8 w-full shadow-none focus-visible:ring-2",
        className,
      )}
      {...props}
    />
  );
});
SidebarInput.displayName = "SidebarInput";

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  );
});
SidebarHeader.displayName = "SidebarHeader";

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  );
});
SidebarFooter.displayName = "SidebarFooter";

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("bg-sidebar-border mx-2 w-auto", className)}
      {...props}
    />
  );
});
SidebarSeparator.displayName = "SidebarSeparator";

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className,
      )}
      {...props}
    />
  );
});
SidebarContent.displayName = "SidebarContent";

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  );
});
SidebarGroup.displayName = "SidebarGroup";

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div";

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-none transition-[margin,opa] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className,
      )}
      {...props}
    />
  );
});
SidebarGroupLabel.displayName = "SidebarGroupLabel";

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button";

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-none transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className,
      )}
      {...props}
    />
  );
});
SidebarGroupAction.displayName = "SidebarGroupAction";

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
));
SidebarGroupContent.displayName = "SidebarGroupContent";

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
));
SidebarMenu.displayName = "SidebarMenu";

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
));
SidebarMenuItem.displayName = "SidebarMenuItem";

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean;
    isActive?: boolean;
    tooltip?: string | React.ComponentProps<typeof TooltipContent>;
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref,
  ) => {
    const Comp = asChild ? Slot : "button";
    const { isMobile, state } = useSidebar();

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    );

    if (!tooltip) {
      return button;
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      };
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    );
  },
);
SidebarMenuButton.displayName = "SidebarMenuButton";

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean;
    showOnHover?: boolean;
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button";

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-none transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0",
        className,
      )}
      {...props}
    />
  );
});
SidebarMenuAction.displayName = "SidebarMenuAction";

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className,
    )}
    {...props}
  />
));
SidebarMenuBadge.displayName = "SidebarMenuBadge";

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean;
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`;
  }, []);

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("flex h-8 items-center gap-2 rounded-md px-2", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 max-w-[--skeleton-width] flex-1"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  );
});
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton";

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className,
    )}
    {...props}
  />
));
SidebarMenuSub.displayName = "SidebarMenuSub";

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />);
SidebarMenuSubItem.displayName = "SidebarMenuSubItem";

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean;
    size?: "sm" | "md";
    isActive?: boolean;
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a";

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline-none focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className,
      )}
      {...props}
    />
  );
});
SidebarMenuSubButton.displayName = "SidebarMenuSubButton";

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
};


================================================
File: packages/ui/components/skeleton.tsx
================================================
import { cn } from "@makefy/ui/lib/utils";

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("bg-primary/10 animate-pulse rounded-md", className)}
      {...props}
    />
  );
}

export { Skeleton };


================================================
File: packages/ui/components/switch.tsx
================================================
"use client";

import * as React from "react";
import * as SwitchPrimitives from "@radix-ui/react-switch";

import { cn } from "@makefy/ui/lib/utils";

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "focus-visible:ring-ring focus-visible:ring-offset-background data-[state=checked]:bg-primary data-[state=unchecked]:bg-input peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
      className,
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "bg-background pointer-events-none block h-4 w-4 rounded-full shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0",
      )}
    />
  </SwitchPrimitives.Root>
));
Switch.displayName = SwitchPrimitives.Root.displayName;

export { Switch };


================================================
File: packages/ui/components/tabs.tsx
================================================
"use client";

import * as React from "react";
import * as TabsPrimitive from "@radix-ui/react-tabs";

import { cn } from "@makefy/ui/lib/utils";

const Tabs = TabsPrimitive.Root;

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "bg-muted text-muted-foreground inline-flex h-9 items-center justify-center rounded-lg p-1",
      className,
    )}
    {...props}
  />
));
TabsList.displayName = TabsPrimitive.List.displayName;

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "ring-offset-background focus-visible:ring-ring data-[state=active]:bg-background data-[state=active]:text-foreground inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow",
      className,
    )}
    {...props}
  />
));
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName;

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "ring-offset-background focus-visible:ring-ring mt-2 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2",
      className,
    )}
    {...props}
  />
));
TabsContent.displayName = TabsPrimitive.Content.displayName;

export { Tabs, TabsList, TabsTrigger, TabsContent };


================================================
File: packages/ui/components/textarea.tsx
================================================
import * as React from "react";

import { cn } from "@makefy/ui/lib/utils";

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "border-input placeholder:text-muted-foreground focus-visible:ring-ring flex min-h-[60px] w-full rounded-md border bg-transparent px-3 py-2 text-sm shadow-sm focus-visible:outline-none focus-visible:ring-1 disabled:cursor-not-allowed disabled:opacity-50",
          className,
        )}
        ref={ref}
        {...props}
      />
    );
  },
);
Textarea.displayName = "Textarea";

export { Textarea };


================================================
File: packages/ui/components/toast.tsx
================================================
"use client";

import * as React from "react";
import { Cross2Icon } from "@radix-ui/react-icons";
import * as ToastPrimitives from "@radix-ui/react-toast";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@makefy/ui/lib/utils";

const ToastProvider = ToastPrimitives.Provider;

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className,
    )}
    {...props}
  />
));
ToastViewport.displayName = ToastPrimitives.Viewport.displayName;

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-2 overflow-hidden rounded-md border p-4 pr-6 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  },
);

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  );
});
Toast.displayName = ToastPrimitives.Root.displayName;

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "hover:bg-secondary focus:ring-ring group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium transition-colors focus:outline-none focus:ring-1 disabled:pointer-events-none disabled:opacity-50",
      className,
    )}
    {...props}
  />
));
ToastAction.displayName = ToastPrimitives.Action.displayName;

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "text-foreground/50 hover:text-foreground absolute right-1 top-1 rounded-md p-1 opacity-0 transition-opacity focus:opacity-100 focus:outline-none focus:ring-1 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className,
    )}
    toast-close=""
    {...props}
  >
    <Cross2Icon className="h-4 w-4" />
  </ToastPrimitives.Close>
));
ToastClose.displayName = ToastPrimitives.Close.displayName;

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold [&+div]:text-xs", className)}
    {...props}
  />
));
ToastTitle.displayName = ToastPrimitives.Title.displayName;

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
));
ToastDescription.displayName = ToastPrimitives.Description.displayName;

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>;

type ToastActionElement = React.ReactElement<typeof ToastAction>;

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
};


================================================
File: packages/ui/components/toaster.tsx
================================================
"use client";

import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@makefy/ui/components/toast";
import { useToast } from "@makefy/ui";

export function Toaster() {
  const { toasts } = useToast();

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        );
      })}
      <ToastViewport />
    </ToastProvider>
  );
}


================================================
File: packages/ui/components/toggle-group.tsx
================================================
"use client";

import * as React from "react";
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group";
import { VariantProps } from "class-variance-authority";

import { cn } from "@makefy/ui/lib/utils";
import { toggleVariants } from "@makefy/ui/components/toggle";

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
});

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
));

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName;

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext);

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className,
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  );
});

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName;

export { ToggleGroup, ToggleGroupItem };


================================================
File: packages/ui/components/toggle.tsx
================================================
"use client";

import * as React from "react";
import * as TogglePrimitive from "@radix-ui/react-toggle";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@makefy/ui/lib/utils";

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent shadow-sm hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-9 px-3",
        xs: "h-6 px-1",
        sm: "h-8 px-2",
        lg: "h-10 px-3",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
));

Toggle.displayName = TogglePrimitive.Root.displayName;

export { Toggle, toggleVariants };


================================================
File: packages/ui/components/tooltip.tsx
================================================
"use client";

import * as React from "react";
import * as TooltipPrimitive from "@radix-ui/react-tooltip";

import { cn } from "@makefy/ui/lib/utils";

const TooltipProvider = TooltipPrimitive.Provider;

const Tooltip = TooltipPrimitive.Root;

const TooltipTrigger = TooltipPrimitive.Trigger;

const TooltipPortal = TooltipPrimitive.Portal;

const TooltipArrow = TooltipPrimitive.Arrow;

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "bg-background text-secondary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 overflow-hidden rounded-md border px-3 py-1.5 text-xs",
      className,
    )}
    {...props}
  />
));
TooltipContent.displayName = TooltipPrimitive.Content.displayName;

export {
  Tooltip,
  TooltipTrigger,
  TooltipPortal,
  TooltipArrow,
  TooltipContent,
  TooltipProvider,
};


================================================
File: packages/ui/components/use-toast.ts
================================================
"use client";

// Inspired by react-hot-toast library
import * as React from "react";

import type {
  ToastActionElement,
  ToastProps,
} from "@makefy/ui/components/toast";

const TOAST_LIMIT = 1;
const TOAST_REMOVE_DELAY = 1000000;

type ToasterToast = ToastProps & {
  id: string;
  title?: React.ReactNode;
  description?: React.ReactNode;
  action?: ToastActionElement;
};

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const;

let count = 0;

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER;
  return count.toString();
}

type ActionType = typeof actionTypes;

type Action =
  | {
      type: ActionType["ADD_TOAST"];
      toast: ToasterToast;
    }
  | {
      type: ActionType["UPDATE_TOAST"];
      toast: Partial<ToasterToast>;
    }
  | {
      type: ActionType["DISMISS_TOAST"];
      toastId?: ToasterToast["id"];
    }
  | {
      type: ActionType["REMOVE_TOAST"];
      toastId?: ToasterToast["id"];
    };

interface State {
  toasts: ToasterToast[];
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return;
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId);
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    });
  }, TOAST_REMOVE_DELAY);

  toastTimeouts.set(toastId, timeout);
};

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      };

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t,
        ),
      };

    case "DISMISS_TOAST": {
      const { toastId } = action;

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId);
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id);
        });
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t,
        ),
      };
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        };
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      };
  }
};

const listeners: Array<(state: State) => void> = [];

let memoryState: State = { toasts: [] };

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action);
  listeners.forEach((listener) => {
    listener(memoryState);
  });
}

type Toast = Omit<ToasterToast, "id">;

function toast({ ...props }: Toast) {
  const id = genId();

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    });
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id });

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss();
      },
    },
  });

  return {
    id: id,
    dismiss,
    update,
  };
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState);

  React.useEffect(() => {
    listeners.push(setState);
    return () => {
      const index = listeners.indexOf(setState);
      if (index > -1) {
        listeners.splice(index, 1);
      }
    };
  }, [state]);

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  };
}

export { useToast, toast };


================================================
File: packages/ui/hooks/use-mobile.tsx
================================================
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}


================================================
File: packages/ui/lib/utils.ts
================================================
import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}


================================================
File: packages/ui/turbo/generators/config.ts
================================================
import type { PlopTypes } from "@turbo/gen";

// Learn more about Turborepo Generators at https://turbo.build/repo/docs/core-concepts/monorepos/code-generation

export default function generator(plop: PlopTypes.NodePlopAPI): void {
  // A simple generator to add a new React component to the internal UI library
  plop.setGenerator("react-component", {
    description: "Adds a new react component",
    prompts: [
      {
        type: "input",
        name: "name",
        message: "What is the name of the component?",
      },
    ],
    actions: [
      {
        type: "add",
        path: "src/{{kebabCase name}}.tsx",
        templateFile: "templates/component.hbs",
      },
      {
        type: "append",
        path: "package.json",
        pattern: /"exports": {(?<insertion>)/g,
        template: '"./{{kebabCase name}}": "./src/{{kebabCase name}}.tsx",',
      },
    ],
  });
}


================================================
File: packages/ui/turbo/generators/templates/component.hbs
================================================
export const {{ pascalCase name }} = ({ children }: { children: React.ReactNode }) => {
  return (
    <div>
      <h1>{{ pascalCase name }} Component</h1>
      {children}
    </div>
  );
};


================================================
File: .github/workflows/supabase-tests-pull-request.yml
================================================
name: Supabase checks

on:
  push:
    paths:
      # Only run the workflow when changes are made to the migrations directory
      - "apps/chat-with-pdf/supabase/migrations/**"
    branches:
      - "feature/**"
  workflow_dispatch:

jobs:
  test:
    name: Supabase tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Init Supabase local development setup
        run: supabase init

      - name: Start Supabase local development setup
        run: supabase start

      - name: Run Supabase lint locally
        run: supabase db lint

      - name: Run Supabase tests locally
        run: supabase test db
  push:
    name: Push to Supabase
    needs: test
    runs-on: ubuntu-latest
    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      SUPABASE_PROJECT_ID: ${{ github.base_ref == 'main' && secrets.SUPABASE_PROD_PROJECT_ID || secrets.SUPABASE_STAGING_PROJECT_ID }}
      SUPABASE_DB_PASSWORD: ${{ github.base_ref == 'main' && secrets.SUPABASE_PROD_DB_PASSWORD || secrets.SUPABASE_STAGING_DB_PASSWORD }}
      SUPABASE_AUTH_GITHUB_CLIENT_ID: ${{ secrets.SUPABASE_AUTH_GITHUB_CLIENT_ID }}
      SUPABASE_AUTH_GITHUB_SECRET: ${{ secrets.SUPABASE_AUTH_GITHUB_SECRET }}

    steps:
      - uses: actions/checkout@v4
      - uses: supabase/setup-cli@v1
        with:
          version: latest

      - run: supabase link --project-ref $SUPABASE_PROJECT_ID --debug
        working-directory: apps/chat-with-pdf
      - run: supabase db push
        working-directory: apps/chat-with-pdf


================================================
File: .github/workflows/supabase-update-db.yml
================================================
name: Supabase update

on:
  push:
    paths:
      - "apps/chat-with-pdf/**"
    branches:
      - "develop"
      - "main"
  workflow_dispatch:

jobs:
  update:
    name: Update Supabase db
    runs-on: ubuntu-latest
    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      SUPABASE_PROJECT_ID: ${{ github.base_ref == 'main' && secrets.SUPABASE_PROD_PROJECT_ID || secrets.SUPABASE_STAGING_PROJECT_ID }}
      SUPABASE_DB_PASSWORD: ${{ github.base_ref == 'main' && secrets.SUPABASE_PROD_DB_PASSWORD || secrets.SUPABASE_STAGING_DB_PASSWORD }}
      SUPABASE_AUTH_GITHUB_CLIENT_ID: ${{ secrets.SUPABASE_AUTH_GITHUB_CLIENT_ID }}
      SUPABASE_AUTH_GITHUB_SECRET: ${{ secrets.SUPABASE_AUTH_GITHUB_SECRET }}

    steps:
      - uses: actions/checkout@v4
      - uses: supabase/setup-cli@v1
        with:
          version: latest

      - run: supabase link --project-ref $SUPABASE_PROJECT_ID --debug
        working-directory: apps/chat-with-pdf
      - run: supabase db push
        working-directory: apps/chat-with-pdf


